<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AABB.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>AABB_8cpp.html</filename>
    <includes id="AABB_8hpp" name="AABB.hpp" local="no" imported="no">PlayRho/Collision/AABB.hpp</includes>
    <includes id="RayCastInput_8hpp" name="RayCastInput.hpp" local="no" imported="no">PlayRho/Collision/RayCastInput.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="Shape_8hpp" name="Shape.hpp" local="no" imported="no">PlayRho/Collision/Shapes/Shape.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44cc65808fd89570707b3af1bc87eb36</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa67cf0c4b074e5c10a793cb2f16a0860</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xfm0, const Transformation &amp;xfm1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74afc15ef58efc35461a1580887e5363</anchor>
      <arglist>(const Shape &amp;shape, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a197397d1fa4c56a0498efea2026dba7f</anchor>
      <arglist>(const Fixture &amp;fixture) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c86a617058eada4a474b501f0844b76</anchor>
      <arglist>(const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab511a5fe02bf36ca289ea10e7a8fbb07</anchor>
      <arglist>(const Fixture &amp;fA, ChildCounter iA, const Fixture &amp;fB, ChildCounter iB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acb0615b385c30fd7ca0b7b562f5ba8bf</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>add2ef460cb524b34a3ad4feea71dc41f</anchor>
      <arglist>(const playrho::detail::RayCastInput&lt; 2 &gt; &amp;input) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AABB.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>AABB_8hpp.html</filename>
    <includes id="Intervals_8hpp" name="Intervals.hpp" local="no" imported="no">PlayRho/Common/Intervals.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">PlayRho/Common/Vector2.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <class kind="struct">playrho::detail::RayCastInput</class>
    <class kind="struct">playrho::detail::AABB</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>detail::AABB&lt; 2 &gt;</type>
      <name>AABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a03a4588e961b6a369745c9c5b68b9868</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a90ccf5a25dfba2e91603cb02d94b2301</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ad3afe379aece13ee20c7581aafcdfaeb</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a5accaf2fe5186e02ddb93f8c07887c54</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa2188c52c7ed607cf89168e29307e468</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae45568c5386eb61b893e75f791c79d8d</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a69db919dd0fd89175d3e6386508e0d87</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa8268e1d1322b4a65a62f9638e11fb04</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>Contains</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a939e3a96029dde080735ecb4da9260aa</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4ab5887876bf8379833a7ddc5901a207</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7858f1f9664f0c2512cf00969b081217</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Move</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7f944a0ead01e7370509f9231bfb9fa2</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a48a0c68e2b2f594072cf52c26ccdabdc</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a416c483d73eaf2c586ed185aeaff8af9</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ada22d3291107cc2aaa670309628fa11f</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aaeea3789c48130a588c67d49aa8f6a3a</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0f52be70dfa911205c593eb82dc69a66</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3903c09198eb0937977d3e8037e04f0a</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4cdb6dbe09a816784ce7c171e69cb5e7</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aeedbbe27963b9396e1e566a97a03097a</anchor>
      <arglist>(::std::ostream &amp;os, const AABB&lt; N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>GetPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4f671c547cf8f5deecfa5bbf08899f14</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44cc65808fd89570707b3af1bc87eb36</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa67cf0c4b074e5c10a793cb2f16a0860</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xfm0, const Transformation &amp;xfm1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74afc15ef58efc35461a1580887e5363</anchor>
      <arglist>(const Shape &amp;shape, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a197397d1fa4c56a0498efea2026dba7f</anchor>
      <arglist>(const Fixture &amp;fixture) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c86a617058eada4a474b501f0844b76</anchor>
      <arglist>(const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab511a5fe02bf36ca289ea10e7a8fbb07</anchor>
      <arglist>(const Fixture &amp;fA, ChildCounter iA, const Fixture &amp;fB, ChildCounter iB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acb0615b385c30fd7ca0b7b562f5ba8bf</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>add2ef460cb524b34a3ad4feea71dc41f</anchor>
      <arglist>(const playrho::detail::RayCastInput&lt; 2 &gt; &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54d5fa1d077fbec64800d99ce2775aae</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Collision.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>Collision_8cpp.html</filename>
    <includes id="Collision_8hpp" name="Collision.hpp" local="no" imported="no">PlayRho/Collision/Collision.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">PlayRho/Collision/Manifold.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PointStates</type>
      <name>GetPointStates</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae48de2e5ef109c667912e5db7b170d94</anchor>
      <arglist>(const Manifold &amp;manifold1, const Manifold &amp;manifold2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ClipList</type>
      <name>ClipSegmentToLine</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a073a93c54a20aa68f2c56e759b7976ab</anchor>
      <arglist>(const ClipList &amp;vIn, const UnitVec &amp;normal, Length offset, ContactFeature::Index indexA)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Collision.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>Collision_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="ArrayList_8hpp" name="ArrayList.hpp" local="no" imported="no">PlayRho/Common/ArrayList.hpp</includes>
    <includes id="ContactFeature_8hpp" name="ContactFeature.hpp" local="no" imported="no">PlayRho/Collision/ContactFeature.hpp</includes>
    <class kind="struct">playrho::PointStates</class>
    <class kind="struct">playrho::d2::ClipVertex</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>ArrayList&lt; ClipVertex, MaxManifoldPoints &gt;</type>
      <name>ClipList</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab02c685f9b6933b73418fb3223e2e433</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PointState</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a06f67e158a928ef59e4263facac8fb0b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba5ac8cf2fb7a90ff2d0829f5fca4db5b8">NullState</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba494a3e62657370358107e2edf3fca5a0">AddState</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba60a7f32dd91e5f33a4ca2bc7b7255343">PersistState</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba3500ff358c0521359118fe519bd8f605">RemoveState</enumvalue>
    </member>
    <member kind="function">
      <type>PointStates</type>
      <name>GetPointStates</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae48de2e5ef109c667912e5db7b170d94</anchor>
      <arglist>(const Manifold &amp;manifold1, const Manifold &amp;manifold2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ClipList</type>
      <name>ClipSegmentToLine</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a073a93c54a20aa68f2c56e759b7976ab</anchor>
      <arglist>(const ClipList &amp;vIn, const UnitVec &amp;normal, Length offset, ContactFeature::Index indexA)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactFeature.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>ContactFeature_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::ContactFeature</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetVertexVertexContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a10ad4cc19ec75313b99288e91950a47d</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetVertexFaceContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad6e8b575033edcfa889ffbf46c59d3cf</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetFaceVertexContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acba99e7b6830147b661bafaa0dea6e57</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetFaceFaceContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab8801413b54ba7e1db710717c18020d7</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>Flip</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac6715d6c6303a8e57025977ca0b079eb</anchor>
      <arglist>(ContactFeature val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a197cce644da40356103fcdebd7911dba</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9469d42ec9781ca037c112ae05ebe9ae</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6cc5c3f8bdf0fe8001ba1d2e3f7b2eea</anchor>
      <arglist>(ContactFeature::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad3ec58bed15fb00ea00af6a52e5a7e3e</anchor>
      <arglist>(::std::ostream &amp;os, const ContactFeature &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Distance.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>Distance_8cpp.html</filename>
    <includes id="Distance_8hpp" name="Distance.hpp" local="no" imported="no">PlayRho/Collision/Distance.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="Simplex_8hpp" name="Simplex.hpp" local="no" imported="no">PlayRho/Collision/Simplex.hpp</includes>
    <includes id="TimeOfImpact_8hpp" name="TimeOfImpact.hpp" local="no" imported="no">PlayRho/Collision/TimeOfImpact.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39c11c9e373870e29e2f5cf69f817b5e</anchor>
      <arglist>(const ToiConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PairLength2</type>
      <name>GetWitnessPoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af23dfb97190555d582956bfe1b7624fb</anchor>
      <arglist>(const Simplex &amp;simplex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceOutput</type>
      <name>Distance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad01443fd4ea346d550ece90f7f92b1f4</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;transformA, const DistanceProxy &amp;proxyB, const Transformation &amp;transformB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad5a1ff6589dc30ed3f9f7ee881f17bb2</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Distance.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>Distance_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="Simplex_8hpp" name="Simplex.hpp" local="no" imported="no">PlayRho/Collision/Simplex.hpp</includes>
    <class kind="struct">playrho::d2::DistanceConf</class>
    <class kind="struct">playrho::d2::DistanceOutput</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Length2, Length2 &gt;</type>
      <name>PairLength2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae444a62491fcb2b10f0f06a41b1ac406</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PairLength2</type>
      <name>GetWitnessPoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af23dfb97190555d582956bfe1b7624fb</anchor>
      <arglist>(const Simplex &amp;simplex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>GetDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b44a6a5336bc2b25cd92fdc5e344b4e</anchor>
      <arglist>(PairLength2 arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39c11c9e373870e29e2f5cf69f817b5e</anchor>
      <arglist>(const ToiConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceOutput</type>
      <name>Distance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad01443fd4ea346d550ece90f7f92b1f4</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;transformA, const DistanceProxy &amp;proxyB, const Transformation &amp;transformB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad5a1ff6589dc30ed3f9f7ee881f17bb2</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistanceProxy.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>DistanceProxy_8cpp.html</filename>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="Shape_8hpp" name="Shape.hpp" local="no" imported="no">PlayRho/Collision/Shapes/Shape.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1311c8979a6d955fa240491cbf239e99</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>FindLowestRightMostVertex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a76c0389e1d7343fb8ad93543d3138f</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetConvexHullAsVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1538594ce2f0d86da70bf832c0327bb</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gac9da7b3dd9e1dc5532a0f3c47f31f22e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, Length2 point) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistanceProxy.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>DistanceProxy_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="Range_8hpp" name="Range.hpp" local="no" imported="no">PlayRho/Common/Range.hpp</includes>
    <class kind="class">playrho::d2::DistanceProxy</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1311c8979a6d955fa240491cbf239e99</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1c65d94d98dea8f68c3dd32e90b888bb</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8d29a87b8865a1e42c35360ddc2bb6bf</anchor>
      <arglist>(const DistanceProxy &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSupportIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6cfc27f1644f9c4d6da229b5eba07e51</anchor>
      <arglist>(const DistanceProxy &amp;proxy, T dir) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>FindLowestRightMostVertex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a76c0389e1d7343fb8ad93543d3138f</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetConvexHullAsVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1538594ce2f0d86da70bf832c0327bb</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gac9da7b3dd9e1dc5532a0f3c47f31f22e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, Length2 point) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicTree.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>DynamicTree_8cpp.html</filename>
    <includes id="DynamicTree_8hpp" name="DynamicTree.hpp" local="no" imported="no">PlayRho/Collision/DynamicTree.hpp</includes>
    <includes id="GrowableStack_8hpp" name="GrowableStack.hpp" local="no" imported="no">PlayRho/Common/GrowableStack.hpp</includes>
    <includes id="DynamicMemory_8hpp" name="DynamicMemory.hpp" local="no" imported="no">PlayRho/Common/DynamicMemory.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69bff32e0251d31f1ab3613f2f8f4459</anchor>
      <arglist>(DynamicTree &amp;lhs, DynamicTree &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a52ca8acb99e3c3591d13ca912282470e</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, const DynamicTreeSizeCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a387361206b47016fdadec182c37852a1</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, QueryFixtureCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>ComputeTotalPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaab37fd533a1ec17e12c6798e42a21b3</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ComputePerimeterRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7daf9650f36f8d172678d1398034a516</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0e796616b3e92f4b7b34ffdc73e4942</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetMaxImbalance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2389e08997d0d0e0ba03697eec17936</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateStructure</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ababba0a1b926e9aa793afe44044f204b</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateMetrics</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22c9cd17bd9080414ab77b1d3e433dca</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicTree.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>DynamicTree_8hpp.html</filename>
    <includes id="AABB_8hpp" name="AABB.hpp" local="no" imported="no">PlayRho/Collision/AABB.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="class">playrho::d2::DynamicTree</class>
    <class kind="struct">playrho::d2::DynamicTree::UnusedData</class>
    <class kind="struct">playrho::d2::DynamicTree::BranchData</class>
    <class kind="struct">playrho::d2::DynamicTree::LeafData</class>
    <class kind="union">playrho::d2::DynamicTree::VariantData</class>
    <class kind="class">playrho::d2::DynamicTree::TreeNode</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::function&lt; DynamicTreeOpcode(DynamicTree::Size)&gt;</type>
      <name>DynamicTreeSizeCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50dec3f5f2b2d5add65db48633593967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(Fixture *fixture, ChildCounter child)&gt;</type>
      <name>QueryFixtureCallback</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a460d74691acde93bae75b80d51cbde68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DynamicTreeOpcode</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c475376564975c7ff4c357e88bdf16</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a04c475376564975c7ff4c357e88bdf16a87557f11575c0ad78e4e28abedc13b6e">End</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a04c475376564975c7ff4c357e88bdf16aa0bfb8e59e6c13fc8d990781f77694fe">Continue</enumvalue>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab63957a6534ce7385503337c9a9119c6</anchor>
      <arglist>(const DynamicTree::LeafData &amp;lhs, const DynamicTree::LeafData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22c2b474f92927440fb4845ca9a77e75</anchor>
      <arglist>(const DynamicTree::LeafData &amp;lhs, const DynamicTree::LeafData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsUnused</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeb5fd948fe808b19f94cd6c80089db9d</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsLeaf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acdc646a20341e7dd6d2b2f08911c1dbd</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsBranch</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5bc0102a3df9a20fe75e220cca59fe12</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DynamicTree::BranchData</type>
      <name>ReplaceChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70c30461d2a4011f3a4c6f5168df2751</anchor>
      <arglist>(DynamicTree::BranchData bd, DynamicTree::Size oldChild, DynamicTree::Size newChild)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6d6d5df41347623cf1a1a969986ce093</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DynamicTree::Size</type>
      <name>GetNext</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a46ae39294a9b35c7c9a3f3f44fccb451</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72265a3c2d4511e74df6ab4d13112f6d</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adebb4dfdc038631f8b24ee19a0b29713</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a905424c61ac9933179b91eb12ac0d537</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size leafIdA, DynamicTree::Size leafIdB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>ComputeTotalPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaab37fd533a1ec17e12c6798e42a21b3</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ComputePerimeterRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7daf9650f36f8d172678d1398034a516</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0e796616b3e92f4b7b34ffdc73e4942</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9130244ba8964592f654cf473e4979ed</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateStructure</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ababba0a1b926e9aa793afe44044f204b</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateMetrics</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22c9cd17bd9080414ab77b1d3e433dca</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetMaxImbalance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2389e08997d0d0e0ba03697eec17936</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a52ca8acb99e3c3591d13ca912282470e</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, const DynamicTreeSizeCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a387361206b47016fdadec182c37852a1</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, QueryFixtureCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f207924edd9511c1d56c03933928fa8</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IndexPair.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>IndexPair_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="struct">playrho::detail::LengthIndices</class>
    <class kind="struct">playrho::detail::SeparationInfo</class>
    <class kind="struct">playrho::LengthIndexPair</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::pair&lt; VertexCounter, VertexCounter &gt;</type>
      <name>IndexPair</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7d449e0a1528c10ae0f241713fb69b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; IndexPair, MaxSimplexEdges &gt;</type>
      <name>IndexPair3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a704da3b24d9b1f9135e140dcd5420518</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; VertexCounter, N &gt;</type>
      <name>VertexCounterArray</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0a8c8047429035c030e233c9503cbec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexCounterArray&lt; 2 &gt;</type>
      <name>VertexCounter2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae2ea03f9c65d074dfd1aa21b6352f293</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::LengthIndices&lt; 2 &gt;</type>
      <name>LengthIndices</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9c0b82fe1a1d0add572e3829a4c9f61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::SeparationInfo&lt; 2 &gt;</type>
      <name>SeparationInfo</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af40ce5c2de24f7a8612c7d00a487724e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::size_t</type>
      <name>GetNumValidIndices</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adaa1d36f29e78ecf1d24460013b56560</anchor>
      <arglist>(IndexPair3 pairs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab933259b6cadcc9f98417d3ec9dbc99e</anchor>
      <arglist>(IndexPair3 pairs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>size</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a357d9cd48bb5d4b1aef8c87f599dd45f</anchor>
      <arglist>(IndexPair3 pairs) -&gt; decltype(GetNumValidIndices(pairs))</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>max_size</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9e122c83e49e5d6649067d944ed176b3</anchor>
      <arglist>(IndexPair3 pairs) -&gt; decltype(pairs.max_size())</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetFirstShapeVertexIdx</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a24de24fa4d8c10dea7826ce11c81ff36</anchor>
      <arglist>(const detail::SeparationInfo&lt; N &gt; &amp;info) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSecondShapeVertexIdx</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a435b2e5c84e285bf7f0ac9486c2512d3</anchor>
      <arglist>(const detail::SeparationInfo&lt; N &gt; &amp;info) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidIndexPair</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abe17ec27918a584c8831da8cfdd6eb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidIndexPair3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a955adb3a886fdcb44924532c63fb8c48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Manifold.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>Manifold_8cpp.html</filename>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">PlayRho/Collision/Manifold.hpp</includes>
    <includes id="Simplex_8hpp" name="Simplex.hpp" local="no" imported="no">PlayRho/Collision/Simplex.hpp</includes>
    <includes id="Distance_8hpp" name="Distance.hpp" local="no" imported="no">PlayRho/Collision/Distance.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="Collision_8hpp" name="Collision.hpp" local="no" imported="no">PlayRho/Collision/Collision.hpp</includes>
    <includes id="ShapeSeparation_8hpp" name="ShapeSeparation.hpp" local="no" imported="no">PlayRho/Collision/ShapeSeparation.hpp</includes>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PLAYRHO_MAGIC</name>
      <anchorfile>Manifold_8cpp.html</anchorfile>
      <anchor>adb678fb8836c3b571175dd4ef5323fe3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a01cc67c9aa01c505ed34fe9cdf0f6242</anchor>
      <arglist>(bool flipped, const DistanceProxy &amp;shape0, const Transformation &amp;xf0, const VertexCounter idx0, const DistanceProxy &amp;shape1, const Transformation &amp;xf1, const VertexCounter2 indices1, const Manifold::Conf conf)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abea23b69385cc004b20710a775130a98</anchor>
      <arglist>(bool flipped, Length totalRadius, const DistanceProxy &amp;shape, const Transformation &amp;sxf, Length2 point, const Transformation &amp;xfm)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4f5f297912760f73d6135f46ba2c355</anchor>
      <arglist>(Length2 locationA, const Transformation &amp;xfA, Length2 locationB, const Transformation &amp;xfB, Length totalRadius) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>CollideShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a05380ac6609b4f7b27e4c1ae9e9e7535</anchor>
      <arglist>(const DistanceProxy &amp;shapeA, const Transformation &amp;xfA, const DistanceProxy &amp;shapeB, const Transformation &amp;xfB, Manifold::Conf conf=GetDefaultManifoldConf())</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe0be704277b108db26e28108c610174</anchor>
      <arglist>(Manifold::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a30d3152820c6a35af37c2139d316d1da</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72a1cdedaec111016d79f96aa4970cef</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18bbc8e12d21c4ae260d0bb333e0eed5</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7261adb2e0ccb0b3db58fc194d50614</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Manifold.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>Manifold_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="ContactFeature_8hpp" name="ContactFeature.hpp" local="no" imported="no">PlayRho/Collision/ContactFeature.hpp</includes>
    <includes id="IndexPair_8hpp" name="IndexPair.hpp" local="no" imported="no">PlayRho/Collision/IndexPair.hpp</includes>
    <class kind="class">playrho::d2::Manifold</class>
    <class kind="struct">playrho::d2::Manifold::Point</class>
    <class kind="struct">playrho::d2::Manifold::Conf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Manifold::Conf</type>
      <name>GetDefaultManifoldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f8ea55e1366f819b3683f0896bcce37</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a30d3152820c6a35af37c2139d316d1da</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72a1cdedaec111016d79f96aa4970cef</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18bbc8e12d21c4ae260d0bb333e0eed5</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7261adb2e0ccb0b3db58fc194d50614</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a01cc67c9aa01c505ed34fe9cdf0f6242</anchor>
      <arglist>(bool flipped, const DistanceProxy &amp;shape0, const Transformation &amp;xf0, const VertexCounter idx0, const DistanceProxy &amp;shape1, const Transformation &amp;xf1, const VertexCounter2 indices1, const Manifold::Conf conf)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abea23b69385cc004b20710a775130a98</anchor>
      <arglist>(bool flipped, Length totalRadius, const DistanceProxy &amp;shape, const Transformation &amp;sxf, Length2 point, const Transformation &amp;xfm)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4f5f297912760f73d6135f46ba2c355</anchor>
      <arglist>(Length2 locationA, const Transformation &amp;xfA, Length2 locationB, const Transformation &amp;xfB, Length totalRadius) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>CollideShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a05380ac6609b4f7b27e4c1ae9e9e7535</anchor>
      <arglist>(const DistanceProxy &amp;shapeA, const Transformation &amp;xfA, const DistanceProxy &amp;shapeB, const Transformation &amp;xfB, Manifold::Conf conf=GetDefaultManifoldConf())</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe0be704277b108db26e28108c610174</anchor>
      <arglist>(Manifold::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad596c747e4643415e312ad69bef2a03b</anchor>
      <arglist>(const d2::Manifold &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MassData.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>MassData_8cpp.html</filename>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">PlayRho/Collision/MassData.hpp</includes>
    <includes id="Shape_8hpp" name="Shape.hpp" local="no" imported="no">PlayRho/Collision/Shapes/Shape.hpp</includes>
    <includes id="EdgeShapeConf_8hpp" name="EdgeShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/EdgeShapeConf.hpp</includes>
    <includes id="PolygonShapeConf_8hpp" name="PolygonShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/PolygonShapeConf.hpp</includes>
    <includes id="ChainShapeConf_8hpp" name="ChainShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/ChainShapeConf.hpp</includes>
    <includes id="DiskShapeConf_8hpp" name="DiskShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/DiskShapeConf.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9b3b93dcaddc83a77e35b87b54960d5e</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, Length2 location)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4dab8e154250f9c2698059b6d28f75eb</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, Length2 v0, Length2 v1)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7304da106cfaa394b4d0179ded468aa6</anchor>
      <arglist>(Length vertexRadius, NonNegative&lt; AreaDensity &gt; density, Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adfdaf5afb737a4eb88daa57a82819c0c</anchor>
      <arglist>(const Fixture &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e9574d95e6dfa6f32a405cf40ebbf79</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcf7fe1ea0d3ef041d4f7847ef5871e4</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MassData.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>MassData_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <class kind="struct">playrho::detail::MassData</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>detail::MassData&lt; 2 &gt;</type>
      <name>MassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a412a6773b79a31e621b01c04c3d2645e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae5836a818477a066a253a0fa6fd8f2c6</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0e76b1db2bbc00a66397e207279070f3</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9b3b93dcaddc83a77e35b87b54960d5e</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, Length2 location)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4dab8e154250f9c2698059b6d28f75eb</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, Length2 v0, Length2 v1)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7304da106cfaa394b4d0179ded468aa6</anchor>
      <arglist>(Length vertexRadius, NonNegative&lt; AreaDensity &gt; density, Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adfdaf5afb737a4eb88daa57a82819c0c</anchor>
      <arglist>(const Fixture &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e9574d95e6dfa6f32a405cf40ebbf79</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcf7fe1ea0d3ef041d4f7847ef5871e4</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RayCastInput.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>RayCastInput_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <class kind="struct">playrho::detail::RayCastInput</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>playrho::detail::RayCastInput&lt; 2 &gt;</type>
      <name>RayCastInput</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf053dc4cae3fabb24f6e3c8b8697ffb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RayCastOutput.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>RayCastOutput_8cpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="GrowableStack_8hpp" name="GrowableStack.hpp" local="no" imported="no">PlayRho/Common/GrowableStack.hpp</includes>
    <includes id="RayCastOutput_8hpp" name="RayCastOutput.hpp" local="no" imported="no">PlayRho/Collision/RayCastOutput.hpp</includes>
    <includes id="RayCastInput_8hpp" name="RayCastInput.hpp" local="no" imported="no">PlayRho/Collision/RayCastInput.hpp</includes>
    <includes id="AABB_8hpp" name="AABB.hpp" local="no" imported="no">PlayRho/Collision/AABB.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="DynamicTree_8hpp" name="DynamicTree.hpp" local="no" imported="no">PlayRho/Collision/DynamicTree.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gad7a1b955a57a2bb043750bf32cde2549</anchor>
      <arglist>(Length radius, Length2 location, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga4ad7d3ebcceb46993d721c836ba13ae2</anchor>
      <arglist>(const detail::AABB&lt; 2 &gt; &amp;aabb, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gadf0ec62e1852e3bc9b017eae4a5616b4</anchor>
      <arglist>(const DynamicTree &amp;tree, RayCastInput input, const DynamicTreeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga9616b36d2baba2023d1a5fcf10a5126a</anchor>
      <arglist>(const DynamicTree &amp;tree, const RayCastInput &amp;input, FixtureRayCastCB callback)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RayCastOutput.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>RayCastOutput_8hpp.html</filename>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="OptionalValue_8hpp" name="OptionalValue.hpp" local="no" imported="no">PlayRho/Common/OptionalValue.hpp</includes>
    <includes id="RayCastInput_8hpp" name="RayCastInput.hpp" local="no" imported="no">PlayRho/Collision/RayCastInput.hpp</includes>
    <class kind="struct">playrho::detail::AABB</class>
    <class kind="struct">playrho::d2::RayCastHit</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>Optional&lt; RayCastHit &gt;</type>
      <name>RayCastOutput</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e8717982c2c73b571dfe16d45a38ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Real(Fixture *fixture, ChildCounter child, const RayCastInput &amp;input)&gt;</type>
      <name>DynamicTreeRayCastCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d0ca374db33a2f69d7d6203738a628f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; RayCastOpcode(Fixture *fixture, ChildCounter child, Length2 point, UnitVec normal)&gt;</type>
      <name>FixtureRayCastCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af1eddb1954fc3176fbed9279d90ac4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RayCastOpcode</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66189f1fe36ac717e284ab1099171106</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a056fa3d840f48b7bfbbd68c19a4797b3">Terminate</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106aaf8767ee039cdc51717435bb815da593">IgnoreFixture</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a8dcfe18b6245b17c9cd69d5af7ef1847">ClipRay</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a4592f28dc9d11de3ce507bebafd9de16">ResetRay</enumvalue>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gad7a1b955a57a2bb043750bf32cde2549</anchor>
      <arglist>(Length radius, Length2 location, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga4ad7d3ebcceb46993d721c836ba13ae2</anchor>
      <arglist>(const detail::AABB&lt; 2 &gt; &amp;aabb, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gadf0ec62e1852e3bc9b017eae4a5616b4</anchor>
      <arglist>(const DynamicTree &amp;tree, RayCastInput input, const DynamicTreeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga9616b36d2baba2023d1a5fcf10a5126a</anchor>
      <arglist>(const DynamicTree &amp;tree, const RayCastInput &amp;input, FixtureRayCastCB callback)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SeparationScenario.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>SeparationScenario_8cpp.html</filename>
    <includes id="SeparationScenario_8hpp" name="SeparationScenario.hpp" local="no" imported="no">PlayRho/Collision/SeparationScenario.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>SeparationScenario</type>
      <name>GetSeparationScenario</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ae59f7bcf03f75dd6aa405683e455b9</anchor>
      <arglist>(IndexPair3 indices, const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>LengthIndexPair</type>
      <name>FindMinSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aecc08eba57f4b6facb11ebf84d1403b4</anchor>
      <arglist>(const SeparationScenario &amp;scenario, const Transformation &amp;xfA, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>Evaluate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf52c893075c61a92f299f872b0d3c9e</anchor>
      <arglist>(const SeparationScenario &amp;scenario, const Transformation &amp;xfA, const Transformation &amp;xfB, IndexPair indexPair)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SeparationScenario.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>SeparationScenario_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="IndexPair_8hpp" name="IndexPair.hpp" local="no" imported="no">PlayRho/Collision/IndexPair.hpp</includes>
    <class kind="struct">playrho::d2::SeparationScenario</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>SeparationScenario</type>
      <name>GetSeparationScenario</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ae59f7bcf03f75dd6aa405683e455b9</anchor>
      <arglist>(IndexPair3 indices, const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>LengthIndexPair</type>
      <name>FindMinSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aecc08eba57f4b6facb11ebf84d1403b4</anchor>
      <arglist>(const SeparationScenario &amp;scenario, const Transformation &amp;xfA, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>Evaluate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf52c893075c61a92f299f872b0d3c9e</anchor>
      <arglist>(const SeparationScenario &amp;scenario, const Transformation &amp;xfA, const Transformation &amp;xfB, IndexPair indexPair)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChainShapeConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>ChainShapeConf_8cpp.html</filename>
    <includes id="ChainShapeConf_8hpp" name="ChainShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/ChainShapeConf.hpp</includes>
    <includes id="AABB_8hpp" name="AABB.hpp" local="no" imported="no">PlayRho/Collision/AABB.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3eb20e81c294774bd8f9fd0ccc136943</anchor>
      <arglist>(Length2 dimensions)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab25320e8b45be5e1730e39c9fc26a103</anchor>
      <arglist>(const AABB &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChainShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>ChainShapeConf_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="ShapeConf_8hpp" name="ShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/ShapeConf.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">PlayRho/Collision/MassData.hpp</includes>
    <includes id="AABB_8hpp" name="AABB.hpp" local="no" imported="no">PlayRho/Collision/AABB.hpp</includes>
    <class kind="class">playrho::d2::ChainShapeConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afeeb64f8bbd439af0e350288e16da2e7</anchor>
      <arglist>(const ChainShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8cdbec96d1a3f30b8c5705b602aeb8df</anchor>
      <arglist>(const ChainShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abbe831388c11e3234692938bb354fe9f</anchor>
      <arglist>(const ChainShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLooped</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a435d2dc5439f69826450d3bac84b35c5</anchor>
      <arglist>(const ChainShapeConf &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetNextIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7d699f052c62efd80ce28f0190d70af</anchor>
      <arglist>(const ChainShapeConf &amp;shape, ChildCounter index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac418033043025956949e012aaf112b86</anchor>
      <arglist>(const ChainShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeeb7245d0354a4222600d611f3ddb16d</anchor>
      <arglist>(const ChainShapeConf &amp;arg, ChildCounter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad440be3d207e29e72aaa75b72054c610</anchor>
      <arglist>(ChainShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3eb20e81c294774bd8f9fd0ccc136943</anchor>
      <arglist>(Length2 dimensions)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade70545e6c2bf848f87657114a111d11</anchor>
      <arglist>(Length dimension)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab25320e8b45be5e1730e39c9fc26a103</anchor>
      <arglist>(const AABB &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiskShapeConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>DiskShapeConf_8cpp.html</filename>
    <includes id="DiskShapeConf_8hpp" name="DiskShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/DiskShapeConf.hpp</includes>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>DiskShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>DiskShapeConf_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="ShapeConf_8hpp" name="ShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/ShapeConf.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">PlayRho/Collision/MassData.hpp</includes>
    <class kind="struct">playrho::d2::DiskShapeConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a85d3074f854445b9ec458b0d6ba6aa80</anchor>
      <arglist>(const DiskShapeConf &amp;lhs, const DiskShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae54dffb8788232936ee10689ab0296cd</anchor>
      <arglist>(const DiskShapeConf &amp;lhs, const DiskShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f8a364d3d371905369c9053117c7680</anchor>
      <arglist>(const DiskShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2edb0ada2177d0b9f078f49069f4810</anchor>
      <arglist>(const DiskShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a271f378396e3bf82dd4d75503bb2644d</anchor>
      <arglist>(const DiskShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69ae06167b3a8f92cb4b23c559785dd2</anchor>
      <arglist>(const DiskShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93562fbd5d63e2fbcf34b87065834c6a</anchor>
      <arglist>(const DiskShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab84a4599861cbdaa32fcf6b7fed6f156</anchor>
      <arglist>(DiskShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeShapeConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>EdgeShapeConf_8cpp.html</filename>
    <includes id="EdgeShapeConf_8hpp" name="EdgeShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/EdgeShapeConf.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>EdgeShapeConf_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="ShapeConf_8hpp" name="ShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/ShapeConf.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">PlayRho/Collision/MassData.hpp</includes>
    <class kind="class">playrho::d2::EdgeShapeConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af86100a70f9250d51c3c76a103edb8e4</anchor>
      <arglist>(const EdgeShapeConf &amp;lhs, const EdgeShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6db183fd84981136da63e62d3a767d9c</anchor>
      <arglist>(const EdgeShapeConf &amp;lhs, const EdgeShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae17b7ca2cd405050d057105e6fd1f78a</anchor>
      <arglist>(const EdgeShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a65056ce7e0d413a4beeb818ad0ab9f4b</anchor>
      <arglist>(const EdgeShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a179e4a68b183074106cc54a88b46a68f</anchor>
      <arglist>(const EdgeShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c3bbe42dd7c5fd9e5c758ed67ddab2</anchor>
      <arglist>(const EdgeShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a075e981c13e3f9a9eb9648a701263e62</anchor>
      <arglist>(const EdgeShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a45cb9635e70a5139b52d7def2ec4eeed</anchor>
      <arglist>(EdgeShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiShapeConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>MultiShapeConf_8cpp.html</filename>
    <includes id="MultiShapeConf_8hpp" name="MultiShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/MultiShapeConf.hpp</includes>
    <includes id="VertexSet_8hpp" name="VertexSet.hpp" local="no" imported="no">PlayRho/Common/VertexSet.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8de782378ec5fefb3f1087a76a7721eb</anchor>
      <arglist>(const MultiShapeConf &amp;arg) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>MultiShapeConf_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="ShapeConf_8hpp" name="ShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/ShapeConf.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">PlayRho/Collision/MassData.hpp</includes>
    <class kind="class">playrho::d2::ConvexHull</class>
    <class kind="struct">playrho::d2::MultiShapeConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada69d48759a92fa8273e98b7e0bb69c5</anchor>
      <arglist>(const MultiShapeConf &amp;lhs, const MultiShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abad1906bf9f008e1519d6e2ce95c792b</anchor>
      <arglist>(const MultiShapeConf &amp;lhs, const MultiShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6da28327ee2857e706b89789d56a3598</anchor>
      <arglist>(const MultiShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20acfdc5ce307d90cfef42908be8720b</anchor>
      <arglist>(const MultiShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8de782378ec5fefb3f1087a76a7721eb</anchor>
      <arglist>(const MultiShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a520079de7cf100a20a169fc57b77b5c0</anchor>
      <arglist>(const MultiShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74a1971e9d0c04da5f9cb9645a872b07</anchor>
      <arglist>(MultiShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolygonShapeConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>PolygonShapeConf_8cpp.html</filename>
    <includes id="PolygonShapeConf_8hpp" name="PolygonShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/PolygonShapeConf.hpp</includes>
    <includes id="VertexSet_8hpp" name="VertexSet.hpp" local="no" imported="no">PlayRho/Common/VertexSet.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Length2</type>
      <name>GetEdge</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a066828295fc1238756f5adf1f3502343</anchor>
      <arglist>(const PolygonShapeConf &amp;shape, VertexCounter index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Validate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>addc5596ccd04947074f583cc62146991</anchor>
      <arglist>(const Span&lt; const Length2 &gt; verts)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolygonShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>PolygonShapeConf_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="ShapeConf_8hpp" name="ShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/ShapeConf.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">PlayRho/Collision/MassData.hpp</includes>
    <includes id="VertexSet_8hpp" name="VertexSet.hpp" local="no" imported="no">PlayRho/Common/VertexSet.hpp</includes>
    <class kind="class">playrho::d2::PolygonShapeConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac3029e0bbd22a713fa59524059dc6927</anchor>
      <arglist>(const PolygonShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8724a7f055248bd5f3ba5103fdcc6901</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d3ad2448351d19b6acd69d6c46b05ae</anchor>
      <arglist>(const PolygonShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9bfa558aa89b2c7c747545ac4d5fb44</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5971604948898d23c918c7430bf9da3e</anchor>
      <arglist>(const PolygonShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetEdge</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a066828295fc1238756f5adf1f3502343</anchor>
      <arglist>(const PolygonShapeConf &amp;shape, VertexCounter index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8bc20d0b7d315340914bfde7f538bdcc</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Validate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>addc5596ccd04947074f583cc62146991</anchor>
      <arglist>(const Span&lt; const Length2 &gt; verts)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Shape.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>Shape_8cpp.html</filename>
    <includes id="Shape_8hpp" name="Shape.hpp" local="no" imported="no">PlayRho/Collision/Shapes/Shape.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gafcfbf811dc989043838f0a4c7c64b59b</anchor>
      <arglist>(const Shape &amp;shape, Length2 point) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Shape.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>Shape_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">PlayRho/Collision/MassData.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <class kind="class">playrho::d2::Shape</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::function&lt; void(const std::type_info &amp;ti, const void *data)&gt;</type>
      <name>TypeInfoVisitor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94f51c74b2c4c62a80ecb70414ac71f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a84eab47d880f50ed7b191c2bce198d00</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3e0b1a42f4c103d313a46942536b2ba</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8fb5dbe67d6d7ab8ee34e98e114d1df5</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9280854f98c5d8557ca57847171de630</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73fdd9b13d08d04db4ad170afac115b7</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e3ed738b9082f9bfd3358a19d9aa97d</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b940ecf05bfbf8ae3910cacbc7e2264</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae30c4c3496122b9bc6087d44d1db9ec5</anchor>
      <arglist>(Shape &amp;shape, const Mat22 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Visit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4d85fab1bbce63d5fc4832a9c89aed5a</anchor>
      <arglist>(const Shape &amp;shape, void *userData)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d716987feab31bac7d07bb19cb89599</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>GetUseTypeInfo</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e33be916868982aea9162c3b9b50523</anchor>
      <arglist>(const Shape &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a493e74d1d0e4f235df61dbf9f7d7849d</anchor>
      <arglist>(const Shape &amp;shape, const TypeInfoVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a511146553469b7cac8c01113002718e6</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a531eec1b236203c64a6618a44c94eb59</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gafcfbf811dc989043838f0a4c7c64b59b</anchor>
      <arglist>(const Shape &amp;shape, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Visit&lt; d2::Shape &gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5088fa473b382571a89d042e8a310bee</anchor>
      <arglist>(const d2::Shape &amp;shape, void *userData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/Shapes/</path>
    <filename>ShapeConf_8hpp.html</filename>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">PlayRho/Common/Units.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="struct">playrho::d2::BaseShapeConf</class>
    <class kind="struct">playrho::d2::ShapeBuilder</class>
    <class kind="struct">playrho::d2::ShapeConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1964839d80d44970853856fca0060c33</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Finite&lt; Real &gt;</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4f578ed3fad33fd6d2f740a79f5ccb9</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR NonNegative&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8e2d2b3123156246d44cc9e8db5c9411</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShapeSeparation.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>ShapeSeparation_8cpp.html</filename>
    <includes id="ShapeSeparation_8hpp" name="ShapeSeparation.hpp" local="no" imported="no">PlayRho/Collision/ShapeSeparation.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation4x4</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaceaa2cf5095365ef74c07ccdb0c78ae</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60080a2f269e3c48461f3a9ec0883a3b</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3486ba5050c32c4a72fbaf0bcf6a17de</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2, Length stop)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a34f0c915ede8384f426009fe246d2db4</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const DistanceProxy &amp;proxy2, Length stop=MaxFloat *Meter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShapeSeparation.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>ShapeSeparation_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="IndexPair_8hpp" name="IndexPair.hpp" local="no" imported="no">PlayRho/Collision/IndexPair.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60080a2f269e3c48461f3a9ec0883a3b</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3486ba5050c32c4a72fbaf0bcf6a17de</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2, Length stop)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation4x4</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaceaa2cf5095365ef74c07ccdb0c78ae</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a34f0c915ede8384f426009fe246d2db4</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const DistanceProxy &amp;proxy2, Length stop=MaxFloat *Meter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Simplex.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>Simplex_8cpp.html</filename>
    <includes id="Simplex_8hpp" name="Simplex.hpp" local="no" imported="no">PlayRho/Collision/Simplex.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>IndexPair3</type>
      <name>GetIndexPairs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70613779e152f647af4f80dce352d83c</anchor>
      <arglist>(const SimplexEdges &amp;collection) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>CalcSearchDirection</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8eafa8c052954d863e81d00251d51194</anchor>
      <arglist>(const SimplexEdges &amp;simplexEdges) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Simplex.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>Simplex_8hpp.html</filename>
    <includes id="ArrayList_8hpp" name="ArrayList.hpp" local="no" imported="no">PlayRho/Common/ArrayList.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">PlayRho/Common/Vector.hpp</includes>
    <includes id="SimplexEdge_8hpp" name="SimplexEdge.hpp" local="no" imported="no">PlayRho/Collision/SimplexEdge.hpp</includes>
    <class kind="class">playrho::d2::Simplex</class>
    <class kind="struct">playrho::d2::Simplex::Cache</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>ArrayList&lt; SimplexEdge, MaxSimplexEdges, std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type &gt;</type>
      <name>SimplexEdges</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a364eb782cd9cf5659e0a8bfcd63faa63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexPair3</type>
      <name>GetIndexPairs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70613779e152f647af4f80dce352d83c</anchor>
      <arglist>(const SimplexEdges &amp;collection) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>CalcSearchDirection</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8eafa8c052954d863e81d00251d51194</anchor>
      <arglist>(const SimplexEdges &amp;simplexEdges) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetScaledDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9695b1513472b0c245d4f98b97090efd</anchor>
      <arglist>(const Simplex &amp;simplex, Simplex::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>GetClosestPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09c16d449aa487690b1297e368b68063</anchor>
      <arglist>(const Simplex &amp;simplex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimplexEdge.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>SimplexEdge_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="IndexPair_8hpp" name="IndexPair.hpp" local="no" imported="no">PlayRho/Collision/IndexPair.hpp</includes>
    <class kind="class">playrho::d2::SimplexEdge</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>GetPointDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04cd12978acc8f96dd60b6139ab7cc36</anchor>
      <arglist>(const SimplexEdge &amp;sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaa6c8aa8b0eebcb08f9b6205686b4229</anchor>
      <arglist>(const SimplexEdge &amp;lhs, const SimplexEdge &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a80618c35cf8fe887f8bbaba841da4c93</anchor>
      <arglist>(const SimplexEdge &amp;lhs, const SimplexEdge &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeOfImpact.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>TimeOfImpact_8cpp.html</filename>
    <includes id="TimeOfImpact_8hpp" name="TimeOfImpact.hpp" local="no" imported="no">PlayRho/Collision/TimeOfImpact.hpp</includes>
    <includes id="Distance_8hpp" name="Distance.hpp" local="no" imported="no">PlayRho/Collision/Distance.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="SeparationScenario_8hpp" name="SeparationScenario.hpp" local="no" imported="no">PlayRho/Collision/SeparationScenario.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acb29c9575dd4eeac1ff13136d9a56494</anchor>
      <arglist>(TOIOutput::State state) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ToiConf</type>
      <name>GetToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9864179cb9a35cb6665d429656ad0e9b</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOIOutput</type>
      <name>GetToiViaSat</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad3851d0c3b764c9fe4dbaad8268ea201</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Sweep &amp;sweepA, const DistanceProxy &amp;proxyB, const Sweep &amp;sweepB, ToiConf conf=GetDefaultToiConf())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeOfImpact.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>TimeOfImpact_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="Wider_8hpp" name="Wider.hpp" local="no" imported="no">PlayRho/Common/Wider.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <class kind="struct">playrho::ToiConf</class>
    <class kind="struct">playrho::TOIOutput</class>
    <class kind="struct">playrho::TOIOutput::Statistics</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetDefaultToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abb1706f5ee9f03fdec4a73d2c4d6ce6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ToiConf</type>
      <name>GetToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9864179cb9a35cb6665d429656ad0e9b</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acb29c9575dd4eeac1ff13136d9a56494</anchor>
      <arglist>(TOIOutput::State state) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOIOutput</type>
      <name>GetToiViaSat</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad3851d0c3b764c9fe4dbaad8268ea201</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Sweep &amp;sweepA, const DistanceProxy &amp;proxyB, const Sweep &amp;sweepB, ToiConf conf=GetDefaultToiConf())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldManifold.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>WorldManifold_8cpp.html</filename>
    <includes id="WorldManifold_8hpp" name="WorldManifold.hpp" local="no" imported="no">PlayRho/Collision/WorldManifold.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">PlayRho/Collision/Manifold.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54c453e054f0b9692dc3300e5861f42c</anchor>
      <arglist>(const Manifold &amp;manifold, Transformation xfA, Length radiusA, Transformation xfB, Length radiusB)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a160a129552c387fc8462398d95b5d39b</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldManifold.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Collision/</path>
    <filename>WorldManifold_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="class">playrho::d2::WorldManifold</class>
    <class kind="struct">playrho::d2::WorldManifold::PointData</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54c453e054f0b9692dc3300e5861f42c</anchor>
      <arglist>(const Manifold &amp;manifold, Transformation xfA, Length radiusA, Transformation xfB, Length radiusB)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a160a129552c387fc8462398d95b5d39b</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Acceleration.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Acceleration_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">PlayRho/Common/Vector2.hpp</includes>
    <class kind="struct">playrho::d2::Acceleration</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab580741d7e177657016617999174a607</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7cbfc9f4cf79c8462a0f0ec5d24ee469</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab39ce1afbec15c12a32b4ab3c5f95685</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa071c183885a1e8082e73eaa1ec522c8</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04fa1505a85f9ff5e51889c8c50d3172</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a951dfdd3b5b6bb8e4bfd734f7b79fd29</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef44fe8198db0e5fe1e1780a028b998f</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aabbaa5056b3fec727549265878b31eca</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd4693f700ab51ed9d9a6de06a805bf7</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae551c31cd14b89323453a7f04ffa53ab</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1228567dca4d7060046130510e068348</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae0ffb2e2d00a5bca13ac9acaf15682c8</anchor>
      <arglist>(const Real lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a16ff5a957beb5aec86d2c8a668fe5279</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a75eaa3e476bb7117d67e6df9fbfef61b</anchor>
      <arglist>(const d2::Acceleration &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AllocatedArray.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>AllocatedArray_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="class">playrho::AllocatedArray</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayList.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>ArrayList_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <class kind="class">playrho::ArrayList</class>
    <class kind="class">std::tuple_size&lt; playrho::ArrayList&lt; T, N, SIZE_TYPE &gt; &gt;</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>ArrayList&lt; T, S &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afe9da6ff11f4a2c1b7d0df8f513bc217</anchor>
      <arglist>(ArrayList&lt; T, S &gt; &amp;lhs, const typename ArrayList&lt; T, S &gt;::data_type &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ArrayList&lt; T, S &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2410eb16decdbb7ed8ce34c06327161b</anchor>
      <arglist>(ArrayList&lt; T, S &gt; lhs, const typename ArrayList&lt; T, S &gt;::data_type &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BlockAllocator.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>BlockAllocator_8cpp.html</filename>
    <includes id="BlockAllocator_8hpp" name="BlockAllocator.hpp" local="no" imported="no">PlayRho/Common/BlockAllocator.hpp</includes>
    <includes id="DynamicMemory_8hpp" name="DynamicMemory.hpp" local="no" imported="no">PlayRho/Common/DynamicMemory.hpp</includes>
    <class kind="struct">playrho::BlockAllocator::Chunk</class>
    <class kind="struct">playrho::BlockAllocator::Block</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>BlockAllocator.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>BlockAllocator_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="class">playrho::BlockAllocator</class>
    <class kind="struct">playrho::BlockDeallocator</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>void</type>
      <name>Delete</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a02f6b57cf0f7bc53f9339381007d9b84</anchor>
      <arglist>(const T *p, BlockAllocator &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab5692e54289c87c156bd7455763082a9</anchor>
      <arglist>(const BlockAllocator &amp;a, const BlockAllocator &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a425d26025dffe3901caa095b9fa19682</anchor>
      <arglist>(const BlockAllocator &amp;a, const BlockAllocator &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR std::size_t</type>
      <name>AllocatorBlockSizes</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2d9a2d6bbb6e2209e18702d0ac74b4f3</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundedValue.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>BoundedValue_8hpp.html</filename>
    <includes id="InvalidArgument_8hpp" name="InvalidArgument.hpp" local="no" imported="no">PlayRho/Common/InvalidArgument.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <class kind="struct">playrho::ValueCheckHelper</class>
    <class kind="struct">playrho::HasOne</class>
    <class kind="struct">playrho::HasOne&lt; T, detail::VoidT&lt; decltype(T{1}) &gt; &gt;</class>
    <class kind="struct">playrho::ValueCheckHelper&lt; T, std::enable_if_t&lt; HasOne&lt; T &gt;::value &gt; &gt;</class>
    <class kind="class">playrho::BoundedValue</class>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer&lt; T &gt;::value, BoundedValue&lt; T, LoValueCheck::ZeroOrMore, HiValueCheck::Any &gt; &gt;</type>
      <name>NonNegative</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>gae872dc540686eb8e626643117f8cb62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::Any, HiValueCheck::ZeroOrLess &gt;</type>
      <name>NonPositive</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga68b6bab2cd78b32dbd643d341f37b8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::AboveZero, HiValueCheck::Any &gt;</type>
      <name>Positive</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>gae492ff78381a7dc66d271d0ee3b1189d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::Any, HiValueCheck::BelowZero &gt;</type>
      <name>Negative</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga0a15a03f8bd917575a6ae1cc06dff112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::AboveNegInf, HiValueCheck::BelowPosInf &gt;</type>
      <name>Finite</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga9cf75a03c4b0afaaba95d65ec8ce54b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer&lt; T &gt;::value, BoundedValue&lt; T, LoValueCheck::NonZero, HiValueCheck::Any &gt; &gt;</type>
      <name>NonZero</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga6d3eb15a067eb31352543486e8f10f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer&lt; T &gt;::value, BoundedValue&lt; T, LoValueCheck::NonZero, HiValueCheck::Any &gt; &gt;</type>
      <name>NonNull</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>gab64c2bdfe3d8c1c0815013d817b4aa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::ZeroOrMore, HiValueCheck::OneOrLess &gt;</type>
      <name>UnitInterval</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga434227c634b0a1b975979d4dbc242346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LoValueCheck</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a57593cac21168ed673c77a11d18a35ec</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a57593cac21168ed673c77a11d18a35ecaed36a1ef76a59ee3f15180e0441188ad">Any</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a57593cac21168ed673c77a11d18a35eca08d0300b85ba14410a36f26242cdf296">AboveZero</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a57593cac21168ed673c77a11d18a35eca841be1f7bfc87798da5daeaf319a201c">ZeroOrMore</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a57593cac21168ed673c77a11d18a35ecaa7afdf5ead2f4915d42dd23e67cda977">AboveNegInf</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a57593cac21168ed673c77a11d18a35eca3d0365a27a39c0af183445fc4d932a8a">NonZero</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>HiValueCheck</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1f31f7e3449c760decd7f664e16b0390</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a1f31f7e3449c760decd7f664e16b0390aed36a1ef76a59ee3f15180e0441188ad">Any</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a1f31f7e3449c760decd7f664e16b0390aa0b070c9fcba92b81efd9133622cab5a">BelowZero</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a1f31f7e3449c760decd7f664e16b0390a690d9aa6dec6cccd97930a57f6b163c6">ZeroOrLess</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a1f31f7e3449c760decd7f664e16b0390a077d8b16f44fc9a68c5c3c7d3eedc1aa">OneOrLess</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a1f31f7e3449c760decd7f664e16b0390ad921987a0929f408ce3d9c1f5297f60e">BelowPosInf</enumvalue>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::numeric_limits&lt; T &gt;::has_infinity, void &gt;</type>
      <name>CheckIfAboveNegInf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a59f286859b30722528653b8b22db575e</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt;!std::numeric_limits&lt; T &gt;::has_infinity, void &gt;</type>
      <name>CheckIfAboveNegInf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abac2f26ff2e83bc367d654ce25f39545</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::numeric_limits&lt; T &gt;::has_infinity, void &gt;</type>
      <name>CheckIfBelowPosInf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac8bcfd8fa121db2e504c73c636acb4a6</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt;!std::numeric_limits&lt; T &gt;::has_infinity, void &gt;</type>
      <name>CheckIfBelowPosInf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa3801ac5010eb98e69e1e71bb330ba0f</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af7617d2de4e77e6b2ae6c4a23bf08ea6</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a19598ae45019edea9cd9566e3966e25c</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2fda4ed95b3e8aef674cc4f40ac9c256</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2ad5ec0fcfae4c6e9d9a1d59cab77432</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afaf5366fdd561f2d9ffe61167ae0f5a6</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a90f7cafaa85a495bde8282dc0b0dfc98</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a88516702484ce225186e4388cab8c007</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5faa7d6df2c73d412476a7c8d672c8a8</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a41c2f56046c1900b352bc349647bf441</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a521ae1143f57ad3f714134091f4b7a9d</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5052f98c2db895a8d4dabc53294527da</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6cc632c2d1a08a96e780aaa4adf2a0cf</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a16e6e8dde024e9eb1bfe98b1ec668744</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a914075b95e5d39a01c90919525ad5b73</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af48ed42bbd3e7e3c3648c1644cb79937</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afdda5158c5d97cf1ffec82b1b1126482</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4b99468da69970a941511d91342e118d</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const U rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a793c2dc0c6bfa88930594d2aba8fb4a4</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const U rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a33dd627f695adb3a66dc7c64b21de2f4</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const U rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adeb4a07f5177eca7d807775b49731306</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const U rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa787954e38e6fa624566e4da935d3ab6</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9130a5578df059499441c31cd4e47b69</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4d693411bafbcd96aea4f64034bbc40f</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afba8c9e06f41677c6870d31118741a4e</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac082e37a15d431ff58945c87094a2992</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a68c97bd4484daac3a451c3a3a1a63e84</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a457c28512e2318ba0380d132189078c5</anchor>
      <arglist>(const U lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa711ab829adfffa0eddc4426e4c93861</anchor>
      <arglist>(const U lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a132b4c12e412947f9abdf7cb7f344b0e</anchor>
      <arglist>(const U lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac22322127c812c51fbec45b54396c1d1</anchor>
      <arglist>(const U lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a64d8be6e505673dbdb72539076885ec7</anchor>
      <arglist>(::std::ostream &amp;os, const BoundedValue&lt; T, lo, hi &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CodeDumper.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>CodeDumper_8cpp.html</filename>
    <includes id="CodeDumper_8hpp" name="CodeDumper.hpp" local="no" imported="no">PlayRho/Common/CodeDumper.hpp</includes>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">PlayRho/Dynamics/World.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="PulleyJoint_8hpp" name="PulleyJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PulleyJoint.hpp</includes>
    <includes id="DistanceJoint_8hpp" name="DistanceJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/DistanceJoint.hpp</includes>
    <includes id="FrictionJoint_8hpp" name="FrictionJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/FrictionJoint.hpp</includes>
    <includes id="MotorJoint_8hpp" name="MotorJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/MotorJoint.hpp</includes>
    <includes id="WeldJoint_8hpp" name="WeldJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WeldJoint.hpp</includes>
    <includes id="TargetJoint_8hpp" name="TargetJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/TargetJoint.hpp</includes>
    <includes id="RevoluteJoint_8hpp" name="RevoluteJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RevoluteJoint.hpp</includes>
    <includes id="PrismaticJoint_8hpp" name="PrismaticJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PrismaticJoint.hpp</includes>
    <includes id="GearJoint_8hpp" name="GearJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/GearJoint.hpp</includes>
    <includes id="RopeJoint_8hpp" name="RopeJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RopeJoint.hpp</includes>
    <includes id="WheelJoint_8hpp" name="WheelJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WheelJoint.hpp</includes>
    <includes id="Shape_8hpp" name="Shape.hpp" local="no" imported="no">PlayRho/Collision/Shapes/Shape.hpp</includes>
    <includes id="DiskShapeConf_8hpp" name="DiskShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/DiskShapeConf.hpp</includes>
    <includes id="EdgeShapeConf_8hpp" name="EdgeShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/EdgeShapeConf.hpp</includes>
    <includes id="PolygonShapeConf_8hpp" name="PolygonShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/PolygonShapeConf.hpp</includes>
    <includes id="ChainShapeConf_8hpp" name="ChainShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/ChainShapeConf.hpp</includes>
    <includes id="MultiShapeConf_8hpp" name="MultiShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/MultiShapeConf.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3e54c1c3ec6046814745a707a6ab5c20</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adaf7c703a4ec7a32807da277c8b57a63</anchor>
      <arglist>(const Body &amp;body, std::size_t bodyIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2bb179bdc12683c99a6bfd7b095c328</anchor>
      <arglist>(const Joint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af26a4091d87146921b05bfdd000f09de</anchor>
      <arglist>(const Fixture &amp;fixture, std::size_t bodyIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20b11754781d03cb9a8a122b96c2eb54</anchor>
      <arglist>(const DistanceJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c33c55ebcbf54516ed4861c75d7c9a6</anchor>
      <arglist>(const FrictionJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a67352f3e83eb5c8978348961a9326b5e</anchor>
      <arglist>(const GearJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72b4f700f17d037094e2bef483375cec</anchor>
      <arglist>(const MotorJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4598eafe60ddf9a79d0cd616acae0b0a</anchor>
      <arglist>(const TargetJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0cf1d5ef527392e85f1253dfd65968a1</anchor>
      <arglist>(const PrismaticJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a251fc2dba7e1a090937369a4b3ecda6b</anchor>
      <arglist>(const PulleyJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70f4a8721a9e7f093cf33ac15ed6045a</anchor>
      <arglist>(const RevoluteJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af892db39d9d9f7a9acf209130864ce2e</anchor>
      <arglist>(const RopeJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a101a48f52d70950a7753814db63dde52</anchor>
      <arglist>(const WeldJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4579a9219fdf6e1adc2fcc35483db83e</anchor>
      <arglist>(const WheelJoint &amp;joint, std::size_t index)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CodeDumper.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>CodeDumper_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3e54c1c3ec6046814745a707a6ab5c20</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adaf7c703a4ec7a32807da277c8b57a63</anchor>
      <arglist>(const Body &amp;body, std::size_t bodyIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2bb179bdc12683c99a6bfd7b095c328</anchor>
      <arglist>(const Joint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af26a4091d87146921b05bfdd000f09de</anchor>
      <arglist>(const Fixture &amp;fixture, std::size_t bodyIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20b11754781d03cb9a8a122b96c2eb54</anchor>
      <arglist>(const DistanceJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c33c55ebcbf54516ed4861c75d7c9a6</anchor>
      <arglist>(const FrictionJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a67352f3e83eb5c8978348961a9326b5e</anchor>
      <arglist>(const GearJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72b4f700f17d037094e2bef483375cec</anchor>
      <arglist>(const MotorJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4598eafe60ddf9a79d0cd616acae0b0a</anchor>
      <arglist>(const TargetJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0cf1d5ef527392e85f1253dfd65968a1</anchor>
      <arglist>(const PrismaticJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a251fc2dba7e1a090937369a4b3ecda6b</anchor>
      <arglist>(const PulleyJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70f4a8721a9e7f093cf33ac15ed6045a</anchor>
      <arglist>(const RevoluteJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af892db39d9d9f7a9acf209130864ce2e</anchor>
      <arglist>(const RopeJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a101a48f52d70950a7753814db63dde52</anchor>
      <arglist>(const WeldJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4579a9219fdf6e1adc2fcc35483db83e</anchor>
      <arglist>(const WheelJoint &amp;joint, std::size_t index)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicMemory.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>DynamicMemory_8cpp.html</filename>
    <includes id="DynamicMemory_8hpp" name="DynamicMemory.hpp" local="no" imported="no">PlayRho/Common/DynamicMemory.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>void *</type>
      <name>Alloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a516a3bbb73371cdc53f348b67f43bb1f</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Realloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1e5b2682a491fff8510bbcfea1929e59</anchor>
      <arglist>(void *ptr, std::size_t new_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a62c138018c11ab3c255b410f2dedd7d2</anchor>
      <arglist>(void *mem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicMemory.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>DynamicMemory_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>void *</type>
      <name>Alloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a516a3bbb73371cdc53f348b67f43bb1f</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Realloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1e5b2682a491fff8510bbcfea1929e59</anchor>
      <arglist>(void *ptr, std::size_t new_size)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>Realloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3a103da67690df019db5811cec069c61</anchor>
      <arglist>(T *ptr, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a62c138018c11ab3c255b410f2dedd7d2</anchor>
      <arglist>(void *mem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fixed.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Fixed_8hpp.html</filename>
    <includes id="Wider_8hpp" name="Wider.hpp" local="no" imported="no">PlayRho/Common/Wider.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <class kind="class">playrho::Fixed</class>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>Fixed&lt; std::int32_t, 9 &gt;</type>
      <name>Fixed32</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a51e61fee8a0be399ed24773ebc3135f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a08e1246afa016452ab43ef1ae5906973</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4a4b4e933d0de3e22d7f9ed67d974313</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a17761c9feb89d061621d793a88fff411</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a84a631162f6aa6d3d6f13705d7267079</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac19575018f5f3101db273c2b33f1ab4f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9de9b93007ae1f89be08c9ee4d261c9a</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed&lt; BT, FB &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abf7155a910eaa0ec008e2bebaa4f0de3</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed&lt; BT, FB &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a896ed085d4832befdc4523c9a8a48f62</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed&lt; BT, FB &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8249194da52af6a68cfc7fc3dc6b45f5</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed&lt; BT, FB &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae64b946db27c3256a149851f379d539f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed&lt; BT, FB &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4c96799706ca991351ede533bd5e9aa9</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>AlmostZero</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af449f3dac7aed6e35a519ad0b9ebc540</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>AlmostEqual</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac18b19d457199ee49770d262dfdef98c</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; x, Fixed&lt; BT, FB &gt; y, int ulp=2)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a598d4f1182411b5db1d2c445b16fc5fd</anchor>
      <arglist>(::std::ostream &amp;os, const Fixed&lt; BT, FB &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54d5fa1d077fbec64800d99ce2775aae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed32</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6685eb90d858afe3e745f22a73749138</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed32</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afb30dbb75f77b1ec2c053970ad92f6c1</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed32</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af44208cebfbf016b0b8f51c4b21dd460</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed32</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aee7d1405232ab84b037748fa77252d0e</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed32</type>
      <name>operator%</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8a8b3398ca80d67cef0b95f38c173adf</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a334fab8c8d4da9f26fb91c5ac62d42da</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1cbbdc36c6a8f0611d0b71f1acd637b8</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4b8ccaf67f4d8fe3bd448030093d289c</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab30f3accd26968cebb92fb0722a66bd6</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2ee33c3f1ad5437131fc92673ab519d6</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d54c9e6d7a5cc86806af0f16d718286</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTypeName&lt; Fixed32 &gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2557f9e67a6520f3539c9ab282823c70</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FixedLimits.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>FixedLimits_8hpp.html</filename>
    <includes id="Fixed_8hpp" name="Fixed.hpp" local="no" imported="no">PlayRho/Common/Fixed.hpp</includes>
    <class kind="class">std::numeric_limits&lt; playrho::Fixed&lt; BT, FB &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>FixedMath.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>FixedMath_8hpp.html</filename>
    <includes id="Fixed_8hpp" name="Fixed.hpp" local="no" imported="no">PlayRho/Common/Fixed.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>abs</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gad5766364e4f6e29b62f20216a25a678f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>pow</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gae62c436656c3c2a2e0d46d83fe1ea3ae</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value, int n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>factorial</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9f8231d1d9f61cb1b262cd79c62951fb</anchor>
      <arglist>(std::int64_t n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>exp</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4237a1a9c35033e7f2d44fcba79b5c53</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>log</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a2133e6bdaa781faf55ab21c618328445</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>sin</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa3f589528f56370c3aff73cea9c043b8</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>cos</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a85d24ce8b375444d38c8c0b154c5fca3</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>atan</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a70e6d2d2422ff5e4331fa12d63591192</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ComputeSqrt</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a841f7c8e6ad559c469948f3e26e7835d</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>trunc</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga55adeaba7e08eb415e6437f709b62c0f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>nextafter</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga935fa93a69f58baf20b00e14461d51e7</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; from, Fixed&lt; BT, FB &gt; to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>fmod</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaae59d507ab3b0f722d4d22b3e4969f4a</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; dividend, Fixed&lt; BT, FB &gt; divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sqrt</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7a9d7e9855b45a3b4103632a47ccd6f4</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isnormal</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga4ab479ab854291e9d03a25cc0986deca</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>AngularNormalize</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a027dccab6934b3c157ef2dc01ef3ccc0</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; angleInRadians)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>sin</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga0daabd6eacf8702561639d394e3efe6e</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>cos</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaf6191f040980675d9a5c71bd53c79060</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>atan</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaa5670d26d229424278268189beb541f5</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>atan2</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaad3e4450a30d08eceda4225bd26c312b</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; y, Fixed&lt; BT, FB &gt; x)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>log</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga661c3590b9b618ac14194bf25a70f1d6</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>exp</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7ddb9c067c645bded41aafe75cfecd02</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>pow</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga85dfc7d7d071b22f80179a86e5544237</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; base, Fixed&lt; BT, FB &gt; exponent)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>hypot</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gafff5f9018a9088992be3c922926aee56</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; x, Fixed&lt; BT, FB &gt; y)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>round</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga1e3ca7fb2626886c5920bbc5f570a525</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signbit</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga8445167791eb53f1e8eb0dbf318293a1</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>isnan</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7c8088b287bc76ea58ccb572e3e14012</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isfinite</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gab8fa73692143466ca4d584aacf5749f1</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr const auto</type>
      <name>FixedPi</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af37290279495b86b0864f95948899b42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlagGuard.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>FlagGuard_8hpp.html</filename>
    <class kind="class">playrho::FlagGuard</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>GrowableStack.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>GrowableStack_8hpp.html</filename>
    <includes id="DynamicMemory_8hpp" name="DynamicMemory.hpp" local="no" imported="no">PlayRho/Common/DynamicMemory.hpp</includes>
    <class kind="class">playrho::GrowableStack</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>Interval.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Interval_8hpp.html</filename>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <class kind="class">playrho::Interval</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetSize</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a27cd843c0cfe341550f2f4e5f91bf894</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetCenter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abd40c765c799140cbe2b9e1ce4e82bb7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsIntersecting</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6337a4ffbf1fbfb13eece2bb55b93435</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Interval&lt; T &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae1f28075bffede36f3b4c48a477edfda</anchor>
      <arglist>(Interval&lt; T &gt; a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsEntirelyBefore</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2b4597a31b2b04189ef75e8d72dbeb51</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsEntirelyAfter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6a567a96ebb2a72b1046573bb4f13a4c</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsEntirelyEnclosing</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a29272f4a3694c4725faa56e6c4c1d2a2</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abebf2ea3be7831ecd4559b2bc0d739c1</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a56e28e7223ba1dc78278773b81130c19</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab24ce9e9d1f928ef3e60c6bede948966</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54f2a9ebae8216d14665a627b78c81a8</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4d1061544f64556d9c7d77ae547a60b8</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6f7ace6468a69a7f600ff05d01598ffd</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acd5053c1cb8807f6296852e4a8c657d2</anchor>
      <arglist>(::std::ostream &amp;os, const Interval&lt; T &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Intervals.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Intervals_8hpp.html</filename>
    <includes id="Interval_8hpp" name="Interval.hpp" local="no" imported="no">PlayRho/Common/Interval.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">PlayRho/Common/Units.hpp</includes>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgument.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>InvalidArgument_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <class kind="class">playrho::InvalidArgument</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>LengthError.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>LengthError_8hpp.html</filename>
    <class kind="class">playrho::LengthError</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>Math.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Math_8cpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Angle</type>
      <name>GetDelta</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8c036532db1260373b97c1d85360894c</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>ComputeCentroid</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae769785f0540a4b8960b282f6b105c14</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetCircleVertices</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3b8e8abc999b0c63cf1921b0edcf0b36</anchor>
      <arglist>(Length radius, unsigned slices, Angle start=0_deg, Real turns=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfCircle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0eb57dabfe8d3db9e509a6b493173358</anchor>
      <arglist>(Length radius)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfPolygon</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga118f8284073d2638e48ef8f13177e1d9</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>SecondMomentOfArea</type>
      <name>GetPolarMoment</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga760adfdd1cb30bdae8cd37c1ae5da485</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetContactRelVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ec0d91d72476f3b381c5a3aee92ec21</anchor>
      <arglist>(const Velocity velA, const Length2 relA, const Velocity velB, const Length2 relB) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Math.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Math_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">PlayRho/Common/Span.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">PlayRho/Common/UnitVec.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">PlayRho/Common/Vector2.hpp</includes>
    <includes id="Vector3_8hpp" name="Vector3.hpp" local="no" imported="no">PlayRho/Common/Vector3.hpp</includes>
    <includes id="Position_8hpp" name="Position.hpp" local="no" imported="no">PlayRho/Common/Position.hpp</includes>
    <includes id="Velocity_8hpp" name="Velocity.hpp" local="no" imported="no">PlayRho/Common/Velocity.hpp</includes>
    <includes id="Acceleration_8hpp" name="Acceleration.hpp" local="no" imported="no">PlayRho/Common/Acceleration.hpp</includes>
    <includes id="Transformation_8hpp" name="Transformation.hpp" local="no" imported="no">PlayRho/Common/Transformation.hpp</includes>
    <includes id="Sweep_8hpp" name="Sweep.hpp" local="no" imported="no">PlayRho/Common/Sweep.hpp</includes>
    <includes id="Matrix_8hpp" name="Matrix.hpp" local="no" imported="no">PlayRho/Common/Matrix.hpp</includes>
    <includes id="FixedMath_8hpp" name="FixedMath.hpp" local="no" imported="no">PlayRho/Common/FixedMath.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac40645d0127c8fd699610de821aebb57</anchor>
      <arglist>(T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac8e87b921726f7c140ea35db1913ac6c</anchor>
      <arglist>(T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>GetZ</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8be31a2325d99319d9cb505057ab44cb</anchor>
      <arglist>(T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a99a4aa54b7951fcfd31d080a6faa47c0</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5c1daa991d7fcea58ab2063a5fb94df8</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetZ</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a90e5ac1606ff0591033cfd2f7f99cce4</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_signed&lt; T &gt;::value, std::make_unsigned_t&lt; T &gt; &gt;</type>
      <name>MakeUnsigned</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab84205bd8956258eea02a5cb0d829042</anchor>
      <arglist>(const T &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>StripUnit</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a874b78de5f6a519116cca5fc0e3d0ce2</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR U</type>
      <name>Secant</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gafbb2415d17dfe0130be9799f945dbc5e</anchor>
      <arglist>(T target, U a1, T s1, U a2, T s2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>Bisect</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga53d729355fcef6f1d5d1e5e8a31f08cd</anchor>
      <arglist>(T a1, T a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsOdd</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga7d0999f6415f56dc56b97da946c23129</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Square</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga9163760181cfb59593537b444defe6cf</anchor>
      <arglist>(TYPE t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Atan2</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab870a9188fcc77c905807fa718a8268d</anchor>
      <arglist>(T y, T x)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Average</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8b2133f1c2e5299035bb059d2d2706cd</anchor>
      <arglist>(const T &amp;span)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; IsArithmetic&lt; T &gt;::value, T &gt;</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab8f24574b8a0ca458ec2fe9d691364ff</anchor>
      <arglist>(T value, unsigned precision=100000)</arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga812ea5eaf66fb9d1bffa799886b2eee3</anchor>
      <arglist>(Vec2 value, std::uint32_t precision=100000)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; T, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>d2::UnitVec</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac862a8609b82126d0683ecb38a498087</anchor>
      <arglist>(const d2::UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, bool &gt;</type>
      <name>AlmostZero</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga4e8eade67bf49fee09cd743895113ebb</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value, bool &gt;</type>
      <name>AlmostEqual</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga035c5294391f9652e8966092b5caca58</anchor>
      <arglist>(T x, T y, int ulp=2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaFmod</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga25b52facf9e28f05e5e41f4e7b7ff54e</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaTrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga84e7cb2a415fcb956202c8d7e1b1d200</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetNormalized</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga156a2abff11f978a8df25efbf0c10147</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga56785e4c60180ef416fe29f68ccf525a</anchor>
      <arglist>(const Vector2&lt; T &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetMagnitudeSquared</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac5292dcebbf79916913d2a8c3cc0f821</anchor>
      <arglist>(T value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMagnitude</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga85c114f129eeee63e60ec7d4703bbd65</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Dot</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga76a104de7c7a8d482209827d8b26dfa6</anchor>
      <arglist>(const T1 a, const T2 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Cross</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaf5853b82d4317a3c002b5aae800caf44</anchor>
      <arglist>(T1 a, T2 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Solve</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga48e5d966eb9e5d6b126f7fbe10d3b697</anchor>
      <arglist>(const Matrix22&lt; U &gt; mat, const Vector2&lt; T &gt; b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Invert</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaa93fcc5a3b89a2c26ebeb2ba69e31a6d</anchor>
      <arglist>(const Matrix22&lt; IN_TYPE &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec3</type>
      <name>Solve33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga5971f12d70f44aaa1659523dd79bad56</anchor>
      <arglist>(const Mat33 &amp;mat, const Vec3 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>Solve22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga307196931b0b067cacfb6b690547554c</anchor>
      <arglist>(const Mat33 &amp;mat, const T b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mat33</type>
      <name>GetInverse22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga929129f73956d318af97ba018147d673</anchor>
      <arglist>(const Mat33 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mat33</type>
      <name>GetSymInverse33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac05611bc6ee4ca8ba6b60074ca969568</anchor>
      <arglist>(const Mat33 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga7db75e579c251d11bbb7da89184bcbc5</anchor>
      <arglist>(const T vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga00b2d4eb2cee9e0e14f8e9eea46df5e5</anchor>
      <arglist>(const T vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaab12e9930e01cf5596b23e2e63d83f2a</anchor>
      <arglist>(const Vector&lt; T1, M &gt; v, const Matrix&lt; T2, M, N &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac24b2130cf7cb682b1f9d2ce2f701f29</anchor>
      <arglist>(const Vec2 v, const Mat33 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>InverseTransform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga05c5113af7bc4a93fb0df5e812a5bf7d</anchor>
      <arglist>(const Vec2 v, const Mat22 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mat22</type>
      <name>MulT</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga827e59c08791e02964cd63d4382a4549</anchor>
      <arglist>(const Mat22 &amp;A, const Mat22 &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mat22</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga94fee43efb2fa412b816e9e0a7df87f8</anchor>
      <arglist>(const Mat22 &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>NextPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0ad2d1e2b11362e91193d313ee00e78c</anchor>
      <arglist>(std::uint64_t x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>Normalize</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0c7d2525a406c1f83c0574e46a2cee32</anchor>
      <arglist>(Vec2 &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>ComputeCentroid</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae769785f0540a4b8960b282f6b105c14</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetModuloNext</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab5218fea988cf8865a55252d7c282442</anchor>
      <arglist>(T value, T count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetModuloPrev</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga9de9ef40d734a89581bcd6b0804e9b02</anchor>
      <arglist>(T value, T count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetDelta</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8c036532db1260373b97c1d85360894c</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>GetRevRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaa23479fc2522d30b5faf88d4a343d264</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetCircleVertices</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3b8e8abc999b0c63cf1921b0edcf0b36</anchor>
      <arglist>(Length radius, unsigned slices, Angle start=0_deg, Real turns=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfCircle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0eb57dabfe8d3db9e509a6b493173358</anchor>
      <arglist>(Length radius)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfPolygon</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga118f8284073d2638e48ef8f13177e1d9</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>SecondMomentOfArea</type>
      <name>GetPolarMoment</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga760adfdd1cb30bdae8cd37c1ae5da485</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0846d15948227e392cacde27c1ac53f4</anchor>
      <arglist>(const UnitVec value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade290c2d810216ce9b13924b10e748cd</anchor>
      <arglist>(const UnitVec value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a16d85dd548af55daa2d524621aa4d8e8</anchor>
      <arglist>(BoundedValue&lt; T, lo, hi &gt; s, UnitVec u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac2a0980dcd253c27078c6f3c4832b238</anchor>
      <arglist>(const T s, const UnitVec u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b8998ebdaa059a95c36666bb04ab691</anchor>
      <arglist>(UnitVec u, BoundedValue&lt; T, lo, hi &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a415163cc5a5f7a94f3aa13eb42321e43</anchor>
      <arglist>(const UnitVec u, const T s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6bb69c418848650de0ba031cddc9b9af</anchor>
      <arglist>(const UnitVec u, const UnitVec::value_type s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a36015211e47cb33a623c80bf6ebb63a2</anchor>
      <arglist>(const Vector2&lt; T &gt; vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>InverseRotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf42cb44ccb30747c95cc35bc4779e24</anchor>
      <arglist>(const Vector2&lt; T &gt; vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetUnitVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8286b06c48b4fc12a5addb7cc3528b07</anchor>
      <arglist>(Vector2&lt; T &gt; value, UnitVec fallback=UnitVec::GetDefaultFallback())</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetNormalized</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5955bf7b1c0cdfa36d11adea236d9af4</anchor>
      <arglist>(const Position &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Sweep</type>
      <name>GetNormalized</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09b21383c1a73afea37f11e0ba906a76</anchor>
      <arglist>(Sweep sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac92cb8cde6b741c31262c4218cccf775</anchor>
      <arglist>(const Length2 v, const Transformation xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>InverseTransform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4b973c8b02dc4f7ed0bb86486fbfda2a</anchor>
      <arglist>(const Length2 v, const Transformation T) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Transformation</type>
      <name>Mul</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1ed2b21beb0ea976884212d8e1560305</anchor>
      <arglist>(const Transformation &amp;A, const Transformation &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Transformation</type>
      <name>MulT</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a31ba599a09a590cdde545cb29b6ecf1a</anchor>
      <arglist>(const Transformation &amp;A, const Transformation &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a41583becf8482b534e9ce54ecd5601f7</anchor>
      <arglist>(const Length2 ctr, const UnitVec rot, const Length2 localCtr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfafb2a85ece528e8bf2a7a46a9c1612</anchor>
      <arglist>(const Position pos, const Length2 local_ctr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42dd24b646d220e52b8cb79f0d8cd50d</anchor>
      <arglist>(const Sweep &amp;sweep, const Real beta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransform0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8128f59808ffb8ab56cc4d9528422b16</anchor>
      <arglist>(const Sweep &amp;sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransform1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3047f53ab4e594f414832db427f03d6c</anchor>
      <arglist>(const Sweep &amp;sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetContactRelVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ec0d91d72476f3b381c5a3aee92ec21</anchor>
      <arglist>(const Velocity velA, const Length2 relA, const Velocity velB, const Length2 relB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUnderActive</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9be9a0a2f7a01c1e06d84cd092778883</anchor>
      <arglist>(Velocity velocity, LinearVelocity linSleepTol, AngularVelocity angSleepTol) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetReflectionMatrix</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afdd35f5855b7cfb23f0d0c138bec5dec</anchor>
      <arglist>(UnitVec axis)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Matrix_8hpp.html</filename>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">PlayRho/Common/Vector.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">PlayRho/Common/Vector2.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">PlayRho/Common/Real.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">PlayRho/Common/Units.hpp</includes>
    <class kind="struct">playrho::IsMatrix</class>
    <class kind="struct">playrho::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::IsSquareMatrix</class>
    <class kind="struct">playrho::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</class>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>Vector&lt; Vector&lt; T, N &gt;, M &gt;</type>
      <name>Matrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acbf97bd8e3f0f2ce4588735388f4089a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, 2, 2 &gt;</type>
      <name>Matrix22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a26aabbb6723402cb9e12cf32e17beebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, 3, 3 &gt;</type>
      <name>Matrix33</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a92e228aada1d7ca23d9f6c2c9ce3b415</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; Real &gt;</type>
      <name>Mat22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a02c09bb6556e3168c0085871358d2f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; Mass &gt;</type>
      <name>Mass22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a358c8036b278316ab41b3f35b56342a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; InvMass &gt;</type>
      <name>InvMass22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a507cf0b47bd41371f90aa8f78f1d7c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix33&lt; Real &gt;</type>
      <name>Mat33</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aabd44d74c5bc530c9b6676c6a61e6b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt;!IsVector&lt; T &gt;::value, Matrix&lt; T, N, N &gt; &gt;</type>
      <name>GetIdentityMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4a4f43ebaadcd88f829efb082cebec9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsSquareMatrix&lt; T &gt;::value, T &gt;</type>
      <name>GetIdentity</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a43c7cbea13790b72a4bb3aa4af99091c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt;!IsVector&lt; T &gt;::value, Vector&lt; Vector&lt; T, N &gt;, 1 &gt; &gt;</type>
      <name>GetRowMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a63a1715447f7dce79bb09f4bf50745d4</anchor>
      <arglist>(Vector&lt; T, N &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt;!IsVector&lt; T &gt;::value, Vector&lt; Vector&lt; T, 1 &gt;, N &gt; &gt;</type>
      <name>GetColumnMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5fdbbbb834c3389a6efef355718e98b8</anchor>
      <arglist>(Vector&lt; T, N &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae0ab91ce9948b28251bd5f7010ea56f8</anchor>
      <arglist>(const Matrix&lt; T, M, N &gt; &amp;lhs, const Matrix&lt; T, M, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abf301cca25ae9324372e0d266601be2e</anchor>
      <arglist>(const Matrix&lt; T, M, N &gt; &amp;lhs, const Matrix&lt; T, M, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aec0b8dab819e96f993cfdb8c5852ea3e</anchor>
      <arglist>(const Mat22 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54d5fa1d077fbec64800d99ce2775aae</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OptionalValue.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>OptionalValue_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <class kind="class">playrho::OptionalValue</class>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>OptionalValue&lt; T &gt;</type>
      <name>Optional</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acbc56513bd325732410bc4dbb3261299</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Position.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Position_8hpp.html</filename>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">PlayRho/Common/Vector2.hpp</includes>
    <class kind="struct">playrho::d2::Position</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b325984ddf275be8575ac041401cdc2</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8db523eb206a1723feb68fc11183edd7</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a801c517fa59ec5a2c9027662c6f4cd97</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae02afd1c287e2db64fa85a1b6542c075</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a807afcdc1b971f4688ec64bc0643c3f8</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14cd1db8f0ef39b121f8f4f704561277</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab64d27801b571b2ed1c331d983868fa0</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d9083b02a7ce6a77e29b85e091640e5</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5bb3ce07d3b52604efbc70170da9c80a</anchor>
      <arglist>(const Position &amp;pos, const Real scalar)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afbd759adf86eff9713875869bef74e16</anchor>
      <arglist>(const Real scalar, const Position &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aed18ca9774b8ac513ee9c21153395b8e</anchor>
      <arglist>(const d2::Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa791f769d7311d093e53b09c772b78d6</anchor>
      <arglist>(const Position pos0, const Position pos1, const Real beta) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Range.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Range_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <class kind="class">playrho::Range</class>
    <class kind="class">playrho::SizedRange</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>Real.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Real_8hpp.html</filename>
    <includes id="Fixed_8hpp" name="Fixed.hpp" local="no" imported="no">PlayRho/Common/Fixed.hpp</includes>
    <includes id="FixedMath_8hpp" name="FixedMath.hpp" local="no" imported="no">PlayRho/Common/FixedMath.hpp</includes>
    <includes id="FixedLimits_8hpp" name="FixedLimits.hpp" local="no" imported="no">PlayRho/Common/FixedLimits.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>float</type>
      <name>Real</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1fc125070a08100d083a1360f7167f87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealConstants.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>RealConstants_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">PlayRho/Common/Real.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Pi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa8dcd3825d084229bf7118773002c5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareRootTwo</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a28cb7169814fcb6ea8712355f14b141d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Centi</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga7c839382b9503cfe43bd06e107a806cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Deci</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gae1d6e7c9295e5e7cfdacaa4febb24139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Kilo</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga0a001b98cd872f8fc63e2d31566af000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Mega</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga1a1a6b12afd793bd8c39969a0bb2872a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Giga</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga6b71d63054d20481d38c3611900fb48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Tera</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaff2c76d168969252f3f97a070280ec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Peta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaeb56a156700337bb4b68015af2f13b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Yotta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga56411037d9972d2a50d51dfd8e9f3f45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Settings.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Settings_8hpp.html</filename>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <includes id="RealConstants_8hpp" name="RealConstants.hpp" local="no" imported="no">PlayRho/Common/RealConstants.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">PlayRho/Common/Units.hpp</includes>
    <includes id="Wider_8hpp" name="Wider.hpp" local="no" imported="no">PlayRho/Common/Wider.hpp</includes>
    <class kind="struct">playrho::detail::Defaults</class>
    <class kind="struct">playrho::detail::Defaults&lt; Fixed&lt; std::int32_t, FRACTION_BITS &gt; &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxChildCount)&gt;::type</type>
      <name>ChildCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aed352724e203ca09595faf0dc6a76e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>TimestepIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3898807006fd29cd5c4fc2e1a9cf5536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxShapeVertices)&gt;::type</type>
      <name>VertexCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a16da705f1b3c51c7fd1b9b1162c258b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxBodies)&gt;::type</type>
      <name>BodyCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4106d8a0e998a2485196534514527a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Wider&lt; BodyCounter &gt;::type</type>
      <name>ContactCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2bf0674233f83e8b83b30db98332e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxJoints)&gt;::type</type>
      <name>JointCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aeb8ea60dc388d1e92e2e6fa277a32495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxSimplexEdges</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abbe2fee565fa11a79349603c8135617e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxChildCount</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a50e1163e0feff1c68c1b7df518ed02b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxFloat</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2986572411d033ce6b8a33df82a237da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxManifoldPoints</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a35a66ab12515f64920e3e8ecc42ed9e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxShapeVertices</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4d84fa7aa09c071f5d8f75abd7685fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidVertex</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a820aae86aaa2dc8f311aadaee9772a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultLinearSlop</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a568fbd661a4685938f836be092d44927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMinVertexRadius</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4ac65522d29592fd0f5b2eafc15b0b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxVertexRadius</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2765972cd1e3f79c255665e6c2b89484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultAabbExtension</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac2858867fffd4f7f51d1de56b8489d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultDistanceMultiplier</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afdf220729199b5cd46d59801f87b4500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultAngularSlop</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abc565eee4ec57d8533f8b8256fffd389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxLinearCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aac8b97b4370e58775f1abe2d1437ef36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxAngularCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad2d67e2cb405b4b8194f40e73d2c418f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxTranslation</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad09456b1bbf35e4809f19fe5b8c4bde5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxRotation</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a68038766d54f9747ae64daf7b9ee5ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxToiIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9a9c270c891e006cead0bccd34b34932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxToiRootIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a11d30547ffe3d8558066c9ec79a7b6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxDistanceIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7d9d9054bfa791162bf4026334c0fe81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxSubSteps</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aaf0fc052d22dc199fa1f0684d6ab9460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultVelocityThreshold</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a94c6e09c15266f14deaf2ed162a8f225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultRegMinMomentum</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7f82fe11e161b9b9fabe63f173640a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultToiMinMomentum</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a79281b3ee717f5ade1fbd80b89af2df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxBodies</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a529cddcc302f05e841d0435c13ad3d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidContactIndex</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad341643867cf31914c5d7944fc10ae24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxContacts</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7221357729f66012bc69f05f971080cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxJoints</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abb6104815f148c8630e8f5649769772b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultStepTime</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae7509400cc4b50f2955db41a9bfba8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultStepFrequency</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa1f795108af5c1a6d7ae130682090955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMinStillTimeToSleep</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4160ba82b3a7a09e82506ab1950bab42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultLinearSleepTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2c4f8e2fc39644a2f8d9cb04a667981a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultAngularSleepTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a52ce93117d18f6ce667d5968f8566c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultCirclesRatio</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4ecccff942a43c1a9b58b4abb45a8e7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Span.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Span_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <class kind="class">playrho::Span</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>StackAllocator.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>StackAllocator_8cpp.html</filename>
    <includes id="StackAllocator_8hpp" name="StackAllocator.hpp" local="no" imported="no">PlayRho/Common/StackAllocator.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="DynamicMemory_8hpp" name="DynamicMemory.hpp" local="no" imported="no">PlayRho/Common/DynamicMemory.hpp</includes>
  </compound>
  <compound kind="file">
    <name>StackAllocator.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>StackAllocator_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="class">playrho::StackAllocator</class>
    <class kind="struct">playrho::StackAllocator::Conf</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>Sweep.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Sweep_8hpp.html</filename>
    <includes id="Position_8hpp" name="Position.hpp" local="no" imported="no">PlayRho/Common/Position.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">PlayRho/Common/Vector2.hpp</includes>
    <class kind="class">playrho::d2::Sweep</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa51995ca843108552f24b8ccf3c7bcee</anchor>
      <arglist>(const d2::Sweep &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Templates.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Templates_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <class kind="struct">playrho::detail::Voidify</class>
    <class kind="struct">playrho::detail::IsIterableImpl</class>
    <class kind="struct">playrho::detail::IsIterableImpl&lt; T, VoidT&lt; decltype(begin(std::declval&lt; T &gt;())), decltype(end(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(begin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*begin(std::declval&lt; T &gt;())) &gt; &gt;</class>
    <class kind="struct">playrho::IsEqualityComparable</class>
    <class kind="struct">playrho::IsEqualityComparable&lt; T1, T2, detail::VoidT&lt; decltype(T1{}==T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsInequalityComparable</class>
    <class kind="struct">playrho::IsInequalityComparable&lt; T1, T2, detail::VoidT&lt; decltype(T1{} !=T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsAddable</class>
    <class kind="struct">playrho::IsAddable&lt; T1, T2, detail::VoidT&lt; decltype(T1{}+T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsMultipliable</class>
    <class kind="struct">playrho::IsMultipliable&lt; T1, T2, detail::VoidT&lt; decltype(T1{} *T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsDivisable</class>
    <class kind="struct">playrho::IsDivisable&lt; T1, T2, detail::VoidT&lt; decltype(T1{}/T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsArithmetic</class>
    <class kind="struct">playrho::IsArithmetic&lt; T, detail::VoidT&lt; decltype(T{}+T{}), decltype(T{} - T{}), decltype(T{} *T{}), decltype(T{}/T{}) &gt; &gt;</class>
    <class kind="struct">playrho::HasType</class>
    <class kind="struct">playrho::HasType&lt; T, std::tuple&lt;&gt; &gt;</class>
    <class kind="struct">playrho::HasType&lt; T, std::tuple&lt; T, Ts... &gt; &gt;</class>
    <class kind="struct">playrho::HasType&lt; T, std::tuple&lt; U, Ts... &gt; &gt;</class>
    <class kind="struct">playrho::LexicographicalLess</class>
    <class kind="struct">playrho::LexicographicalGreater</class>
    <class kind="struct">playrho::LexicographicalLessEqual</class>
    <class kind="struct">playrho::LexicographicalGreaterEqual</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="typedef">
      <type>typename Voidify&lt; Ts... &gt;::type</type>
      <name>VoidT</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac796d93526955086be33030a4dac3ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::IsIterableImpl&lt; T &gt;</type>
      <name>IsIterable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4708d38a866c6ebc70da3939d5edc8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename HasType&lt; T, Tuple &gt;::type</type>
      <name>TupleContainsType</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a592a9fb888eae63605b73b61c61ccd17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>max_size</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ad0a6aee5cd6409fe17ee8268dc830591</anchor>
      <arglist>(const T &amp;arg) -&gt; decltype(arg.max_size())</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>IsFull</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1334316c111a4be3cc69bc370474624b</anchor>
      <arglist>(const T &amp;arg) -&gt; decltype(size(arg)==max_size(arg))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NOT_USED</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a465a2b892f4effbc98c1b2468d6eb56a</anchor>
      <arglist>(T &amp;&amp;...)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54d5fa1d077fbec64800d99ce2775aae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aebca9d65a7fe1b13d2153365ea5c38df</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac426fb8460298ceef49047f0d8d30a78</anchor>
      <arglist>(const std::size_t &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T *</type>
      <name>GetPtr</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a612ad3b1fb6e9bcda1c02c3d0c06a09d</anchor>
      <arglist>(const T *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T *</type>
      <name>GetPtr</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a46e04f144e783ab9e0ddbdbdec18b54f</anchor>
      <arglist>(T *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T *</type>
      <name>GetPtr</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad9a4c5121046b0f7aeb29da31297b692</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T *</type>
      <name>GetPtr</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a12088eebdc95c1928618bfecf50b75bd</anchor>
      <arglist>(T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T &amp;</type>
      <name>GetRef</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a040cdcbf0532b5393471f61506fefc17</anchor>
      <arglist>(const T *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T &amp;</type>
      <name>GetRef</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3d64e2849426d3384a5f4bac7a6616b6</anchor>
      <arglist>(T *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T &amp;</type>
      <name>GetRef</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5639883faf1638153c8305ee996da3e1</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T &amp;</type>
      <name>GetRef</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a740409a73c321d59d72dae06bd0ae890</anchor>
      <arglist>(T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Visit</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4d72a91d98ac22b6b7603f9747bca314</anchor>
      <arglist>(const T &amp;, void *)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTypeName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a09121345512aa02387efe31575450d6c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTypeName&lt; float &gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa6d64e8a9e599a8d64e38376b391d62e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTypeName&lt; double &gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aff06bebc8d932908c6cda3738a8be297</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTypeName&lt; long double &gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab607914db71f28acb7e60624f6a419a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transformation.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Transformation_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">PlayRho/Common/Vector2.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">PlayRho/Common/UnitVec.hpp</includes>
    <class kind="struct">playrho::d2::Transformation</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a65127c4ea5f121fb8f4b3f721c70db36</anchor>
      <arglist>(Transformation lhs, Transformation rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aebe25ab06d4a4b58d0867f177a3bb1fd</anchor>
      <arglist>(Transformation lhs, Transformation rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a85222e60032cfff157b66b69d86a7941</anchor>
      <arglist>(const d2::Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Transform_identity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae26bda35ac3559a9b32703c8b8e56a5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Units.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Units_8hpp.html</filename>
    <includes id="RealConstants_8hpp" name="RealConstants.hpp" local="no" imported="no">PlayRho/Common/RealConstants.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PLAYRHO_QUANTITY</name>
      <anchorfile>Units_8hpp.html</anchorfile>
      <anchor>a14ff8dd6af816dc4d829e82d5636e5c4</anchor>
      <arglist>(BoostDimension)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PLAYRHO_UNIT</name>
      <anchorfile>Units_8hpp.html</anchorfile>
      <anchor>abf82121ffadd55b2b57041dfaf0f9f87</anchor>
      <arglist>(Quantity, BoostUnit)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PLAYRHO_DERIVED_UNIT</name>
      <anchorfile>Units_8hpp.html</anchorfile>
      <anchor>adf528ed23471d7e428a172fc97d75bc2</anchor>
      <arglist>(Quantity, BoostUnit, Ratio)</arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::time)</type>
      <name>Time</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga250898c9929b0e6eaf56a1967c568888</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::frequency)</type>
      <name>Frequency</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad39135cf298be76964c70829ec84a51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::length)</type>
      <name>Length</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga7361ef2e10e7853a05b64aa433651014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::velocity)</type>
      <name>LinearVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga6e944c18ed210626b5829b8ad2813fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::acceleration)</type>
      <name>LinearAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gadf7de472e7f4a6fa26bff6a655f100e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::mass)</type>
      <name>Mass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga5edfc295416b7690b4f949223b551bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::inverse_mass)</type>
      <name>InvMass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga370c2a37515b6a8e79468113554f8ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::area)</type>
      <name>Area</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga3ea2a7de91fdafccb2e49c3a84117ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::surface_density)</type>
      <name>AreaDensity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga534c92a63631b49d1e80119a68af8a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::plane_angle)</type>
      <name>Angle</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gab999341c050df340ff56a65816a63da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_velocity)</type>
      <name>AngularVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gac33f92018f7e8821550296aece465028</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_acceleration)</type>
      <name>AngularAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gafcce543a0d59f313adb801e2e18ede86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::force)</type>
      <name>Force</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gabdbf955ed1cafec5062f074511ee4829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::torque)</type>
      <name>Torque</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaa13e620479b6e4a34fae5a90bcaf9355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::second_moment_of_area)</type>
      <name>SecondMomentOfArea</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga84a494e0a8763db409c32bde53324b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::moment_of_inertia)</type>
      <name>RotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga67bbb3e4938321efec8d939636bf988e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::inverse_moment_of_inertia)</type>
      <name>InvRotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gafa6edf71110d3eef58f39dcbb8067ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::momentum)</type>
      <name>Momentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga1d281ffd7cf8e2c8897d03a1cae9f1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_momentum)</type>
      <name>AngularMomentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga3537d441743bb2f96c612296424f1e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga14c0aa09892ed4a7b2d46b3fbf41bfc8</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gacf31640481edb2605a7abb68dbdaf749</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae97549d71b0341bc39377700041663f9</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga701e40d1d20e11cdef24fcedf7c23b88</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga684d17076a89433963dc8e1323aa5b55</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac4d843d8faf24294eb520463d9a37813</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9d2018b8764488f776c5a3cf07788b8e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga997e24502fe2452cd289354419781e71</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6de070923e9b463e7c81a87d1486261c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad6fb5c91db30dff44a1a09a8eedea94f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8be5d2aa84e48a3d3c6316332d5a348f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga42755ce0521b8b0130a1c5f11d48964b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaba6b25cf776642ff97185030d0698ac8</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab0b725da10240de2333918963dfde2e5</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0a34b5dc7cac2a5f4112f6893ce06a21</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga2ddca2bb76abdff1a08c35f6988aad1b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gacdef8bf77ff852cab1b11c1c9dc24a32</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaec8d2f9b019cf0833f66b419fa504740</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga639e3760e3331ce0cfb975de496ca975</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6b08394fea8387ac6d9640e5776f844e</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3a3d9e6dddd0021d4bc764cef0eceff0</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8b243cccc73096f470b3f52d7f493ef3</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac0ca071c9d0bf32bd6a4d01aca84ae19</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga30e7212db29d5b6312041200f97633a3</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga97e61bae1e497b896f8e2d98a9779b43</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1a2e6ad4afb3e627981b9e81fc012e4b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad176a2eee3702f7711da245adf07977e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad1231c56d18101cfb0d53a2c42003df7</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab48e985c0b61b4d300c06583893122f1</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8da02678f5590ad991b35b119a7b4c78</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafff606ad84df032356f03e4a7c01eea3</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4f77d9e9c3c2126840001ad39156e0f1</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga391b73d904fce3e5e60a87be78df42b2</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gabb1ded7fb7d02c97a2e54c4f69fb33bb</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac58036a13cae7f8bf437fd6df69706f5</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga464241e9522977097670618359508ca3</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga530568919aee1293441ba7ce0013ccfb</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gada2bbc07689e2dc7f455c190959bbbe1</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6b4a222a228271faa401087192dfd288</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0859831e09cd8275197d6e5d9677fb3e</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga44cbe62a4d856f5aef4224991b3c438f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8f8b7e2debef3864068b820a18e01d9f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9cb6303514b6449fbbc6fca048434837</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga65dba2a7bff526eba56cb0d4cc0b4aa1</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1df36c5d034a211ceb900c726f87a213</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3789883207d17ad417511da46636b927</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga26e8f246fc834b5fea3dec6374941c97</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3c18a1c1e53a34383096fbf514c09e45</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga71a22bf7dab76d4ae75cc162c0d03968</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga311a47d7f3f32758949d319710a4bec0</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga5a455c63651e942e227e38d50dd30daa</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf2ee434b5de8221e4e2238f4ea1dc7bd</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Real</type>
      <name>StripUnit</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adb7953adf3060305d984bce50ab31398</anchor>
      <arglist>(const Real value)</arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Second</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga1f79d239836061a3770b2565e3ac6aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga404f488baa0aec3be5470c2ad0fbab0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Hertz</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga28835cec93243fdfdc7dfd6b748897b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Meter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga039507266050de7ca9bf46650d01b4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MeterPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga3117a15a55f2de2a644818c9763bfbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MeterPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64258443b898058acb500d7dfea6496e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Kilogram</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga43c75e28cac1383ca11aa451c3cdf6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga792f8d6a2eee322ba078add7973269d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>CubicMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga6cfa4f3cdb6b8204ddfec254ba710e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>KilogramPerSquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gae092bb04a4177b10d5cb78e3c04dd32d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Radian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga3fac05ddd105ca78084a80980522f335</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Degree</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7959b7bdc0a05e0e941c5b8113943815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareRadian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga996993e261ccad01eaa44912815b5abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>RadianPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gac4dab714461907cd0799b009f9bd4b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DegreePerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaf68266347e2f5a4b7bc34fe204586d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>RadianPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga43cebf5299254ff0938517f6e441506f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DegreePerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga736a26fdbc90821f50f471bfff5109df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Newton</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0d8d974c67aaae9881a8f432b865b15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>NewtonMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga9b045c5c2d080dcff4bd1bb7085903c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>NewtonSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7a6d64e6bec68fe9e063a08f530a6763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>NewtonMeterSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga4f806270648ade122f45580dea2130b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>RevolutionsPerMinute</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga5a7fa98fcb12786039f6edef405cc48a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>EarthlyLinearAcceleration</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>gabf0c6abc7c1d4718b4c2e21b2a866780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>BigG</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga561c9c679c7d47c671ccfb8fbe13375f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnitVec.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>UnitVec_8cpp.html</filename>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">PlayRho/Common/UnitVec.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>UnitVec.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>UnitVec_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">PlayRho/Common/Units.hpp</includes>
    <includes id="InvalidArgument_8hpp" name="InvalidArgument.hpp" local="no" imported="no">PlayRho/Common/InvalidArgument.hpp</includes>
    <class kind="class">playrho::d2::UnitVec</class>
    <class kind="class">std::tuple_size&lt; playrho::d2::UnitVec &gt;</class>
    <class kind="class">std::tuple_element&lt; I, playrho::d2::UnitVec &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetXAxis</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab14c4fee230025f384ea44d09aebe440</anchor>
      <arglist>(UnitVec rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetYAxis</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0a6aa52e1520c096abd176500e941617</anchor>
      <arglist>(UnitVec rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a99044b280368970c02b9996ee9b622a1</anchor>
      <arglist>(const UnitVec a, const UnitVec b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa540d718a0183a6a9ad0c22db2e6e7fb</anchor>
      <arglist>(const UnitVec a, const UnitVec b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad985bbe66d8b334c65c9eb53e36fae7d</anchor>
      <arglist>(const UnitVec vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aed9bb70a182d7676d4c438b70bb4a5de</anchor>
      <arglist>(const UnitVec vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afcdb159b4b79e5a03bedfc1a0727cf0b</anchor>
      <arglist>(const UnitVec vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>InverseRotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f8fb4b2327abd0f81665f92e4b4b31c</anchor>
      <arglist>(const UnitVec vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec::value_type</type>
      <name>get</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7505645d8a4e2867d5607d3f3c62edc</anchor>
      <arglist>(UnitVec v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec::value_type</type>
      <name>get&lt; 0 &gt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a604924520b0b1f689dfc71b75016761b</anchor>
      <arglist>(UnitVec v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec::value_type</type>
      <name>get&lt; 1 &gt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a480ee53be45631be78a9488771d80a</anchor>
      <arglist>(UnitVec v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4f49bd881fdc6418565529a072b91d54</anchor>
      <arglist>(::std::ostream &amp;os, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54d5fa1d077fbec64800d99ce2775aae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a490b25838c4ed7c8eaed66bd354ce11b</anchor>
      <arglist>(const d2::UnitVec &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Vector_8hpp.html</filename>
    <includes id="InvalidArgument_8hpp" name="InvalidArgument.hpp" local="no" imported="no">PlayRho/Common/InvalidArgument.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">PlayRho/Common/Real.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <class kind="struct">playrho::Vector</class>
    <class kind="struct">playrho::IsVector</class>
    <class kind="struct">playrho::IsVector&lt; Vector&lt; T, N &gt; &gt;</class>
    <class kind="class">std::tuple_size&lt; playrho::Vector&lt; T, N &gt; &gt;</class>
    <class kind="class">std::tuple_element&lt; I, playrho::Vector&lt; T, N &gt; &gt;</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(+T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(-T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{}+T{})&gt;::value, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{} - T{})&gt;::value, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{}+T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{} - T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, B &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a65669d8b8c23c5569bfcf6a5262a6cdb</anchor>
      <arglist>(const Vector&lt; T1, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, B &gt;, A &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, B &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9a493b2f768fa07b50356b4ba142ad11</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, A &gt;, B &gt; &amp;lhs, const Vector&lt; T2, A &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>get</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a50cf2f8c5da833ca93c63f4a9f4bf0bb</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6bda91572806860fa512fff0f01a001b</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; T, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector2.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Vector2_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="InvalidArgument_8hpp" name="InvalidArgument.hpp" local="no" imported="no">PlayRho/Common/InvalidArgument.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">PlayRho/Common/Vector.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>Vector&lt; T, 2 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a97243f194a9406d0fdcf5f6f833851ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Real &gt;</type>
      <name>Vec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad93c0cd83df090aba6593ffac4b628ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Length &gt;</type>
      <name>Length2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7dc68cd0ce177e175ae0bb6c39db158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; LinearVelocity &gt;</type>
      <name>LinearVelocity2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2faa31bff8794a0c4191d8b042f7deeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; LinearAcceleration &gt;</type>
      <name>LinearAcceleration2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5822921028100052d4c6dfb43c7f6c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Force &gt;</type>
      <name>Force2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2d09dc7b51321c052b071485357ca1f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Mass &gt;</type>
      <name>Mass2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acfba2b26f22dcc026361ed5a0ccf3966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; InvMass &gt;</type>
      <name>InvMass2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab4f2424eab18780894e83bbc4127fe67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Momentum &gt;</type>
      <name>Momentum2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1fa6ffb2e67c2e2f620eed088412b146</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a92e902077bbcd4070f04162092c8fb1d</anchor>
      <arglist>(const Vector2&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54d5fa1d077fbec64800d99ce2775aae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac84d7ab7f222264a61b3894b2eefe883</anchor>
      <arglist>(const Vector2&lt; TYPE &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>EarthlyGravity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a143ebb178c627ab4836140ba1611171c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector3.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Vector3_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">PlayRho/Common/Vector.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>Vector&lt; T, 3 &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad07b44f811ac4c7551067fb1d3554ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; Real &gt;</type>
      <name>Vec3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a63f6dcdf3763052ea25099973c7c00ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; Mass &gt;</type>
      <name>Mass3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a996c0271f83c70e94b485ff59bb468a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; InvMass &gt;</type>
      <name>InvMass3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d3b57b56d804cd09ae743e670e866d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54d5fa1d077fbec64800d99ce2775aae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aec0b8dab819e96f993cfdb8c5852ea3e</anchor>
      <arglist>(const Mat22 &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Velocity.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Velocity_8cpp.html</filename>
    <includes id="Velocity_8hpp" name="Velocity.hpp" local="no" imported="no">PlayRho/Common/Velocity.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="VelocityConstraint_8hpp" name="VelocityConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/VelocityConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>VelocityPair</type>
      <name>CalcWarmStartVelocityDeltas</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab3163942ed703060f3d647328b5e3770</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Velocity.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Velocity_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">PlayRho/Common/Vector2.hpp</includes>
    <class kind="struct">playrho::d2::Velocity</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Velocity, Velocity &gt;</type>
      <name>VelocityPair</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa577189e0996ba8d7897fa12b80726c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a775953540833d76c2205486ad443cb44</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac9bd82a296e14a104151eaf3e50d9f47</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6aef7d1594aae1d3edc933a3e782befa</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3458e1e85991d046c4586127dd700bbb</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a969296fe70c0ac8d3703c846c0ae4667</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22fe8af2d6028a31014bb60831affba6</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6179f48102468fef9300775dee41faa</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaa5eb5657f6e6906c30ad390ac9ad6aa</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a99243f7ae90f65f0ddfb78388f8f89df</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae06a249d054aba4bd9ade03b953275af</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2f146d1eadc3fc3f4b8e9dfc6eb465b5</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afacd998761adab744f3eff9f21fb6698</anchor>
      <arglist>(const Real lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a63936f67053cf2f9c89a9944fd66986f</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>VelocityPair</type>
      <name>CalcWarmStartVelocityDeltas</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab3163942ed703060f3d647328b5e3770</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2b6887c8070394826911cddf7c29be82</anchor>
      <arglist>(const d2::Velocity &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Version.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Version_8cpp.html</filename>
    <includes id="Version_8hpp" name="Version.hpp" local="no" imported="no">PlayRho/Common/Version.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">PlayRho/Common/Templates.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">PlayRho/Common/Real.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>Version</type>
      <name>GetVersion</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af43ad5413c876b34dcf8430c045986cc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetBuildDetails</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66e36c723d641ea2e8dad6e8653f6ffd</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Version.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Version_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <class kind="struct">playrho::Version</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad58823f4cba966f2ddf371bf48656a74</anchor>
      <arglist>(Version lhs, Version rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afe456353b547ab70b3050be04644b974</anchor>
      <arglist>(Version lhs, Version rhs)</arglist>
    </member>
    <member kind="function">
      <type>Version</type>
      <name>GetVersion</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af43ad5413c876b34dcf8430c045986cc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetBuildDetails</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66e36c723d641ea2e8dad6e8653f6ffd</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VertexSet.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>VertexSet_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="class">playrho::d2::VertexSet</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>Wider.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>Wider_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <class kind="struct">playrho::Wider</class>
    <class kind="struct">playrho::Wider&lt; std::int8_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::uint8_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::int16_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::uint16_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::int32_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::uint32_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; float &gt;</class>
    <class kind="struct">playrho::Wider&lt; double &gt;</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>WrongState.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Common/</path>
    <filename>WrongState_8hpp.html</filename>
    <class kind="class">playrho::WrongState</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>Defines.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/</path>
    <filename>Defines_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PLAYRHO_CONSTEXPR</name>
      <anchorfile>Defines_8hpp.html</anchorfile>
      <anchor>a505552532017ae53623ca57558901439</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Body.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>Body_8cpp.html</filename>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="BodyConf_8hpp" name="BodyConf.hpp" local="no" imported="no">PlayRho/Dynamics/BodyConf.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">PlayRho/Dynamics/World.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="WrongState_8hpp" name="WrongState.hpp" local="no" imported="no">PlayRho/Common/WrongState.hpp</includes>
    <includes id="WorldAtty_8hpp" name="WorldAtty.hpp" local="no" imported="no">PlayRho/Dynamics/WorldAtty.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ec1591eb8ee2f1951d9e8d8e51494f9</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c6a1ec2274053b6d4cdece776faaad4</anchor>
      <arglist>(const Body *body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab873f18f1e540da43881e7f2dadeb7b1</anchor>
      <arglist>(const Body &amp;body, Time h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>Cap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d42f6f1b9cc7b4c13cb4a9b7f656f8e</anchor>
      <arglist>(Velocity velocity, Time h, MovementConf conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetFixtureCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b995406bae81c78866c12b59432a931</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af35644c450c12c8dcbd6cf1a0aa7b75c</anchor>
      <arglist>(Body &amp;body, Angle amount, Length2 worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad233f2c24d1fa985bd80eaa0050d659e</anchor>
      <arglist>(Body &amp;body, Angle amount, Length2 localPoint)</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetCentripetalForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6970aff5f3ad80147b55f36902039b4e</anchor>
      <arglist>(const Body &amp;body, Length2 axis)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>CalcGravitationalAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a532a2a6530a34432d28f6089193b2260</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Body.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>Body_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="Range_8hpp" name="Range.hpp" local="no" imported="no">PlayRho/Common/Range.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="BodyType_8hpp" name="BodyType.hpp" local="no" imported="no">PlayRho/Dynamics/BodyType.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="ContactKey_8hpp" name="ContactKey.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactKey.hpp</includes>
    <includes id="JointKey_8hpp" name="JointKey.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointKey.hpp</includes>
    <includes id="MovementConf_8hpp" name="MovementConf.hpp" local="no" imported="no">PlayRho/Dynamics/MovementConf.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">PlayRho/Collision/MassData.hpp</includes>
    <class kind="class">playrho::d2::Body</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acafaac4ef15f7416f464dff9b19780fa</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a438e172db303ae0ab53263bc6af419ad</anchor>
      <arglist>(Body &amp;body, Acceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>CalcGravitationalAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a532a2a6530a34432d28f6089193b2260</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4834708af29bcc9ae39ebfc2b9f580f6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unawaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdfbff06306e4ecb71f6d4b2136eea7c</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ec1591eb8ee2f1951d9e8d8e51494f9</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a77de45b3fab735d0f87a0978a622a9c0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c355eb58981b97e5901fa7d04052507</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20ea58563885aec5eeab46943e526f6a</anchor>
      <arglist>(Body &amp;body, LinearAcceleration2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9897119656ab5cb35c4babd0a4f9b3a5</anchor>
      <arglist>(Body &amp;body, AngularAcceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7e2df131b907494df3b33f2ca8751529</anchor>
      <arglist>(Body &amp;body, LinearAcceleration2 amount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a2c515bee211ab828b8d36ba80dc149</anchor>
      <arglist>(Body &amp;body, Force2 force, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b21a34b270ecd1ad966a293ba681bc5</anchor>
      <arglist>(Body &amp;body, Force2 force, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForceToCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a88d1ffd34c57bb9737f51f0dc918ea0d</anchor>
      <arglist>(Body &amp;body, Force2 force) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0c8061050b56df681bde8a6bf28aefa2</anchor>
      <arglist>(Body &amp;body, Torque torque) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f848e079efd1b4e7d7a926cdb146d0b</anchor>
      <arglist>(Body &amp;body, Torque torque) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07f50b8133debf454d50f491d196dc24</anchor>
      <arglist>(Body &amp;body, Momentum2 impulse, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5d1467095e23488ca1344a26336aae8f</anchor>
      <arglist>(Body &amp;body, AngularMomentum impulse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetCentripetalForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6970aff5f3ad80147b55f36902039b4e</anchor>
      <arglist>(const Body &amp;body, Length2 axis)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c4c855f042444d0122919f8c1559ccb</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>accc0736257251f381353661320af972e</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3802163b90f631b001eaa0201be419c9</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a306635dbd11f92ad1020a386fce7b7c2</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7c0e7bb0c146372c16ee44661798c473</anchor>
      <arglist>(Body &amp;body, const LinearVelocity2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfac2d00a05141d4bcfdd0a3dd443765</anchor>
      <arglist>(Body &amp;body, AngularVelocity omega) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdbcfc8a43696b1e7136db073fbe09ad</anchor>
      <arglist>(const Body &amp;body, const Length2 localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ccc8fe53ed54beba80db7046ab8ddf0</anchor>
      <arglist>(const Body &amp;body, const Length2 localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7544d24c890820e7f5a6d355c0ad4406</anchor>
      <arglist>(const Body &amp;body, const UnitVec localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab029ce2fdf891e9d4a5705e2c4e0564a</anchor>
      <arglist>(const Body &amp;body, const Length2 worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a560083bf40b9f3936b549e841d8338ba</anchor>
      <arglist>(const Body &amp;body, const UnitVec uv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7217cc5275bc5d8c2f2407ee20fb958</anchor>
      <arglist>(const Body &amp;body, const Length2 worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a47196aab3f4386da954b565a6a0fce7c</anchor>
      <arglist>(const Body &amp;body, const Length2 localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82eaa61b6bddf682fe315f09830e2bfc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18e2ece8e057b22c240cf681aca400b5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>Cap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d42f6f1b9cc7b4c13cb4a9b7f656f8e</anchor>
      <arglist>(Velocity velocity, Time h, MovementConf conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab873f18f1e540da43881e7f2dadeb7b1</anchor>
      <arglist>(const Body &amp;body, Time h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c6a1ec2274053b6d4cdece776faaad4</anchor>
      <arglist>(const Body *body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetFixtureCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b995406bae81c78866c12b59432a931</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af35644c450c12c8dcbd6cf1a0aa7b75c</anchor>
      <arglist>(Body &amp;body, Angle amount, Length2 worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad233f2c24d1fa985bd80eaa0050d659e</anchor>
      <arglist>(Body &amp;body, Angle amount, Length2 localPoint)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a6f694cab71d0db91049dc0908de63f</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93f21ae0c92245d912cb91a99e756946</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a23265c6b8ce7bfd11da5f78d296dd4cb</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44001c717f2a41d1ba1c02fec4a9c5a9</anchor>
      <arglist>(Body &amp;body, const Transformation &amp;xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4b2825c7e1effdbf7bbf4a8c894a2350</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18d4f68807190fdf745e1b7a6eeeeefc</anchor>
      <arglist>(Body &amp;body, Length2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a200799e930f62a238b7e82bf59d18cdb</anchor>
      <arglist>(Body &amp;body, Angle value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodyAtty.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>BodyAtty_8hpp.html</filename>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="JointKey_8hpp" name="JointKey.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointKey.hpp</includes>
    <includes id="ContactKey_8hpp" name="ContactKey.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactKey.hpp</includes>
    <class kind="class">playrho::d2::BodyAtty</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>BodyConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>BodyConf_8cpp.html</filename>
    <includes id="BodyConf_8hpp" name="BodyConf.hpp" local="no" imported="no">PlayRho/Dynamics/BodyConf.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>BodyConf</type>
      <name>GetBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e940544a56fe840424f880106fcd842</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodyConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>BodyConf_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="BodyType_8hpp" name="BodyType.hpp" local="no" imported="no">PlayRho/Dynamics/BodyType.hpp</includes>
    <class kind="struct">playrho::d2::BodyConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf</type>
      <name>GetDefaultBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a778e88e326f8711cefea4333cef640</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConf</type>
      <name>GetBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e940544a56fe840424f880106fcd842</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodyType.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>BodyType_8hpp.html</filename>
    <namespace>playrho</namespace>
    <member kind="enumeration">
      <type></type>
      <name>BodyType</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a098b0ef528e3b728af8e3e17873963f7</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a84a8921b25f505d0d2077aeb5db4bc16">Static</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a40c78b58b86002ee38fad2d3c9dd787e">Kinematic</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a971fd8cc345d8bd9f92e9f7d88fdf20c">Dynamic</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactAtty.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>ContactAtty_8hpp.html</filename>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <class kind="class">playrho::d2::ContactAtty</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>ContactImpulsesList.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>ContactImpulsesList_8cpp.html</filename>
    <includes id="ContactImpulsesList_8hpp" name="ContactImpulsesList.hpp" local="no" imported="no">PlayRho/Dynamics/ContactImpulsesList.hpp</includes>
    <includes id="VelocityConstraint_8hpp" name="VelocityConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/VelocityConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>ContactImpulsesList</type>
      <name>GetContactImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3952e6392470f39a6236a5d144df88fe</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactImpulsesList.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>ContactImpulsesList_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="class">playrho::d2::ContactImpulsesList</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Momentum</type>
      <name>GetMaxNormalImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07f0d8f5fce9556590d8e7e40289ae33</anchor>
      <arglist>(const ContactImpulsesList &amp;impulses) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactImpulsesList</type>
      <name>GetContactImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3952e6392470f39a6236a5d144df88fe</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodyConstraint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>BodyConstraint_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="MovementConf_8hpp" name="MovementConf.hpp" local="no" imported="no">PlayRho/Dynamics/MovementConf.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <class kind="class">playrho::d2::BodyConstraint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>BodyConstraint</type>
      <name>GetBodyConstraint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9ef1dfe4410cde28beb3f03e2ef368f4</anchor>
      <arglist>(const Body &amp;body, Time time, MovementConf conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Contact.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>Contact_8cpp.html</filename>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <includes id="Collision_8hpp" name="Collision.hpp" local="no" imported="no">PlayRho/Collision/Collision.hpp</includes>
    <includes id="Distance_8hpp" name="Distance.hpp" local="no" imported="no">PlayRho/Collision/Distance.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="Shape_8hpp" name="Shape.hpp" local="no" imported="no">PlayRho/Collision/Shapes/Shape.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">PlayRho/Dynamics/World.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OVERLAP_TOLERANCE</name>
      <anchorfile>Contact_8cpp.html</anchorfile>
      <anchor>a95b3e6487597ca544df1f9f865941a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a83c524153440dfeb072b8479b3f3ace3</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1eecaff8b7fee485cf11687a362299ab</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73cfb2e1e624b31d5f37fb3e2018e901</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae0a081f37037b2a2efb245676ace55b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a679c4d673a6ea2890e0d39a7b6fdb0f7</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9b5dc1f3ca395793a68fcc5b87fb34e9</anchor>
      <arglist>(const Contact &amp;c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6364ce32adb82c7dd45b80e8b0c9bfd5</anchor>
      <arglist>(Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7c83e82f89844199f5c06c5cda3749d</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOIOutput</type>
      <name>CalcToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a68f3d6b8ed4709b6b99bd8e096a9960e</anchor>
      <arglist>(const Contact &amp;contact, ToiConf conf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Contact.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>Contact_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">PlayRho/Collision/Manifold.hpp</includes>
    <includes id="Distance_8hpp" name="Distance.hpp" local="no" imported="no">PlayRho/Collision/Distance.hpp</includes>
    <includes id="TimeOfImpact_8hpp" name="TimeOfImpact.hpp" local="no" imported="no">PlayRho/Collision/TimeOfImpact.hpp</includes>
    <includes id="Shape_8hpp" name="Shape.hpp" local="no" imported="no">PlayRho/Collision/Shapes/Shape.hpp</includes>
    <class kind="class">playrho::d2::Contact</class>
    <class kind="struct">playrho::d2::Contact::UpdateConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>Contact *</type>
      <name>ContactPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a61cf9e6007e1705c873d64fe34ce43db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>MixFriction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a50d46e6e45df1f7049decee120ce9922</anchor>
      <arglist>(Real friction1, Real friction2)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>MixRestitution</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abdd2574637d4c8869ae345d3975829cc</anchor>
      <arglist>(Real restitution1, Real restitution2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a83c524153440dfeb072b8479b3f3ace3</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1eecaff8b7fee485cf11687a362299ab</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixture *</type>
      <name>GetFixtureA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae95687c935176a9f12867b3f4e455238</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixture *</type>
      <name>GetFixtureB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8f0ba59067e83279bcdd83817732701b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb78a950ed55c8058f6beffd7b26a180</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf62df2b59a399644e24938289aa3dd1</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73cfb2e1e624b31d5f37fb3e2018e901</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae0a081f37037b2a2efb245676ace55b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a679c4d673a6ea2890e0d39a7b6fdb0f7</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9b5dc1f3ca395793a68fcc5b87fb34e9</anchor>
      <arglist>(const Contact &amp;c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6364ce32adb82c7dd45b80e8b0c9bfd5</anchor>
      <arglist>(Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7c83e82f89844199f5c06c5cda3749d</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOIOutput</type>
      <name>CalcToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a68f3d6b8ed4709b6b99bd8e096a9960e</anchor>
      <arglist>(const Contact &amp;contact, ToiConf conf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactKey.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>ContactKey_8cpp.html</filename>
    <includes id="ContactKey_8hpp" name="ContactKey.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactKey.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="FixtureProxy_8hpp" name="FixtureProxy.hpp" local="no" imported="no">PlayRho/Dynamics/FixtureProxy.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">PlayRho/Dynamics/World.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>ContactKey</type>
      <name>GetContactKey</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39fb4ceda025b54499ed96746084406d</anchor>
      <arglist>(const Fixture &amp;fixtureA, ChildCounter childIndexA, const Fixture &amp;fixtureB, ChildCounter childIndexB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactKey</type>
      <name>GetContactKey</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ced2de66d940bf19f7def17d982ab5e</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactKey.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>ContactKey_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="class">playrho::ContactKey</class>
    <class kind="struct">std::hash&lt; playrho::ContactKey &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::pair&lt; ContactKey, Contact * &gt;</type>
      <name>KeyedContactPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8eae02222196560a76ed5cfdeb967760</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5dd8c9bd6313579a5b5bc194b62847cc</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a73b7e8f86343cf046ccfe30c5b0920dd</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1c3ad5b08a3971eebd78d95866df2278</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a048a0945c99fc7012e010f1892d0d2f5</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac5a5f2b320e151ec9c0b63815685f7f4</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af78b58a8a5896dc5d9dfbe4cd83265eb</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactKey</type>
      <name>GetContactKey</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39fb4ceda025b54499ed96746084406d</anchor>
      <arglist>(const Fixture &amp;fixtureA, ChildCounter childIndexA, const Fixture &amp;fixtureB, ChildCounter childIndexB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactKey</type>
      <name>GetContactKey</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ced2de66d940bf19f7def17d982ab5e</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Contact *</type>
      <name>GetContactPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a036fd17edd4f18cf0112859c2daa70e9</anchor>
      <arglist>(KeyedContactPtr value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactSolver.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>ContactSolver_8cpp.html</filename>
    <includes id="ContactSolver_8hpp" name="ContactSolver.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactSolver.hpp</includes>
    <includes id="Collision_8hpp" name="Collision.hpp" local="no" imported="no">PlayRho/Collision/Collision.hpp</includes>
    <includes id="WorldManifold_8hpp" name="WorldManifold.hpp" local="no" imported="no">PlayRho/Collision/WorldManifold.hpp</includes>
    <includes id="PositionSolverManifold_8hpp" name="PositionSolverManifold.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/PositionSolverManifold.hpp</includes>
    <includes id="VelocityConstraint_8hpp" name="VelocityConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/VelocityConstraint.hpp</includes>
    <includes id="PositionConstraint_8hpp" name="PositionConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/PositionConstraint.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="OptionalValue_8hpp" name="OptionalValue.hpp" local="no" imported="no">PlayRho/Common/OptionalValue.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::GaussSeidel</namespace>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetRegConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aacaf6573afe5f3fb0803faa353dc9c65</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetToiConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afdb8daa84d36ac948934ee05eb4cb242</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>SolveVelocityConstraint</name>
      <anchorfile>namespaceplayrho_1_1GaussSeidel.html</anchorfile>
      <anchor>a270ba118399c9419880ab9893ef479e5</anchor>
      <arglist>(d2::VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>d2::PositionSolution</type>
      <name>SolvePositionConstraint</name>
      <anchorfile>namespaceplayrho_1_1GaussSeidel.html</anchorfile>
      <anchor>a20cf1f9d2f1ac6b85e0d4171b523d3a7</anchor>
      <arglist>(const d2::PositionConstraint &amp;pc, const bool moveA, const bool moveB, ConstraintSolverConf conf)</arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>magnitude</name>
      <anchorfile>ContactSolver_8cpp.html</anchorfile>
      <anchor>a690c1224a44cb909757c9157fc7eea06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>direction</name>
      <anchorfile>ContactSolver_8cpp.html</anchorfile>
      <anchor>af2bbfb5d7bb2436b3718532e00b7f430</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactSolver.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>ContactSolver_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::PositionSolution</class>
    <class kind="struct">playrho::ConstraintSolverConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::GaussSeidel</namespace>
    <member kind="function">
      <type>PositionSolution</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd873bc71022ae60b8dc92a2a4ab74db</anchor>
      <arglist>(PositionSolution lhs, PositionSolution rhs)</arglist>
    </member>
    <member kind="function">
      <type>PositionSolution</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad2efb6e040dc5597f0bd9c7deb1761ea</anchor>
      <arglist>(PositionSolution lhs, PositionSolution rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetDefaultPositionSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0c5bfe19319bd53279df8e97a75c1aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetDefaultToiPositionSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0ede85de958ca0b1409f86e95843b578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetRegConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aacaf6573afe5f3fb0803faa353dc9c65</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetToiConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afdb8daa84d36ac948934ee05eb4cb242</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>SolveVelocityConstraint</name>
      <anchorfile>namespaceplayrho_1_1GaussSeidel.html</anchorfile>
      <anchor>a270ba118399c9419880ab9893ef479e5</anchor>
      <arglist>(d2::VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>d2::PositionSolution</type>
      <name>SolvePositionConstraint</name>
      <anchorfile>namespaceplayrho_1_1GaussSeidel.html</anchorfile>
      <anchor>a20cf1f9d2f1ac6b85e0d4171b523d3a7</anchor>
      <arglist>(const d2::PositionConstraint &amp;pc, const bool moveA, const bool moveB, ConstraintSolverConf conf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PositionConstraint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>PositionConstraint_8hpp.html</filename>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">PlayRho/Collision/Manifold.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <class kind="class">playrho::d2::PositionConstraint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>PositionSolverManifold.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>PositionSolverManifold_8cpp.html</filename>
    <includes id="PositionSolverManifold_8hpp" name="PositionSolverManifold.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/PositionSolverManifold.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PositionSolverManifold</type>
      <name>GetPSM</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa9987f7f8471dbe26d486e2602661e78</anchor>
      <arglist>(const Manifold &amp;manifold, Manifold::size_type index, const Transformation &amp;xfA, const Transformation &amp;xfB)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PositionSolverManifold.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>PositionSolverManifold_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">PlayRho/Collision/Manifold.hpp</includes>
    <class kind="struct">playrho::d2::PositionSolverManifold</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PositionSolverManifold</type>
      <name>GetPSM</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa9987f7f8471dbe26d486e2602661e78</anchor>
      <arglist>(const Manifold &amp;manifold, Manifold::size_type index, const Transformation &amp;xfA, const Transformation &amp;xfB)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VelocityConstraint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>VelocityConstraint_8cpp.html</filename>
    <includes id="VelocityConstraint_8hpp" name="VelocityConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/VelocityConstraint.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="WorldManifold_8hpp" name="WorldManifold.hpp" local="no" imported="no">PlayRho/Collision/WorldManifold.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">PlayRho/Collision/Manifold.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PLAYRHO_MAGIC</name>
      <anchorfile>VelocityConstraint_8cpp.html</anchorfile>
      <anchor>adb678fb8836c3b571175dd4ef5323fe3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetRegVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3be2a456143f7f1db48944c54ece5f7d</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetToiVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad85899bcfb7e549fe5739759da490fad</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VelocityConstraint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Contacts/</path>
    <filename>VelocityConstraint_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <class kind="class">playrho::d2::VelocityConstraint</class>
    <class kind="struct">playrho::d2::VelocityConstraint::Conf</class>
    <class kind="struct">playrho::d2::VelocityConstraint::Point</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetRegVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3be2a456143f7f1db48944c54ece5f7d</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetToiVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad85899bcfb7e549fe5739759da490fad</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a505e0ba1aa4e4cdef90f4726d8f8c866</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetTangent</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a12eb87f33057fe3f442b0ec676377957</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af73eb5649a2cf524f0a144d10eaab015</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a68cc03f13897094111403a1ac4a049c8</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6ee37ce310f1b1c648d9839a484c029a</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetVelocityBiasAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad29f5f0f1292fa56396d8ed8cbbd1817</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetNormalMassAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf5dd1d8868baa0e0cea2cf19b39cb95</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetTangentMassAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4e72bcca6e5c6a3f0386f9fa2127f41d</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetNormalImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a238cff049e361d27dcb889d50ea67613</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetTangentImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b3e102432766123da35ec35f806d6f8</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetNormalImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4145b0ae4d099402770893bffc3ed4aa</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetTangentImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a998e3c3312725cd900878cf71f2cf6e5</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7f7d7dbe5e33cfbb08cdb9190ea8f8b</anchor>
      <arglist>(VelocityConstraint &amp;vc, VelocityConstraint::size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3736992d15f28f25f8e02fc17e5e3e27</anchor>
      <arglist>(VelocityConstraint &amp;vc, VelocityConstraint::size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfa6dcc6594d84f26af4630c98f010eb</anchor>
      <arglist>(VelocityConstraint &amp;vc, const Momentum2 impulses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a98c5ded56d446e057ba2fcb92760358a</anchor>
      <arglist>(VelocityConstraint &amp;vc, const Momentum2 impulses)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Filter.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>Filter_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <class kind="struct">playrho::Filter</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af48fe223cf379b5534ebf571d5f83164</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab177f652a925ae4e4a236a597dbe6d07</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a223329721a8138f316898ed9a4877250</anchor>
      <arglist>(const Filter filterA, const Filter filterB) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fixture.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>Fixture_8cpp.html</filename>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="FixtureProxy_8hpp" name="FixtureProxy.hpp" local="no" imported="no">PlayRho/Dynamics/FixtureProxy.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">PlayRho/Dynamics/World.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="WorldAtty_8hpp" name="WorldAtty.hpp" local="no" imported="no">PlayRho/Dynamics/WorldAtty.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gab8a45f5746faae097776c2dcd5d8c9d4</anchor>
      <arglist>(const Fixture &amp;f, Length2 p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a881653bbb1f1064662695770738c3dfc</anchor>
      <arglist>(const Fixture &amp;f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0daaf455abb76a6e73564741eedee365</anchor>
      <arglist>(const Fixture &amp;f) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fixture.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>Fixture_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">PlayRho/Common/Span.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Filter_8hpp" name="Filter.hpp" local="no" imported="no">PlayRho/Dynamics/Filter.hpp</includes>
    <includes id="FixtureConf_8hpp" name="FixtureConf.hpp" local="no" imported="no">PlayRho/Dynamics/FixtureConf.hpp</includes>
    <includes id="FixtureProxy_8hpp" name="FixtureProxy.hpp" local="no" imported="no">PlayRho/Dynamics/FixtureProxy.hpp</includes>
    <includes id="Shape_8hpp" name="Shape.hpp" local="no" imported="no">PlayRho/Collision/Shapes/Shape.hpp</includes>
    <class kind="class">playrho::d2::Fixture</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gab8a45f5746faae097776c2dcd5d8c9d4</anchor>
      <arglist>(const Fixture &amp;f, Length2 p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a881653bbb1f1064662695770738c3dfc</anchor>
      <arglist>(const Fixture &amp;f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0daaf455abb76a6e73564741eedee365</anchor>
      <arglist>(const Fixture &amp;f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a83e0703de7a5f33d9a17c36f1aa43615</anchor>
      <arglist>(const Fixture &amp;fixtureA, const Fixture &amp;fixtureB) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FixtureAtty.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>FixtureAtty_8hpp.html</filename>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">PlayRho/Common/Span.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <class kind="class">playrho::d2::FixtureAtty</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>FixtureConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>FixtureConf_8cpp.html</filename>
    <includes id="FixtureConf_8hpp" name="FixtureConf.hpp" local="no" imported="no">PlayRho/Dynamics/FixtureConf.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>FixtureConf</type>
      <name>GetFixtureConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8db5cea675ddb8590ba6787a048a58b2</anchor>
      <arglist>(const Fixture &amp;fixture) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FixtureConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>FixtureConf_8hpp.html</filename>
    <includes id="Filter_8hpp" name="Filter.hpp" local="no" imported="no">PlayRho/Dynamics/Filter.hpp</includes>
    <class kind="struct">playrho::d2::FixtureConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR FixtureConf</type>
      <name>GetDefaultFixtureConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a717b9c7d89e14f4f0e7f893075b3a8a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureConf</type>
      <name>GetFixtureConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8db5cea675ddb8590ba6787a048a58b2</anchor>
      <arglist>(const Fixture &amp;fixture) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FixtureProxy.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>FixtureProxy_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="AABB_8hpp" name="AABB.hpp" local="no" imported="no">PlayRho/Collision/AABB.hpp</includes>
    <class kind="struct">playrho::FixtureProxy</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7fa7929a7c9cfd63177dcf77c3116bf1</anchor>
      <arglist>(const FixtureProxy &amp;lhs, const FixtureProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a11952027f7e2cabb36d03c2677219a4a</anchor>
      <arglist>(const FixtureProxy &amp;lhs, const FixtureProxy &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Island.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>Island_8cpp.html</filename>
    <includes id="Distance_8hpp" name="Distance.hpp" local="no" imported="no">PlayRho/Collision/Distance.hpp</includes>
    <includes id="Island_8hpp" name="Island.hpp" local="no" imported="no">PlayRho/Dynamics/Island.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">PlayRho/Dynamics/World.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1b38c605da457526f62c63035cb0affe</anchor>
      <arglist>(const Island &amp;island, const Body *entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae256b2876b134f9f6eaa583ee990e486</anchor>
      <arglist>(const Island &amp;island, const Contact *entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af70534dab51f6fa6a15dd0399d8d8ff7</anchor>
      <arglist>(const Island &amp;island, const Joint *entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Island.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>Island_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::Island</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad81cfb61a8aae11d28836a542584dd7f</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0613fe306ae99ce5ca98798c757a3dc2</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1b38c605da457526f62c63035cb0affe</anchor>
      <arglist>(const Island &amp;island, const Body *entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae256b2876b134f9f6eaa583ee990e486</anchor>
      <arglist>(const Island &amp;island, const Contact *entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af70534dab51f6fa6a15dd0399d8d8ff7</anchor>
      <arglist>(const Island &amp;island, const Joint *entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IslandStats.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>IslandStats_8hpp.html</filename>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">PlayRho/Common/Units.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="struct">playrho::IslandStats</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>JointAtty.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>JointAtty_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <class kind="class">playrho::d2::JointAtty</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>DistanceJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>DistanceJoint_8cpp.html</filename>
    <includes id="DistanceJoint_8hpp" name="DistanceJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/DistanceJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="ContactSolver_8hpp" name="ContactSolver.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactSolver.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>DistanceJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>DistanceJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="DistanceJointConf_8hpp" name="DistanceJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/DistanceJointConf.hpp</includes>
    <class kind="class">playrho::d2::DistanceJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>DistanceJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>DistanceJointConf_8cpp.html</filename>
    <includes id="DistanceJointConf_8hpp" name="DistanceJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/DistanceJointConf.hpp</includes>
    <includes id="DistanceJoint_8hpp" name="DistanceJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/DistanceJoint.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae65a21864cd706cbd0f239ed4497841d</anchor>
      <arglist>(const DistanceJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistanceJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>DistanceJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::DistanceJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae65a21864cd706cbd0f239ed4497841d</anchor>
      <arglist>(const DistanceJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrictionJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>FrictionJoint_8cpp.html</filename>
    <includes id="FrictionJoint_8hpp" name="FrictionJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/FrictionJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>FrictionJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>FrictionJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="FrictionJointConf_8hpp" name="FrictionJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/FrictionJointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <class kind="class">playrho::d2::FrictionJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>FrictionJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>FrictionJointConf_8cpp.html</filename>
    <includes id="FrictionJoint_8hpp" name="FrictionJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/FrictionJoint.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c68ff176bff91fd36b87f183341d713</anchor>
      <arglist>(const FrictionJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrictionJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>FrictionJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::FrictionJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c68ff176bff91fd36b87f183341d713</anchor>
      <arglist>(const FrictionJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionalJointVisitor.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>FunctionalJointVisitor_8hpp.html</filename>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <class kind="class">playrho::d2::FunctionalJointVisitor</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>GearJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>GearJoint_8cpp.html</filename>
    <includes id="GearJoint_8hpp" name="GearJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/GearJoint.hpp</includes>
    <includes id="RevoluteJoint_8hpp" name="RevoluteJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RevoluteJoint.hpp</includes>
    <includes id="PrismaticJoint_8hpp" name="PrismaticJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PrismaticJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="ContactSolver_8hpp" name="ContactSolver.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactSolver.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>GearJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>GearJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="GearJointConf_8hpp" name="GearJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/GearJointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <class kind="class">playrho::d2::GearJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>GearJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>GearJointConf_8cpp.html</filename>
    <includes id="GearJointConf_8hpp" name="GearJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/GearJointConf.hpp</includes>
    <includes id="GearJoint_8hpp" name="GearJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/GearJoint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a47a8832ceb780632a61883551107187a</anchor>
      <arglist>(const GearJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GearJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>GearJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::GearJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a47a8832ceb780632a61883551107187a</anchor>
      <arglist>(const GearJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Joint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>Joint_8cpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="DistanceJoint_8hpp" name="DistanceJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/DistanceJoint.hpp</includes>
    <includes id="WheelJoint_8hpp" name="WheelJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WheelJoint.hpp</includes>
    <includes id="TargetJoint_8hpp" name="TargetJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/TargetJoint.hpp</includes>
    <includes id="RevoluteJoint_8hpp" name="RevoluteJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RevoluteJoint.hpp</includes>
    <includes id="PrismaticJoint_8hpp" name="PrismaticJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PrismaticJoint.hpp</includes>
    <includes id="PulleyJoint_8hpp" name="PulleyJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PulleyJoint.hpp</includes>
    <includes id="GearJoint_8hpp" name="GearJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/GearJoint.hpp</includes>
    <includes id="WeldJoint_8hpp" name="WeldJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WeldJoint.hpp</includes>
    <includes id="FrictionJoint_8hpp" name="FrictionJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/FrictionJoint.hpp</includes>
    <includes id="RopeJoint_8hpp" name="RopeJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RopeJoint.hpp</includes>
    <includes id="MotorJoint_8hpp" name="MotorJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/MotorJoint.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">PlayRho/Dynamics/World.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e526de13d058239de088ab752f62c21</anchor>
      <arglist>(const Joint &amp;j) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab9bed9fa175445dc6ef21428cb2ee4af</anchor>
      <arglist>(Joint &amp;j) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a06956449699a714a65070ea4f4e497c7</anchor>
      <arglist>(const Joint *joint)</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraintPtr &amp;</type>
      <name>At</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab34b64fa235fd3c272070cc1a302c05a</anchor>
      <arglist>(std::unordered_map&lt; const Body *, BodyConstraint * &gt; &amp;container, const Body *key)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ToString</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2c3c85ebcd0be387ec9fea9294e9737</anchor>
      <arglist>(Joint::LimitState val) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Joint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>Joint_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="class">playrho::d2::Joint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>BodyConstraint *</type>
      <name>BodyConstraintPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50e80db928f35a37c5b1aee4ec1979d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const Body *, BodyConstraintPtr &gt;</type>
      <name>BodyConstraintPair</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14769e91979b69b60ba8736e0199707c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; const Body *, BodyConstraint * &gt;</type>
      <name>BodyConstraintsMap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1b9d3ad35dbb5bc7c6be00a55c88e220</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e526de13d058239de088ab752f62c21</anchor>
      <arglist>(const Joint &amp;j) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab9bed9fa175445dc6ef21428cb2ee4af</anchor>
      <arglist>(Joint &amp;j) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a06956449699a714a65070ea4f4e497c7</anchor>
      <arglist>(const Joint *joint)</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraintPtr &amp;</type>
      <name>At</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab34b64fa235fd3c272070cc1a302c05a</anchor>
      <arglist>(std::unordered_map&lt; const Body *, BodyConstraint * &gt; &amp;container, const Body *key)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ToString</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2c3c85ebcd0be387ec9fea9294e9737</anchor>
      <arglist>(Joint::LimitState val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IncMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac5b23de94ed67d327fbbb3908d3235fb</anchor>
      <arglist>(T &amp;j, AngularVelocity delta)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>JointConf_8cpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaae24e0e3eadefda8d4145490e1c49ab</anchor>
      <arglist>(JointConf &amp;def, const Joint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>JointConf_8hpp.html</filename>
    <includes id="JointType_8hpp" name="JointType.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointType.hpp</includes>
    <class kind="struct">playrho::d2::JointConf</class>
    <class kind="struct">playrho::d2::JointBuilder</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaae24e0e3eadefda8d4145490e1c49ab</anchor>
      <arglist>(JointConf &amp;def, const Joint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointKey.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>JointKey_8cpp.html</filename>
    <includes id="JointKey_8hpp" name="JointKey.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointKey.hpp</includes>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>JointKey</type>
      <name>GetJointKey</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad650bf705b17c0eea9396299f6ec4dc6</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointKey.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>JointKey_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="class">playrho::d2::JointKey</class>
    <class kind="struct">std::less&lt; playrho::d2::JointKey &gt;</class>
    <class kind="struct">std::equal_to&lt; playrho::d2::JointKey &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>JointKey</type>
      <name>GetJointKey</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad650bf705b17c0eea9396299f6ec4dc6</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR int</type>
      <name>Compare</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c91ee07f0908892b58f5c1240ca8756</anchor>
      <arglist>(const JointKey &amp;lhs, const JointKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsFor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a050555233768cc04b61249789df08fd9</anchor>
      <arglist>(const JointKey key, const Body *body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Joint *</type>
      <name>GetJointPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac09a4035f44e4510a2e1e8b2c3b23014</anchor>
      <arglist>(std::pair&lt; JointKey, Joint * &gt; value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointType.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>JointType_8cpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="TypeJointVisitor_8hpp" name="TypeJointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/TypeJointVisitor.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>JointType</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab274cbc54f178cbd8236401727296dcf</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ToString</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af84e52fdf9a9b10e6363886f26235828</anchor>
      <arglist>(JointType type) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointType.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>JointType_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">PlayRho/Defines.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="enumeration">
      <type></type>
      <name>JointType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a821ab41a0261229ecaa65eb297ebb5c7</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a358561ac4d41f41d479b7c54b19b639e">Revolute</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a35fa8acd1b8b1beb23e6c2e24313570c">Prismatic</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a0aa6f4210bf373c95eda00232e93cd98">Distance</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7aba41903d01ed39b1b98768512c8e65f5">Pulley</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7ac41a31890959544c6523af684561abe5">Target</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7afb845762a66c26782f477febab5344dc">Gear</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7aa5df60ef4fc4447353769d66661d2229">Wheel</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a768bf199aed2d6ea5cd5d27017978530">Weld</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a6513892a7d1f1a327b2d4de2b8f69b89">Friction</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7aa3a77296cc85eb0c3175a09c0f7c3e60">Rope</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7ab33538179f5661a86cbe327a1793e199">Motor</enumvalue>
    </member>
    <member kind="function">
      <type>JointType</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab274cbc54f178cbd8236401727296dcf</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ToString</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af84e52fdf9a9b10e6363886f26235828</anchor>
      <arglist>(JointType type) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointVisitor.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>JointVisitor_8hpp.html</filename>
    <class kind="class">playrho::d2::JointVisitor</class>
    <class kind="class">playrho::d2::ConstJointVisitor</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>MotorJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>MotorJoint_8cpp.html</filename>
    <includes id="MotorJoint_8hpp" name="MotorJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/MotorJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>MotorJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>MotorJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="MotorJointConf_8hpp" name="MotorJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/MotorJointConf.hpp</includes>
    <class kind="class">playrho::d2::MotorJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>MotorJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>MotorJointConf_8cpp.html</filename>
    <includes id="MotorJointConf_8hpp" name="MotorJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/MotorJointConf.hpp</includes>
    <includes id="MotorJoint_8hpp" name="MotorJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/MotorJoint.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3d3e840a6937715846380ef07fcf7b68</anchor>
      <arglist>(const MotorJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MotorJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>MotorJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::MotorJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3d3e840a6937715846380ef07fcf7b68</anchor>
      <arglist>(const MotorJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrismaticJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>PrismaticJoint_8cpp.html</filename>
    <includes id="PrismaticJoint_8hpp" name="PrismaticJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PrismaticJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="ContactSolver_8hpp" name="ContactSolver.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactSolver.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5a7670d3ce160acd59649d8fa877ae85</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcd27abba8be9fe2f9c2e02fa2bbcd86</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrismaticJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>PrismaticJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="PrismaticJointConf_8hpp" name="PrismaticJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PrismaticJointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <class kind="class">playrho::d2::PrismaticJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5a7670d3ce160acd59649d8fa877ae85</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcd27abba8be9fe2f9c2e02fa2bbcd86</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00adda0f4423a7889aa94e49ed5b561a</anchor>
      <arglist>(const PrismaticJoint &amp;joint, Frequency inv_dt) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrismaticJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>PrismaticJointConf_8cpp.html</filename>
    <includes id="PrismaticJointConf_8hpp" name="PrismaticJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PrismaticJointConf.hpp</includes>
    <includes id="PrismaticJoint_8hpp" name="PrismaticJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PrismaticJoint.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef2b20cbcd83c2314aae9974da396826</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrismaticJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>PrismaticJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::PrismaticJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef2b20cbcd83c2314aae9974da396826</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PulleyJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>PulleyJoint_8cpp.html</filename>
    <includes id="PulleyJoint_8hpp" name="PulleyJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PulleyJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="ContactSolver_8hpp" name="ContactSolver.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactSolver.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14a941545584e7cdd988f35be8cc0524</anchor>
      <arglist>(const PulleyJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5523513c7bf6104e006be40abd13289</anchor>
      <arglist>(const PulleyJoint &amp;joint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PulleyJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>PulleyJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="PulleyJointConf_8hpp" name="PulleyJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PulleyJointConf.hpp</includes>
    <class kind="class">playrho::d2::PulleyJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14a941545584e7cdd988f35be8cc0524</anchor>
      <arglist>(const PulleyJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5523513c7bf6104e006be40abd13289</anchor>
      <arglist>(const PulleyJoint &amp;joint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PulleyJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>PulleyJointConf_8cpp.html</filename>
    <includes id="PulleyJointConf_8hpp" name="PulleyJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PulleyJointConf.hpp</includes>
    <includes id="PulleyJoint_8hpp" name="PulleyJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PulleyJoint.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73d8424fa90990867932b237da9006b9</anchor>
      <arglist>(const PulleyJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PulleyJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>PulleyJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::PulleyJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73d8424fa90990867932b237da9006b9</anchor>
      <arglist>(const PulleyJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RevoluteJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>RevoluteJoint_8cpp.html</filename>
    <includes id="RevoluteJoint_8hpp" name="RevoluteJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RevoluteJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="ContactSolver_8hpp" name="ContactSolver.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactSolver.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Angle</type>
      <name>GetJointAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1a4aed49a820640ab3902fcad07bb14f</anchor>
      <arglist>(const RevoluteJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a90728baa90a0569f4e7a0b218905d39f</anchor>
      <arglist>(const RevoluteJoint &amp;joint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RevoluteJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>RevoluteJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="RevoluteJointConf_8hpp" name="RevoluteJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RevoluteJointConf.hpp</includes>
    <class kind="class">playrho::d2::RevoluteJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Angle</type>
      <name>GetJointAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1a4aed49a820640ab3902fcad07bb14f</anchor>
      <arglist>(const RevoluteJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a90728baa90a0569f4e7a0b218905d39f</anchor>
      <arglist>(const RevoluteJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a595b857943513c1b14ed528dbd05a094</anchor>
      <arglist>(const RevoluteJoint &amp;joint, Frequency inv_dt) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RevoluteJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>RevoluteJointConf_8cpp.html</filename>
    <includes id="RevoluteJointConf_8hpp" name="RevoluteJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RevoluteJointConf.hpp</includes>
    <includes id="RevoluteJoint_8hpp" name="RevoluteJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RevoluteJoint.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada7cb792bed88f18a0225923262d5268</anchor>
      <arglist>(const RevoluteJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RevoluteJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>RevoluteJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::RevoluteJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada7cb792bed88f18a0225923262d5268</anchor>
      <arglist>(const RevoluteJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RopeJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>RopeJoint_8cpp.html</filename>
    <includes id="RopeJoint_8hpp" name="RopeJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RopeJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="ContactSolver_8hpp" name="ContactSolver.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactSolver.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>RopeJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>RopeJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="RopeJointConf_8hpp" name="RopeJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RopeJointConf.hpp</includes>
    <class kind="class">playrho::d2::RopeJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>RopeJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>RopeJointConf_8cpp.html</filename>
    <includes id="RopeJointConf_8hpp" name="RopeJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RopeJointConf.hpp</includes>
    <includes id="RopeJoint_8hpp" name="RopeJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RopeJoint.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>RopeJointConf</type>
      <name>GetRopeJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32c2f5ba2c9becb7db0c7264d96822e1</anchor>
      <arglist>(const RopeJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RopeJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>RopeJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::RopeJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>RopeJointConf</type>
      <name>GetRopeJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32c2f5ba2c9becb7db0c7264d96822e1</anchor>
      <arglist>(const RopeJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TargetJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>TargetJoint_8cpp.html</filename>
    <includes id="TargetJoint_8hpp" name="TargetJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/TargetJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>TargetJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>TargetJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="TargetJointConf_8hpp" name="TargetJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/TargetJointConf.hpp</includes>
    <class kind="class">playrho::d2::TargetJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>TargetJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>TargetJointConf_8cpp.html</filename>
    <includes id="TargetJointConf_8hpp" name="TargetJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/TargetJointConf.hpp</includes>
    <includes id="TargetJoint_8hpp" name="TargetJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/TargetJoint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>TargetJointConf</type>
      <name>GetTargetJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad692b79cfa17d64bf31a489e91d2695c</anchor>
      <arglist>(const TargetJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TargetJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>TargetJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::TargetJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>TargetJointConf</type>
      <name>GetTargetJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad692b79cfa17d64bf31a489e91d2695c</anchor>
      <arglist>(const TargetJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeJointVisitor.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>TypeJointVisitor_8hpp.html</filename>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="JointType_8hpp" name="JointType.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointType.hpp</includes>
    <includes id="OptionalValue_8hpp" name="OptionalValue.hpp" local="no" imported="no">PlayRho/Common/OptionalValue.hpp</includes>
    <class kind="class">playrho::d2::TypeJointVisitor</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>WeldJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>WeldJoint_8cpp.html</filename>
    <includes id="WeldJoint_8hpp" name="WeldJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WeldJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="ContactSolver_8hpp" name="ContactSolver.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactSolver.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>WeldJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>WeldJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="WeldJointConf_8hpp" name="WeldJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WeldJointConf.hpp</includes>
    <class kind="class">playrho::d2::WeldJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>WeldJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>WeldJointConf_8cpp.html</filename>
    <includes id="WeldJointConf_8hpp" name="WeldJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WeldJointConf.hpp</includes>
    <includes id="WeldJoint_8hpp" name="WeldJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WeldJoint.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8b3527a6238410941c6f6e5bae17686f</anchor>
      <arglist>(const WeldJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WeldJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>WeldJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::WeldJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8b3527a6238410941c6f6e5bae17686f</anchor>
      <arglist>(const WeldJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WheelJoint.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>WheelJoint_8cpp.html</filename>
    <includes id="WheelJoint_8hpp" name="WheelJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WheelJoint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="ContactSolver_8hpp" name="ContactSolver.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactSolver.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/BodyConstraint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9c4508d7e8e6bef6a676b0bc63200273</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac300fea7a4528e80285ab4b49109ef41</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WheelJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>WheelJoint_8hpp.html</filename>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="WheelJointConf_8hpp" name="WheelJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WheelJointConf.hpp</includes>
    <class kind="class">playrho::d2::WheelJoint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9c4508d7e8e6bef6a676b0bc63200273</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac300fea7a4528e80285ab4b49109ef41</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4a7bf291d119394a37dcccae915a2d20</anchor>
      <arglist>(const WheelJoint &amp;joint, Frequency inv_dt) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WheelJointConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>WheelJointConf_8cpp.html</filename>
    <includes id="WheelJointConf_8hpp" name="WheelJointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WheelJointConf.hpp</includes>
    <includes id="WheelJoint_8hpp" name="WheelJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WheelJoint.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a58ab4da29b2f9b4144dbbdd66328b2</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WheelJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/Joints/</path>
    <filename>WheelJointConf_8hpp.html</filename>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointConf.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <class kind="struct">playrho::d2::WheelJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a58ab4da29b2f9b4144dbbdd66328b2</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MovementConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>MovementConf_8cpp.html</filename>
    <includes id="MovementConf_8hpp" name="MovementConf.hpp" local="no" imported="no">PlayRho/Dynamics/MovementConf.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>MovementConf</type>
      <name>GetMovementConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9f5227d01d6f7c75ac2399c3da7b5572</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MovementConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>MovementConf_8hpp.html</filename>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">PlayRho/Common/Units.hpp</includes>
    <class kind="struct">playrho::MovementConf</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>MovementConf</type>
      <name>GetMovementConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9f5227d01d6f7c75ac2399c3da7b5572</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StepConf.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>StepConf_8cpp.html</filename>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>bool</type>
      <name>IsMaxTranslationWithinTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a05d21c386ca6d39d5cc35cbad350a8c9</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StepConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>StepConf_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <class kind="class">playrho::StepConf</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxRegLinearCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a396f543b42eadf60ef9e730edc77912c</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMaxTranslationWithinTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a05d21c386ca6d39d5cc35cbad350a8c9</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StepStats.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>StepStats_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="struct">playrho::PreStepStats</class>
    <class kind="struct">playrho::RegStepStats</class>
    <class kind="struct">playrho::ToiStepStats</class>
    <class kind="struct">playrho::StepStats</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>World.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>World_8cpp.html</filename>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">PlayRho/Dynamics/World.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="BodyConf_8hpp" name="BodyConf.hpp" local="no" imported="no">PlayRho/Dynamics/BodyConf.hpp</includes>
    <includes id="BodyAtty_8hpp" name="BodyAtty.hpp" local="no" imported="no">PlayRho/Dynamics/BodyAtty.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="FixtureAtty_8hpp" name="FixtureAtty.hpp" local="no" imported="no">PlayRho/Dynamics/FixtureAtty.hpp</includes>
    <includes id="FixtureProxy_8hpp" name="FixtureProxy.hpp" local="no" imported="no">PlayRho/Dynamics/FixtureProxy.hpp</includes>
    <includes id="Island_8hpp" name="Island.hpp" local="no" imported="no">PlayRho/Dynamics/Island.hpp</includes>
    <includes id="JointAtty_8hpp" name="JointAtty.hpp" local="no" imported="no">PlayRho/Dynamics/JointAtty.hpp</includes>
    <includes id="ContactAtty_8hpp" name="ContactAtty.hpp" local="no" imported="no">PlayRho/Dynamics/ContactAtty.hpp</includes>
    <includes id="MovementConf_8hpp" name="MovementConf.hpp" local="no" imported="no">PlayRho/Dynamics/MovementConf.hpp</includes>
    <includes id="ContactImpulsesList_8hpp" name="ContactImpulsesList.hpp" local="no" imported="no">PlayRho/Dynamics/ContactImpulsesList.hpp</includes>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/Joint.hpp</includes>
    <includes id="JointVisitor_8hpp" name="JointVisitor.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/JointVisitor.hpp</includes>
    <includes id="RevoluteJoint_8hpp" name="RevoluteJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RevoluteJoint.hpp</includes>
    <includes id="PrismaticJoint_8hpp" name="PrismaticJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PrismaticJoint.hpp</includes>
    <includes id="DistanceJoint_8hpp" name="DistanceJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/DistanceJoint.hpp</includes>
    <includes id="PulleyJoint_8hpp" name="PulleyJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PulleyJoint.hpp</includes>
    <includes id="TargetJoint_8hpp" name="TargetJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/TargetJoint.hpp</includes>
    <includes id="GearJoint_8hpp" name="GearJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/GearJoint.hpp</includes>
    <includes id="WheelJoint_8hpp" name="WheelJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WheelJoint.hpp</includes>
    <includes id="WeldJoint_8hpp" name="WeldJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WeldJoint.hpp</includes>
    <includes id="FrictionJoint_8hpp" name="FrictionJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/FrictionJoint.hpp</includes>
    <includes id="RopeJoint_8hpp" name="RopeJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RopeJoint.hpp</includes>
    <includes id="MotorJoint_8hpp" name="MotorJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/MotorJoint.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <includes id="ContactSolver_8hpp" name="ContactSolver.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactSolver.hpp</includes>
    <includes id="VelocityConstraint_8hpp" name="VelocityConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/VelocityConstraint.hpp</includes>
    <includes id="PositionConstraint_8hpp" name="PositionConstraint.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/PositionConstraint.hpp</includes>
    <includes id="WorldManifold_8hpp" name="WorldManifold.hpp" local="no" imported="no">PlayRho/Collision/WorldManifold.hpp</includes>
    <includes id="TimeOfImpact_8hpp" name="TimeOfImpact.hpp" local="no" imported="no">PlayRho/Collision/TimeOfImpact.hpp</includes>
    <includes id="RayCastOutput_8hpp" name="RayCastOutput.hpp" local="no" imported="no">PlayRho/Collision/RayCastOutput.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="LengthError_8hpp" name="LengthError.hpp" local="no" imported="no">PlayRho/Common/LengthError.hpp</includes>
    <includes id="DynamicMemory_8hpp" name="DynamicMemory.hpp" local="no" imported="no">PlayRho/Common/DynamicMemory.hpp</includes>
    <includes id="FlagGuard_8hpp" name="FlagGuard.hpp" local="no" imported="no">PlayRho/Common/FlagGuard.hpp</includes>
    <includes id="WrongState_8hpp" name="WrongState.hpp" local="no" imported="no">PlayRho/Common/WrongState.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PLAYRHO_MAGIC</name>
      <anchorfile>World_8cpp.html</anchorfile>
      <anchor>adb678fb8836c3b571175dd4ef5323fe3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="typedef">
      <type>Body *</type>
      <name>BodyPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab744691d00ccc49ae8c4c6e54e826eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const Body *const, BodyConstraint * &gt;</type>
      <name>BodyConstraintsPair</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7e60d08c428f194dbc76152a4617d9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; BodyConstraint &gt;</type>
      <name>BodyConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a58893cfe2113f284d5b33f56ab16b9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PositionConstraint &gt;</type>
      <name>PositionConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5b277cfe94a59545766adb762e7c10d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; VelocityConstraint &gt;</type>
      <name>VelocityConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a675cd1218b4df675b34193bd55a6fd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a035ee60a3274619546a2cee7b982b894</anchor>
      <arglist>(World &amp;world, Time delta, TimestepIters velocityIterations=8, TimestepIters positionIterations=3)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetTouchingCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af8aabfb6390fed1c549e81700b0cd80e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetFixtureCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad07495876f7627e4c0b347fd08ce5346</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetShapeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a16741ddd7414c860451f4b6ba92d7bf4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetAwakeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0812de1607b6656927bc2ad724f1d7c3</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1539463268cf6db572823eb1a195dc70</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad85bb4dfbf060d7d28668e4bc2d73a10</anchor>
      <arglist>(World &amp;world, Acceleration acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab9dc75916d003478c7004172110b58e2</anchor>
      <arglist>(World &amp;world, LinearAcceleration2 acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>FindClosestBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd5009f0701e56be66936edcd9308111</anchor>
      <arglist>(const World &amp;world, Length2 location) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RegStepStats &amp;</type>
      <name>Update</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9b942aee8449be45b89aea3b870ad76b</anchor>
      <arglist>(RegStepStats &amp;lhs, const IslandStats &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>World.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>World_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="Range_8hpp" name="Range.hpp" local="no" imported="no">PlayRho/Common/Range.hpp</includes>
    <includes id="WorldConf_8hpp" name="WorldConf.hpp" local="no" imported="no">PlayRho/Dynamics/WorldConf.hpp</includes>
    <includes id="BodyConf_8hpp" name="BodyConf.hpp" local="no" imported="no">PlayRho/Dynamics/BodyConf.hpp</includes>
    <includes id="BodyAtty_8hpp" name="BodyAtty.hpp" local="no" imported="no">PlayRho/Dynamics/BodyAtty.hpp</includes>
    <includes id="FixtureConf_8hpp" name="FixtureConf.hpp" local="no" imported="no">PlayRho/Dynamics/FixtureConf.hpp</includes>
    <includes id="WorldCallbacks_8hpp" name="WorldCallbacks.hpp" local="no" imported="no">PlayRho/Dynamics/WorldCallbacks.hpp</includes>
    <includes id="StepStats_8hpp" name="StepStats.hpp" local="no" imported="no">PlayRho/Dynamics/StepStats.hpp</includes>
    <includes id="DynamicTree_8hpp" name="DynamicTree.hpp" local="no" imported="no">PlayRho/Collision/DynamicTree.hpp</includes>
    <includes id="ContactKey_8hpp" name="ContactKey.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/ContactKey.hpp</includes>
    <includes id="ContactAtty_8hpp" name="ContactAtty.hpp" local="no" imported="no">PlayRho/Dynamics/ContactAtty.hpp</includes>
    <includes id="JointAtty_8hpp" name="JointAtty.hpp" local="no" imported="no">PlayRho/Dynamics/JointAtty.hpp</includes>
    <includes id="IslandStats_8hpp" name="IslandStats.hpp" local="no" imported="no">PlayRho/Dynamics/IslandStats.hpp</includes>
    <class kind="class">playrho::d2::World</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54933e742508cac5c0b219c653c67674</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8902de592d92cefc72d2e984d591a27d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7b6c00fbd4fc40a4957bd082c9437b4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetTouchingCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af8aabfb6390fed1c549e81700b0cd80e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a035ee60a3274619546a2cee7b982b894</anchor>
      <arglist>(World &amp;world, Time delta, TimestepIters velocityIterations=8, TimestepIters positionIterations=3)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetFixtureCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad07495876f7627e4c0b347fd08ce5346</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetShapeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a16741ddd7414c860451f4b6ba92d7bf4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetAwakeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0812de1607b6656927bc2ad724f1d7c3</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1539463268cf6db572823eb1a195dc70</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5c6e8e38d0d92d2c59fb4235bda2c2b3</anchor>
      <arglist>(World &amp;world, F fn) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad85bb4dfbf060d7d28668e4bc2d73a10</anchor>
      <arglist>(World &amp;world, Acceleration acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab9dc75916d003478c7004172110b58e2</anchor>
      <arglist>(World &amp;world, LinearAcceleration2 acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearForces</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa8a757a3ee66fa157cbf1ffafdf556d4</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>FindClosestBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd5009f0701e56be66936edcd9308111</anchor>
      <arglist>(const World &amp;world, Length2 location) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RegStepStats &amp;</type>
      <name>Update</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9b942aee8449be45b89aea3b870ad76b</anchor>
      <arglist>(RegStepStats &amp;lhs, const IslandStats &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldAtty.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>WorldAtty_8hpp.html</filename>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">PlayRho/Dynamics/World.hpp</includes>
    <class kind="class">playrho::d2::WorldAtty</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>WorldCallbacks.cpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>WorldCallbacks_8cpp.html</filename>
    <includes id="WorldCallbacks_8hpp" name="WorldCallbacks.hpp" local="no" imported="no">PlayRho/Dynamics/WorldCallbacks.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>WorldCallbacks.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>WorldCallbacks_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <class kind="class">playrho::d2::DestructionListener</class>
    <class kind="class">playrho::d2::ContactListener</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>WorldConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/Dynamics/</path>
    <filename>WorldConf_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">PlayRho/Common/Math.hpp</includes>
    <includes id="BoundedValue_8hpp" name="BoundedValue.hpp" local="no" imported="no">PlayRho/Common/BoundedValue.hpp</includes>
    <class kind="struct">playrho::d2::WorldConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WorldConf</type>
      <name>GetDefaultWorldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad1b49affcbf8a783155380873e8398a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PlayRho.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/PlayRho/</path>
    <filename>PlayRho_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">PlayRho/Common/Settings.hpp</includes>
    <includes id="DiskShapeConf_8hpp" name="DiskShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/DiskShapeConf.hpp</includes>
    <includes id="EdgeShapeConf_8hpp" name="EdgeShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/EdgeShapeConf.hpp</includes>
    <includes id="ChainShapeConf_8hpp" name="ChainShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/ChainShapeConf.hpp</includes>
    <includes id="PolygonShapeConf_8hpp" name="PolygonShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/PolygonShapeConf.hpp</includes>
    <includes id="MultiShapeConf_8hpp" name="MultiShapeConf.hpp" local="no" imported="no">PlayRho/Collision/Shapes/MultiShapeConf.hpp</includes>
    <includes id="Collision_8hpp" name="Collision.hpp" local="no" imported="no">PlayRho/Collision/Collision.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">PlayRho/Collision/Manifold.hpp</includes>
    <includes id="WorldManifold_8hpp" name="WorldManifold.hpp" local="no" imported="no">PlayRho/Collision/WorldManifold.hpp</includes>
    <includes id="Distance_8hpp" name="Distance.hpp" local="no" imported="no">PlayRho/Collision/Distance.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">PlayRho/Collision/DistanceProxy.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">PlayRho/Dynamics/Body.hpp</includes>
    <includes id="BodyConf_8hpp" name="BodyConf.hpp" local="no" imported="no">PlayRho/Dynamics/BodyConf.hpp</includes>
    <includes id="Fixture_8hpp" name="Fixture.hpp" local="no" imported="no">PlayRho/Dynamics/Fixture.hpp</includes>
    <includes id="WorldCallbacks_8hpp" name="WorldCallbacks.hpp" local="no" imported="no">PlayRho/Dynamics/WorldCallbacks.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">PlayRho/Dynamics/StepConf.hpp</includes>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">PlayRho/Dynamics/World.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">PlayRho/Dynamics/Contacts/Contact.hpp</includes>
    <includes id="DistanceJoint_8hpp" name="DistanceJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/DistanceJoint.hpp</includes>
    <includes id="FrictionJoint_8hpp" name="FrictionJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/FrictionJoint.hpp</includes>
    <includes id="GearJoint_8hpp" name="GearJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/GearJoint.hpp</includes>
    <includes id="MotorJoint_8hpp" name="MotorJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/MotorJoint.hpp</includes>
    <includes id="TargetJoint_8hpp" name="TargetJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/TargetJoint.hpp</includes>
    <includes id="PrismaticJoint_8hpp" name="PrismaticJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PrismaticJoint.hpp</includes>
    <includes id="PulleyJoint_8hpp" name="PulleyJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/PulleyJoint.hpp</includes>
    <includes id="RevoluteJoint_8hpp" name="RevoluteJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RevoluteJoint.hpp</includes>
    <includes id="RopeJoint_8hpp" name="RopeJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/RopeJoint.hpp</includes>
    <includes id="WeldJoint_8hpp" name="WeldJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WeldJoint.hpp</includes>
    <includes id="WheelJoint_8hpp" name="WheelJoint.hpp" local="no" imported="no">PlayRho/Dynamics/Joints/WheelJoint.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::AABB</name>
    <filename>structplayrho_1_1detail_1_1AABB.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>Vector&lt; Length, N &gt;</type>
      <name>Location</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a426297e1ee24415f28a18264c827a590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ae56bf74c7c6ada3910f843198f9a1f36</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ad36495bec6126e37f95ff7e1cb485186</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LengthInterval &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a43f240a6a59927021b81e8ac5fecdfc0</anchor>
      <arglist>(const Location p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>abb445c2c71af0d9e228ee4097ffaf293</anchor>
      <arglist>(const Location a, const Location b) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>LengthInterval</type>
      <name>ranges</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5a73ebcc0bfb844da97b93f9b9d85b6f</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a90ccf5a25dfba2e91603cb02d94b2301</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ad3afe379aece13ee20c7581aafcdfaeb</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>TestOverlap</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5accaf2fe5186e02ddb93f8c07887c54</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ae45568c5386eb61b893e75f791c79d8d</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a69db919dd0fd89175d3e6386508e0d87</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa8268e1d1322b4a65a62f9638e11fb04</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>Contains</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a939e3a96029dde080735ecb4da9260aa</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a4ab5887876bf8379833a7ddc5901a207</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a7858f1f9664f0c2512cf00969b081217</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a48a0c68e2b2f594072cf52c26ccdabdc</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a416c483d73eaf2c586ed185aeaff8af9</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ada22d3291107cc2aaa670309628fa11f</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aaeea3789c48130a588c67d49aa8f6a3a</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a0f52be70dfa911205c593eb82dc69a66</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3903c09198eb0937977d3e8037e04f0a</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a4cdb6dbe09a816784ce7c171e69cb5e7</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>GetPerimeter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a318a2bfc1d31818063f97d7e7c07b8c9</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ab7dc14be3facbcb651c0c7595f7f569a</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AABB&lt; 2 &gt;</name>
    <filename>structplayrho_1_1detail_1_1AABB.html</filename>
    <member kind="typedef">
      <type>Vector&lt; Length, N &gt;</type>
      <name>Location</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a426297e1ee24415f28a18264c827a590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ae56bf74c7c6ada3910f843198f9a1f36</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ad36495bec6126e37f95ff7e1cb485186</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LengthInterval &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a43f240a6a59927021b81e8ac5fecdfc0</anchor>
      <arglist>(const Location p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>abb445c2c71af0d9e228ee4097ffaf293</anchor>
      <arglist>(const Location a, const Location b) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>LengthInterval</type>
      <name>ranges</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5a73ebcc0bfb844da97b93f9b9d85b6f</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a90ccf5a25dfba2e91603cb02d94b2301</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ad3afe379aece13ee20c7581aafcdfaeb</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>TestOverlap</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5accaf2fe5186e02ddb93f8c07887c54</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ae45568c5386eb61b893e75f791c79d8d</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a69db919dd0fd89175d3e6386508e0d87</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa8268e1d1322b4a65a62f9638e11fb04</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>Contains</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a939e3a96029dde080735ecb4da9260aa</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a4ab5887876bf8379833a7ddc5901a207</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a7858f1f9664f0c2512cf00969b081217</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a48a0c68e2b2f594072cf52c26ccdabdc</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a416c483d73eaf2c586ed185aeaff8af9</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ada22d3291107cc2aaa670309628fa11f</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aaeea3789c48130a588c67d49aa8f6a3a</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a0f52be70dfa911205c593eb82dc69a66</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3903c09198eb0937977d3e8037e04f0a</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a4cdb6dbe09a816784ce7c171e69cb5e7</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>GetPerimeter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a318a2bfc1d31818063f97d7e7c07b8c9</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ab7dc14be3facbcb651c0c7595f7f569a</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Acceleration</name>
    <filename>structplayrho_1_1d2_1_1Acceleration.html</filename>
    <member kind="variable">
      <type>LinearAcceleration2</type>
      <name>linear</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>aede18b49c56f6f4612c1bbb601ab5e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularAcceleration</type>
      <name>angular</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>ac9389483ab188239f61e5d0d5a8b672c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>ab580741d7e177657016617999174a607</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a7cbfc9f4cf79c8462a0f0ec5d24ee469</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>ab39ce1afbec15c12a32b4ab3c5f95685</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>aa071c183885a1e8082e73eaa1ec522c8</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a04fa1505a85f9ff5e51889c8c50d3172</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a951dfdd3b5b6bb8e4bfd734f7b79fd29</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>aef44fe8198db0e5fe1e1780a028b998f</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>aabbaa5056b3fec727549265878b31eca</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>afd4693f700ab51ed9d9a6de06a805bf7</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>ae551c31cd14b89323453a7f04ffa53ab</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a1228567dca4d7060046130510e068348</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>ae0ffb2e2d00a5bca13ac9acaf15682c8</anchor>
      <arglist>(const Real lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a16ff5a957beb5aec86d2c8a668fe5279</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a4c8fbed7839d63cd6665d738de144eb5</anchor>
      <arglist>(const d2::Acceleration &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::AllocatedArray</name>
    <filename>classplayrho_1_1AllocatedArray.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a7922ea8fb80a306a86b003008cb8207c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a11096c45083484b7923b5fb582417971</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type</type>
      <name>const_value_type</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ad4c58287e44fbe5dff42c43459328138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a06b33c73b0f980ad278fddc8edfff64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a90eb0a613e6be348e7b92e4954bdcf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a4f1b6fe5692521af167ac8997d0a246d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ac4dab897d5062562e2d03403320834ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a944940dc6eba07407c8ec39063583353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Deleter</type>
      <name>deleter_type</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ae45cc668488dda80f86798ece5177709</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer</type>
      <name>iterator</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ae8a5566374fda92f6339f092a811c4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_pointer</type>
      <name>const_iterator</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a64ad63e8c7cab9f9a9bd5beb0becfea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>AllocatedArray</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a65b86313747eb8e59e7a16ec771fb1f4</anchor>
      <arglist>(size_type max_size, pointer data, deleter_type deleter=noop_deleter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AllocatedArray</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a341342cabbb7a14b8dc39d0f7024cbfa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllocatedArray</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>aa9dfad992bebfbb56fe32bd7efb3b0e0</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllocatedArray</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a2ce7b150e5f2223b9326698466cd287a</anchor>
      <arglist>(const AllocatedArray &amp;copy)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllocatedArray</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a18c9e023064af41df0f2382562687ed5</anchor>
      <arglist>(AllocatedArray &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ad0542a9abb019b0e5559c68b3769afb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a47b89d9d164f7a220926f56a09807863</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a7d5d907e2e36be1e522c6727ee8c8556</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a8123646afc5f61bbe8f6133ecbdaabd8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a9491c00891d7a2346bcbb49098914963</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a940509a1b53558588529abcf8e625ce9</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>af9e21faf6a718b406e479284f3c0ad24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a92f280d6d8022a3c1e5b0c36a9c87101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a1ff45f28211a17d0d04f8e40aec2a69d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a77dc8701693c182a1207a08f4c7deedf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a8a74fa0e4e9f8a64f51e82c037239a11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a8063bbfbafc1cc43e9a7d2ca1fcd1ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a3540320bd294a745acc8e09858b82d06</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>back</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ac086330d25d5b7b1ae2f9259a03717f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a0adb98ab62d2f4f8723b6aa064015b7f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a31fd406ef91b7ede96757ed17836abf3</anchor>
      <arglist>(const_reference value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a80b6f4c914d29d14715e9fef516ffdea</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::ArrayList</name>
    <filename>classplayrho_1_1ArrayList.html</filename>
    <templarg></templarg>
    <templarg>MAXSIZE</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>SIZE_TYPE</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a4a0c35a082d030d92f764690e732b37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VALUE_TYPE</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a0276dcd7122ecfae3448abb1b559e694</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>af8df8532d007eec85164392f49348636</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a5294f5d27bbabd0ed897275d82f79cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a73cf30a1be6070f8cb00e3bca971aafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a3d78678c4d77afb2c4b69a1e4b452614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a69d1b2c65b59fbe3bdfd41b5270f2009</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayList&lt; Real, MaxSimplexEdges, std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type &gt;</name>
    <filename>classplayrho_1_1ArrayList.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a4a0c35a082d030d92f764690e732b37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a0276dcd7122ecfae3448abb1b559e694</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>af8df8532d007eec85164392f49348636</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a5294f5d27bbabd0ed897275d82f79cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a73cf30a1be6070f8cb00e3bca971aafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a3d78678c4d77afb2c4b69a1e4b452614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a69d1b2c65b59fbe3bdfd41b5270f2009</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayList&lt; SimplexEdge, MaxSimplexEdges, std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type &gt;</name>
    <filename>classplayrho_1_1ArrayList.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a4a0c35a082d030d92f764690e732b37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimplexEdge</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a0276dcd7122ecfae3448abb1b559e694</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>af8df8532d007eec85164392f49348636</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a5294f5d27bbabd0ed897275d82f79cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a73cf30a1be6070f8cb00e3bca971aafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a3d78678c4d77afb2c4b69a1e4b452614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a69d1b2c65b59fbe3bdfd41b5270f2009</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::BaseShapeConf</name>
    <filename>structplayrho_1_1d2_1_1BaseShapeConf.html</filename>
    <member kind="variable">
      <type>NonNegative&lt; Real &gt;</type>
      <name>friction</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a42d4e4d6a9e35758935d3dda2c1272e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Finite&lt; Real &gt;</type>
      <name>restitution</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>ac8ee84f3f378c7b60df0a413b14955a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>density</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>abe78bd0fbe69b87761bc6aa967cf4656</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::BlockAllocator::Block</name>
    <filename>structplayrho_1_1BlockAllocator_1_1Block.html</filename>
    <member kind="variable">
      <type>Block *</type>
      <name>next</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Block.html</anchorfile>
      <anchor>a456ace9ee2ed5e10cd918c50154d8030</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::BlockAllocator</name>
    <filename>classplayrho_1_1BlockAllocator.html</filename>
    <class kind="struct">playrho::BlockAllocator::Block</class>
    <class kind="struct">playrho::BlockAllocator::Chunk</class>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>ae039f1fd9e0cdafe92d108cf5dc3d663</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockAllocator</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a570a71365aae9dcfcdec51595dbb561c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockAllocator</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a6cef07ba848cfabe2dc11b27eac6fb49</anchor>
      <arglist>(const BlockAllocator &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockAllocator</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a8172c45553e06b2475c34e85842aa31a</anchor>
      <arglist>(BlockAllocator &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BlockAllocator</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a65e4e9d5d3241c7488bc094385395605</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>BlockAllocator &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a4c1a78be162d81d5a915d33fffd4bd99</anchor>
      <arglist>(const BlockAllocator &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>BlockAllocator &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a2f4069da97f35158e2a2dff6e59b5088</anchor>
      <arglist>(BlockAllocator &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>abbb25555e5d25ed67a4748136ff7b8ed</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AllocateArray</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a10c24f4502f0aedf3195da11635e241f</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a06536ee49cdb1a8c2f79de7522c8bd33</anchor>
      <arglist>(void *p, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a12d8426f4a31b8ed042b2a62699d04e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetChunkCount</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a8bec3ad25a09721b7e4ec1bac8b4325c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR size_type</type>
      <name>GetMaxBlockSize</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a2845e1a67f12b93c3bd543e72f6655f0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR size_type</type>
      <name>GetChunkArrayIncrement</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a16d1df885149404c0ba18fdc85b3442c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR auto</type>
      <name>ChunkSize</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a5f35fe4ba43f6809984d3467238667f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::BlockDeallocator</name>
    <filename>structplayrho_1_1BlockDeallocator.html</filename>
    <member kind="typedef">
      <type>BlockAllocator::size_type</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>a605c69aa30125de98e51e6ef94df25dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockDeallocator</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>a383de4134f5067e2106442f36b00697f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BlockDeallocator</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>ae281d6d0fb74e1c052b5e6f7f7634df7</anchor>
      <arglist>(BlockAllocator *a, size_type n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>aa73d0ec0e811cdc17fdfabf2ad90f04c</anchor>
      <arglist>(void *p) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>BlockAllocator *</type>
      <name>allocator</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>adc65140a048daae726102b98ef3b7191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>nelem</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>ab0c4e625ef174b6bf21fb072cde901b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Body</name>
    <filename>classplayrho_1_1d2_1_1Body.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Flag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_islandFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a76028f90e36341570f47f0bab6c55fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_awakeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a2d0838d2a70832764fca9f12290e316e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_autoSleepFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1af96fd45879ce62d9185e7fdaf5da305c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_impenetrableFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a9636c5bffb473d210e5b096dba69d13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_fixedRotationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a221d6e987279b06446f29148ea305584</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_enabledFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab642621a09cb53da442bf6c07c735a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_velocityFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a1c6a6996666ee68cb63f0a5574632b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_accelerationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a029de9b5dc46e0aeafb5d4a1d07de68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_massDataDirtyFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab2cc56a0f6625365566461c2ad259885</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Fixture * &gt;</type>
      <name>Fixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a9a5e80674ee7bed8f9dfc11a6c5f1d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Body *, Joint * &gt;</type>
      <name>KeyedJointPtr</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab93fe9c845a96585e7a975f2e75d471d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; KeyedJointPtr &gt;</type>
      <name>Joints</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a657fd78d921a36fffb9f8b918f059042</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; KeyedContactPtr &gt;</type>
      <name>Contacts</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4ba88ece0a09c327f597ffb3262195c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>FlagsType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a14412adef525843359094736776c0cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_islandFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a76028f90e36341570f47f0bab6c55fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_awakeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a2d0838d2a70832764fca9f12290e316e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_autoSleepFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1af96fd45879ce62d9185e7fdaf5da305c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_impenetrableFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a9636c5bffb473d210e5b096dba69d13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_fixedRotationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a221d6e987279b06446f29148ea305584</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_enabledFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab642621a09cb53da442bf6c07c735a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_velocityFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a1c6a6996666ee68cb63f0a5574632b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_accelerationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a029de9b5dc46e0aeafb5d4a1d07de68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_massDataDirtyFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab2cc56a0f6625365566461c2ad259885</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Fixture *</type>
      <name>CreateFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae09b2950d8313278578e73dd39c1bd1a</anchor>
      <arglist>(const Shape &amp;shape, const FixtureConf &amp;def=GetDefaultFixtureConf(), bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aa6a3ced246122751867900d956fd558e</anchor>
      <arglist>(Fixture *fixture, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DestroyFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a78eac4137e56d2f5aa95c73746c4b7aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransform</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a51f40a6566392899980a0ba431e1aa89</anchor>
      <arglist>(Length2 location, Angle angle)</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a6831cb0077f88907a3c4c28ae398515d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a63db5146e976e495518b850c37be060d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Sweep &amp;</type>
      <name>GetSweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a100b4822505143079cde749303494809</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>afc2d114f23cc621756f6e9363bc74f2a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a58fff0c0e51774a2fecec8a6f2bb9e9d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a3e7c5b97ecef8fa4e8ee2bcb0d7aad13</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a60d609b9f5c0a1d568b3fc42d169c428</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a6c21c223175b12cd68cea10484996fb1</anchor>
      <arglist>(const Velocity &amp;velocity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae216d87f0c3ab4660646133f58f3fb30</anchor>
      <arglist>(LinearAcceleration2 linear, AngularAcceleration angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad408734219c952c485b18375b26365aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a6d1817724aad0e2655c16c4721a75d48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a479319dda79903324ef520ae21c7ca56</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a9b477bcd587e43f70e25099c83a5ebf1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a918589968b14732682edf289ad74a030</anchor>
      <arglist>(const MassData &amp;massData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab2dc6bfa388127a5ad2717ff13e4f0f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>afeda1da50f9699c8ee07732c1f554699</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>acd5523b855b544fe285d0fa5a23c3398</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; linearDamping) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad47c053e25acad158bf8651815069de0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a85169a6266e1ecfa2e25ecc12175218a</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; angularDamping) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a70dbc9501cd28a6e486d1de1852b582c</anchor>
      <arglist>(BodyType type)</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a91f44b797b80539941b65a15c2ffee5d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7aedf6b5b4adc6f0ff0c1fc13ec49b0f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4f3ae9fb54ca3fbf1f509327781277b3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBullet</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4ba448b7c602134ebb4582d9156dfdba</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a43a08c5977e1a5a0ebfb823dcf1615bd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a96bfa8ab63b3246ed714573661ea3618</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a71df4118ca3b5056aa4634a70c3b220a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a794c4c1b8c24aedb959c5031a5ecde69</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7821d9464b36b49ddb893ef9c2c262fb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7abc6b8d4f50e3e3e703f53f66ecc035</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>GetUnderActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abc897bc2cda122d02fccdb3c5c11049d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnderActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0a6f3e57e6a9b132f30f3d3f85ca5802</anchor>
      <arglist>(Time value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetUnderActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae6c659ede45cf5fc6659d1942249221d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aa5fe5a45ddd1dad33805f7379870c12a</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae12e0fe1aeb00907e47aba6d4edd0746</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad73e9bd7dbdeaaaa4618cbb06559dd34</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab0fdff8babc197f1a75794e4fb822343</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Fixtures::const_iterator &gt;</type>
      <name>GetFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a500e39f2c0f89fd6e6f0492184fd10db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Fixtures::iterator &gt;</type>
      <name>GetFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ac581669cca6332b38945bd68529aa73a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Joints::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a186cafb3b6dd280a6f2f3018cefb4ef5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Joints::iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>acf46e7d5513505775962c11521266d16</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Contacts::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a163dc94f3a556f214725ecbf079abad2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetUserData</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae5314b06e018981dc39529353d899221</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUserData</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a3445691824058b131e15702a1c01459e</anchor>
      <arglist>(void *data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>World *</type>
      <name>GetWorld</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ac41f85c12fab3406958f628cb8c3efc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ac24b9d27e4778ea7942c89ef793d9eea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlagsType</type>
      <name>GetFlags</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a137e2e62f0ad8b1b21695955fd3b900e</anchor>
      <arglist>(BodyType type) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlagsType</type>
      <name>GetFlags</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>accc993b94d08acd0603cbec51a1d30b4</anchor>
      <arglist>(const BodyConf &amp;bd) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidIslandIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a1139d29fbf1465ffaa580919735a09c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BodyAtty</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a8a01c09dc474a30ae26a4e09d55265df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4c86a617058eada4a474b501f0844b76</anchor>
      <arglist>(const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2e9574d95e6dfa6f32a405cf40ebbf79</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>adcf7fe1ea0d3ef041d4f7847ef5871e4</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>acafaac4ef15f7416f464dff9b19780fa</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a438e172db303ae0ab53263bc6af419ad</anchor>
      <arglist>(Body &amp;body, Acceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>CalcGravitationalAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a532a2a6530a34432d28f6089193b2260</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4834708af29bcc9ae39ebfc2b9f580f6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unawaken</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abdfbff06306e4ecb71f6d4b2136eea7c</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4ec1591eb8ee2f1951d9e8d8e51494f9</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition1</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a77de45b3fab735d0f87a0978a622a9c0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a3c355eb58981b97e5901fa7d04052507</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a20ea58563885aec5eeab46943e526f6a</anchor>
      <arglist>(Body &amp;body, LinearAcceleration2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a9897119656ab5cb35c4babd0a4f9b3a5</anchor>
      <arglist>(Body &amp;body, AngularAcceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7e2df131b907494df3b33f2ca8751529</anchor>
      <arglist>(Body &amp;body, LinearAcceleration2 amount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a8a2c515bee211ab828b8d36ba80dc149</anchor>
      <arglist>(Body &amp;body, Force2 force, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0b21a34b270ecd1ad966a293ba681bc5</anchor>
      <arglist>(Body &amp;body, Force2 force, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForceToCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a88d1ffd34c57bb9737f51f0dc918ea0d</anchor>
      <arglist>(Body &amp;body, Force2 force) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0c8061050b56df681bde8a6bf28aefa2</anchor>
      <arglist>(Body &amp;body, Torque torque) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a9f848e079efd1b4e7d7a926cdb146d0b</anchor>
      <arglist>(Body &amp;body, Torque torque) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a07f50b8133debf454d50f491d196dc24</anchor>
      <arglist>(Body &amp;body, Momentum2 impulse, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5d1467095e23488ca1344a26336aae8f</anchor>
      <arglist>(Body &amp;body, AngularMomentum impulse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetCentripetalForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a6970aff5f3ad80147b55f36902039b4e</anchor>
      <arglist>(const Body &amp;body, Length2 axis)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4c4c855f042444d0122919f8c1559ccb</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>accc0736257251f381353661320af972e</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a3802163b90f631b001eaa0201be419c9</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a306635dbd11f92ad1020a386fce7b7c2</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7c0e7bb0c146372c16ee44661798c473</anchor>
      <arglist>(Body &amp;body, const LinearVelocity2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>acfac2d00a05141d4bcfdd0a3dd443765</anchor>
      <arglist>(Body &amp;body, AngularVelocity omega) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abdbcfc8a43696b1e7136db073fbe09ad</anchor>
      <arglist>(const Body &amp;body, const Length2 localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldVector</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0ccc8fe53ed54beba80db7046ab8ddf0</anchor>
      <arglist>(const Body &amp;body, const Length2 localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7544d24c890820e7f5a6d355c0ad4406</anchor>
      <arglist>(const Body &amp;body, const UnitVec localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab029ce2fdf891e9d4a5705e2c4e0564a</anchor>
      <arglist>(const Body &amp;body, const Length2 worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a560083bf40b9f3936b549e841d8338ba</anchor>
      <arglist>(const Body &amp;body, const UnitVec uv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab7217cc5275bc5d8c2f2407ee20fb958</anchor>
      <arglist>(const Body &amp;body, const Length2 worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a47196aab3f4386da954b565a6a0fce7c</anchor>
      <arglist>(const Body &amp;body, const Length2 localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a82eaa61b6bddf682fe315f09830e2bfc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a18e2ece8e057b22c240cf681aca400b5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab873f18f1e540da43881e7f2dadeb7b1</anchor>
      <arglist>(const Body &amp;body, Time h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2c6a1ec2274053b6d4cdece776faaad4</anchor>
      <arglist>(const Body *body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetFixtureCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2b995406bae81c78866c12b59432a931</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af35644c450c12c8dcbd6cf1a0aa7b75c</anchor>
      <arglist>(Body &amp;body, Angle amount, Length2 worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad233f2c24d1fa985bd80eaa0050d659e</anchor>
      <arglist>(Body &amp;body, Angle amount, Length2 localPoint)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a8a6f694cab71d0db91049dc0908de63f</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a93f21ae0c92245d912cb91a99e756946</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a18d4f68807190fdf745e1b7a6eeeeefc</anchor>
      <arglist>(Body &amp;body, Length2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a200799e930f62a238b7e82bf59d18cdb</anchor>
      <arglist>(Body &amp;body, Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConf</type>
      <name>GetBodyConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0e940544a56fe840424f880106fcd842</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::BodyAtty</name>
    <filename>classplayrho_1_1d2_1_1BodyAtty.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyAtty.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::BodyConf</name>
    <filename>structplayrho_1_1d2_1_1BodyConf.html</filename>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseType</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ac2af87244b6172527a527793ff3614fc</anchor>
      <arglist>(BodyType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseLocation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a452134100531c3c1274fc8ce6df4becd</anchor>
      <arglist>(Length2 l) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a2720d43f257c9bef299f969a22afd801</anchor>
      <arglist>(Angle a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseLinearVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aa64b77942caa276c05e259dd004e9efd</anchor>
      <arglist>(LinearVelocity2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseAngularVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aab6507e3c5f16b71bc1274dc71d30563</anchor>
      <arglist>(AngularVelocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>Use</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ae4e35c42308e0b1b9eb5ffb102f8e088</anchor>
      <arglist>(Position v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>Use</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ab991dc534e6000609dc1198164e26427</anchor>
      <arglist>(Velocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseLinearAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ab74e3b01c0f344b7eea842e391567c46</anchor>
      <arglist>(LinearAcceleration2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseAngularAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a654254b6ede1545437457f8f51b864de</anchor>
      <arglist>(AngularAcceleration v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseLinearDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a4aa22a34543a08aafbd0f2793dc24d0c</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseAngularDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>adfcd23b831709f5a7355636f1174b479</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseUnderActiveTime</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a42dd97402c30665cd430970422b9744c</anchor>
      <arglist>(Time v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseAllowSleep</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ad74f29e466479905aa2af02aa4cbc65e</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseAwake</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aac755c8253c80d97eb81f5f729f40ab7</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseFixedRotation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a4dc47cc1deccec46ce415f2d220a442f</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseBullet</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a876bd48e27a504abb359401e0ae54d86</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseEnabled</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ab175f74fd8eca77ae5c1a2bbb8790d4e</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf &amp;</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a872b364831c324fb9a7d52f39c819992</anchor>
      <arglist>(void *value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>BodyType</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3f1a14b4e932c2e1fa3d78d8b069ec23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>location</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a96d0adc085fd3d0f0f9d37896c463e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angle</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3a3fe86a4a6bb6e255dd0c20bd527a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity2</type>
      <name>linearVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a505089bd57b75722c4b7c2e77738ee98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>angularVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3034b706dd80b92a0f391911daba2679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearAcceleration2</type>
      <name>linearAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aca2c87d68e5476d3c1443a5360fac747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularAcceleration</type>
      <name>angularAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a79881dcf474db656032f5834391c1e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>linearDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a403ac9e5010e1cf2cd831c6e14b26c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>angularDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>acd247e252ae4e8a5ece40382e0b0be49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>underActiveTime</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>af9559f3076e32dc79e9455d07c666b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>allowSleep</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a9ff6df501796f81620a27a612c9cfa8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>awake</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a860f348c00843664f24f9bf42d0ee31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fixedRotation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aaa88fe1ed7c981bef6bafcadde8472d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bullet</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a635dab49119a08c2ddbe1c082c502e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a20ba510bb1a2641244d3cdb27be45a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>userData</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ad306643adb7c2dcabba09f5fe267d09b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf</type>
      <name>GetDefaultBodyConf</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a7a778e88e326f8711cefea4333cef640</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::BodyConstraint</name>
    <filename>classplayrho_1_1d2_1_1BodyConstraint.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxBodies)&gt;::type</type>
      <name>index_type</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a99b1c0964eafd6833fc9c42c236068b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BodyConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a521671f042002534cb1a49e6cc8b04b8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BodyConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a709a4e4effb9b49cd91e456dc7249883</anchor>
      <arglist>(InvMass invMass, InvRotInertia invRotI, Length2 localCenter, Position position, Velocity velocity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a328ec8b7b4d3e950ac42697d7597c61a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>aa4794ccca1702fce9599a9a160737b4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a31da1c05473e3f5dc3d03a4dee43b1ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>aee75c449b34cc293956e72d2d4c0cc66</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>ac67a11b5d917548f54bbf08935f0506c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint &amp;</type>
      <name>SetPosition</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>ac2ab5427fcb2b91bc821d47275f111be</anchor>
      <arglist>(Position value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint &amp;</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a911b6c49a7b561071794b80a437337dd</anchor>
      <arglist>(Velocity value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::BoundedValue</name>
    <filename>classplayrho_1_1BoundedValue.html</filename>
    <templarg></templarg>
    <templarg>lo</templarg>
    <templarg>hi</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a9827d832b667fb6f833f6040686b44bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; T &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a608ca75421cfc6a0b16ab89f7582c528</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a8e023ba963b90f757e173aa665bbfe78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; value_type, lo, hi &gt;</type>
      <name>this_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>aca4179d89e18f9f488f27e46a02088ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a8e34eb68e22e685532d31d331fb296ec</anchor>
      <arglist>(value_type value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a57f65941fe06f26a4529e63097ab4c4b</anchor>
      <arglist>(U value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a2294341bea644f4f80727b7a0592f20e</anchor>
      <arglist>(const this_type &amp;value)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a817a9ec2a65ec4721b8c90a8750d9afa</anchor>
      <arglist>(this_type &amp;&amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>ac8153a6f528b70426c47b3c3fa162716</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a6092e930fa95f3faec0a5e4624e89ccc</anchor>
      <arglist>(const this_type &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a67c94d15b12ca4c3b0be516b2b5f7b5f</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_convertible&lt; U, T &gt;::value, BoundedValue &amp; &gt;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>aaf30d885ae605f3ea91c2466b62b257d</anchor>
      <arglist>(const U &amp;tmpVal)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>abceb5857bd0f9bc21673ce1c3fe36ca8</anchor>
      <arglist>(this_type &amp;&amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a0de984105d547296b20c9bfff013cb55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a140b67d5280bce60598621cd28a97b85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a2ab6857b3f18c08e811b9bc524e5cc7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a851989894bb7ca475c59cf2bd87a2171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR LoValueCheck</type>
      <name>GetLoCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a6bbd853017fc9a87546d06c476f433f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR HiValueCheck</type>
      <name>GetHiCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>af76465a9831bdd48d03e56eb1dec4596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR void</type>
      <name>DoLoCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a96d083d74a76aceb5d54f670137e4928</anchor>
      <arglist>(value_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR void</type>
      <name>DoHiCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>afa04715284482c3d99485c005f1adfcb</anchor>
      <arglist>(value_type value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoundedValue&lt; Angle &gt;</name>
    <filename>classplayrho_1_1BoundedValue.html</filename>
    <member kind="typedef">
      <type>Angle</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a9827d832b667fb6f833f6040686b44bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; Angle &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a608ca75421cfc6a0b16ab89f7582c528</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a8e023ba963b90f757e173aa665bbfe78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; value_type, lo, hi &gt;</type>
      <name>this_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>aca4179d89e18f9f488f27e46a02088ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a8e34eb68e22e685532d31d331fb296ec</anchor>
      <arglist>(value_type value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a57f65941fe06f26a4529e63097ab4c4b</anchor>
      <arglist>(U value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a2294341bea644f4f80727b7a0592f20e</anchor>
      <arglist>(const this_type &amp;value)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a817a9ec2a65ec4721b8c90a8750d9afa</anchor>
      <arglist>(this_type &amp;&amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>ac8153a6f528b70426c47b3c3fa162716</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a6092e930fa95f3faec0a5e4624e89ccc</anchor>
      <arglist>(const this_type &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a67c94d15b12ca4c3b0be516b2b5f7b5f</anchor>
      <arglist>(const Angle &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_convertible&lt; U, Angle &gt;::value, BoundedValue &amp; &gt;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>aaf30d885ae605f3ea91c2466b62b257d</anchor>
      <arglist>(const U &amp;tmpVal)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>abceb5857bd0f9bc21673ce1c3fe36ca8</anchor>
      <arglist>(this_type &amp;&amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a0de984105d547296b20c9bfff013cb55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a140b67d5280bce60598621cd28a97b85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a2ab6857b3f18c08e811b9bc524e5cc7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a851989894bb7ca475c59cf2bd87a2171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR LoValueCheck</type>
      <name>GetLoCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a6bbd853017fc9a87546d06c476f433f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR HiValueCheck</type>
      <name>GetHiCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>af76465a9831bdd48d03e56eb1dec4596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR void</type>
      <name>DoLoCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a96d083d74a76aceb5d54f670137e4928</anchor>
      <arglist>(value_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR void</type>
      <name>DoHiCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>afa04715284482c3d99485c005f1adfcb</anchor>
      <arglist>(value_type value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoundedValue&lt; Length &gt;</name>
    <filename>classplayrho_1_1BoundedValue.html</filename>
    <member kind="typedef">
      <type>Length</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a9827d832b667fb6f833f6040686b44bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; Length &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a608ca75421cfc6a0b16ab89f7582c528</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a8e023ba963b90f757e173aa665bbfe78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; value_type, lo, hi &gt;</type>
      <name>this_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>aca4179d89e18f9f488f27e46a02088ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a8e34eb68e22e685532d31d331fb296ec</anchor>
      <arglist>(value_type value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a57f65941fe06f26a4529e63097ab4c4b</anchor>
      <arglist>(U value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a2294341bea644f4f80727b7a0592f20e</anchor>
      <arglist>(const this_type &amp;value)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a817a9ec2a65ec4721b8c90a8750d9afa</anchor>
      <arglist>(this_type &amp;&amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>ac8153a6f528b70426c47b3c3fa162716</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a6092e930fa95f3faec0a5e4624e89ccc</anchor>
      <arglist>(const this_type &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a67c94d15b12ca4c3b0be516b2b5f7b5f</anchor>
      <arglist>(const Length &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_convertible&lt; U, Length &gt;::value, BoundedValue &amp; &gt;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>aaf30d885ae605f3ea91c2466b62b257d</anchor>
      <arglist>(const U &amp;tmpVal)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>abceb5857bd0f9bc21673ce1c3fe36ca8</anchor>
      <arglist>(this_type &amp;&amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a0de984105d547296b20c9bfff013cb55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a140b67d5280bce60598621cd28a97b85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a2ab6857b3f18c08e811b9bc524e5cc7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a851989894bb7ca475c59cf2bd87a2171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR LoValueCheck</type>
      <name>GetLoCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a6bbd853017fc9a87546d06c476f433f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR HiValueCheck</type>
      <name>GetHiCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>af76465a9831bdd48d03e56eb1dec4596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR void</type>
      <name>DoLoCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a96d083d74a76aceb5d54f670137e4928</anchor>
      <arglist>(value_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR void</type>
      <name>DoHiCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>afa04715284482c3d99485c005f1adfcb</anchor>
      <arglist>(value_type value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoundedValue&lt; Real &gt;</name>
    <filename>classplayrho_1_1BoundedValue.html</filename>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a9827d832b667fb6f833f6040686b44bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; Real &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a608ca75421cfc6a0b16ab89f7582c528</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a8e023ba963b90f757e173aa665bbfe78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; value_type, lo, hi &gt;</type>
      <name>this_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>aca4179d89e18f9f488f27e46a02088ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a8e34eb68e22e685532d31d331fb296ec</anchor>
      <arglist>(value_type value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a57f65941fe06f26a4529e63097ab4c4b</anchor>
      <arglist>(U value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a2294341bea644f4f80727b7a0592f20e</anchor>
      <arglist>(const this_type &amp;value)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a817a9ec2a65ec4721b8c90a8750d9afa</anchor>
      <arglist>(this_type &amp;&amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundedValue</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>ac8153a6f528b70426c47b3c3fa162716</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a6092e930fa95f3faec0a5e4624e89ccc</anchor>
      <arglist>(const this_type &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a67c94d15b12ca4c3b0be516b2b5f7b5f</anchor>
      <arglist>(const Real &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_convertible&lt; U, Real &gt;::value, BoundedValue &amp; &gt;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>aaf30d885ae605f3ea91c2466b62b257d</anchor>
      <arglist>(const U &amp;tmpVal)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BoundedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>abceb5857bd0f9bc21673ce1c3fe36ca8</anchor>
      <arglist>(this_type &amp;&amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a0de984105d547296b20c9bfff013cb55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a140b67d5280bce60598621cd28a97b85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a2ab6857b3f18c08e811b9bc524e5cc7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a851989894bb7ca475c59cf2bd87a2171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR LoValueCheck</type>
      <name>GetLoCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a6bbd853017fc9a87546d06c476f433f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR HiValueCheck</type>
      <name>GetHiCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>af76465a9831bdd48d03e56eb1dec4596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR void</type>
      <name>DoLoCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>a96d083d74a76aceb5d54f670137e4928</anchor>
      <arglist>(value_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR void</type>
      <name>DoHiCheck</name>
      <anchorfile>classplayrho_1_1BoundedValue.html</anchorfile>
      <anchor>afa04715284482c3d99485c005f1adfcb</anchor>
      <arglist>(value_type value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DynamicTree::BranchData</name>
    <filename>structplayrho_1_1d2_1_1DynamicTree_1_1BranchData.html</filename>
    <member kind="variable">
      <type>Size</type>
      <name>child1</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1BranchData.html</anchorfile>
      <anchor>a47b97e472dfc9723c25584dd0ea50dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Size</type>
      <name>child2</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1BranchData.html</anchorfile>
      <anchor>a912c155ebaca55d62bcb18e720cca4d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Simplex::Cache</name>
    <filename>structplayrho_1_1d2_1_1Simplex_1_1Cache.html</filename>
    <member kind="variable">
      <type>Real</type>
      <name>metric</name>
      <anchorfile>structplayrho_1_1d2_1_1Simplex_1_1Cache.html</anchorfile>
      <anchor>a8b4b052c3bbcad4f0459b19da5cd69d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexPair3</type>
      <name>indices</name>
      <anchorfile>structplayrho_1_1d2_1_1Simplex_1_1Cache.html</anchorfile>
      <anchor>a1f737deec07431d60875cb33adc9d5dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ChainShapeConf</name>
    <filename>classplayrho_1_1d2_1_1ChainShapeConf.html</filename>
    <base>ShapeBuilder&lt; ChainShapeConf &gt;</base>
    <member kind="function">
      <type></type>
      <name>ChainShapeConf</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a1327c48b2af72805fb91265982d049f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a497e4a481a8c4a310376c67b446bc40a</anchor>
      <arglist>(std::vector&lt; Length2 &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Add</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a1439b53e9be383d17e914b5924e73bc8</anchor>
      <arglist>(Length2 vertex)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a1a5366856f9ea7551ce1e9cc8fd1ae02</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a93f5443670a216ba6ec1f91503196d87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>aad58b3ff7b02274deaac614b0799aa3a</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a212282d094f3bb26c9182f72eac6319d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>UseVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a9decae5ce2d539ef3c2cf60618147f36</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetVertexCount</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a5e70b4b91eee211bfd66f4f8c35f4694</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertex</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>af93574aab3c319909a163bf47b9c5f3f</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>ad9fc03054ddd0ad4e6b7ef87bb90296b</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>af5c859b445995082575e72afdc0cb2f3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>ae913f960a60acc99531e36bb04a47819</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a0beaec4204c1bbce524ed5d27cff04fc</anchor>
      <arglist>(const ChainShapeConf &amp;lhs, const ChainShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>ad44c87454b3202c77105e5859f1ee276</anchor>
      <arglist>(const ChainShapeConf &amp;lhs, const ChainShapeConf &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::BlockAllocator::Chunk</name>
    <filename>structplayrho_1_1BlockAllocator_1_1Chunk.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Chunk.html</anchorfile>
      <anchor>afb9d9f2cdbc2d42f20c8a3fb57882ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>blockSize</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Chunk.html</anchorfile>
      <anchor>a9f089d6471c64f144bfd554b13bb215e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block *</type>
      <name>blocks</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Chunk.html</anchorfile>
      <anchor>a4be991e1465ee5b0e52cceb8ee2b444a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::ClipVertex</name>
    <filename>structplayrho_1_1d2_1_1ClipVertex.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>v</name>
      <anchorfile>structplayrho_1_1d2_1_1ClipVertex.html</anchorfile>
      <anchor>a544a8a3e5b956c7c53b8b392890f5579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactFeature</type>
      <name>cf</name>
      <anchorfile>structplayrho_1_1d2_1_1ClipVertex.html</anchorfile>
      <anchor>a70e36425e1773d72f724cec972fcd785</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::StackAllocator::Conf</name>
    <filename>structplayrho_1_1StackAllocator_1_1Conf.html</filename>
    <member kind="variable">
      <type>size_type</type>
      <name>preallocation_size</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1Conf.html</anchorfile>
      <anchor>a95611c9fe9f39d544614c918727cff8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>allocation_records</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1Conf.html</anchorfile>
      <anchor>a38007c811dfeed6d390c38ede273f8a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::VelocityConstraint::Conf</name>
    <filename>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</filename>
    <member kind="variable">
      <type>Real</type>
      <name>dtRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</anchorfile>
      <anchor>a318e6cdd10c95ad32829125160a8950a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>velocityThreshold</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</anchorfile>
      <anchor>a26d2ea8863494e13d6c62da51181627d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>blockSolve</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</anchorfile>
      <anchor>adc6dd16353d5df05187f3a35c29acef6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Manifold::Conf</name>
    <filename>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>linearSlop</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>ab6eeee16af7550804d91a82757aef598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>targetDepth</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>adb756b8bf5a96a6feea6f80483f474ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>tolerance</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>af0944fc64740e848e04079b43c341376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>maxCirclesRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>ae311a665bbb972916ca896be04ace473</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Manifold::Conf</type>
      <name>GetDefaultManifoldConf</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>a5f8ea55e1366f819b3683f0896bcce37</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ConstJointVisitor</name>
    <filename>classplayrho_1_1d2_1_1ConstJointVisitor.html</filename>
    <base>playrho::d2::JointVisitor</base>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>ae2293f702800119549fe5f75e2b1554c</anchor>
      <arglist>(const RevoluteJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a23be871a0a305d8fd236f95ad0c13ba2</anchor>
      <arglist>(RevoluteJoint &amp;j) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a8a886244352d0a507f183cc3fbea5c9f</anchor>
      <arglist>(const PrismaticJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>aa5f0f775dee9f28d7f5d31448ee6e235</anchor>
      <arglist>(PrismaticJoint &amp;j) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>ab9bb8ce51579fa4eff97cbaa76036148</anchor>
      <arglist>(const DistanceJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>acc830b8571a7d40ddaba73b86eeedebb</anchor>
      <arglist>(DistanceJoint &amp;j) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a53a0cdc5056ffb9c1fa382bda99a47b3</anchor>
      <arglist>(const PulleyJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>af159ccef9ad283ba8683335134f2b2fa</anchor>
      <arglist>(PulleyJoint &amp;j) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>abba33f5bacc51e690ada28f5aa830cc1</anchor>
      <arglist>(const TargetJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a81d68cdae0cb25aadc7609426188a84d</anchor>
      <arglist>(TargetJoint &amp;j) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a9f5ad49973688aa34db6a21c0979dbc6</anchor>
      <arglist>(const GearJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a15ec62769bf846c3ac18e3a53743cf12</anchor>
      <arglist>(GearJoint &amp;j) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a75e163760ba6f5c647322d7a03b66991</anchor>
      <arglist>(const WheelJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a5c5574d58bf857b21dd3fe1d0b5bd919</anchor>
      <arglist>(WheelJoint &amp;j) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a108844bfff913b9a4b0e6e4b58acf330</anchor>
      <arglist>(const WeldJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a96c0afc4eba0197542da6af21fc2eeca</anchor>
      <arglist>(WeldJoint &amp;j) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>acb3fbe0c00efef4145f2bf1962689815</anchor>
      <arglist>(const FrictionJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a8abd60a70ab2cf93bcb118b14ad0e659</anchor>
      <arglist>(FrictionJoint &amp;j) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>ad408e087885e06d27bcad275eb390224</anchor>
      <arglist>(const RopeJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a76695be44fe3598d20ee7be8ce50aaf0</anchor>
      <arglist>(RopeJoint &amp;j) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a54904396266e4a936cf4a854fc9a2e32</anchor>
      <arglist>(const MotorJoint &amp;j) override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1ConstJointVisitor.html</anchorfile>
      <anchor>a100c726dae3a1918a974b2cf106d31df</anchor>
      <arglist>(MotorJoint &amp;j) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ConstraintSolverConf</name>
    <filename>structplayrho_1_1ConstraintSolverConf.html</filename>
    <member kind="function">
      <type>ConstraintSolverConf &amp;</type>
      <name>UseResolutionRate</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>af0ab56ff6f2b7658a698c4f27e32c664</anchor>
      <arglist>(Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf &amp;</type>
      <name>UseLinearSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a1573412c0fb655a80e4059287620123f</anchor>
      <arglist>(Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf &amp;</type>
      <name>UseAngularSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>aecf3571ff5c379cb036e400a95f15d09</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf &amp;</type>
      <name>UseMaxLinearCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a20989cd4529ce402e81f0c8a4260630f</anchor>
      <arglist>(Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf &amp;</type>
      <name>UseMaxAngularCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a7a0fb6ef120b1e740655219cec24cfb0</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>resolutionRate</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>ac86f35015ef9ac64623cf75040877a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>linearSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a0a06a89f265de0dfdefa618c6ae6c4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angularSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>adddb08435179020d3da74422d611d4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxLinearCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>ae4b3ba29066a65128fab09298cad41df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxAngularCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a253a4bc881f71c58f227fe7effa739ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Contact</name>
    <filename>classplayrho_1_1d2_1_1Contact.html</filename>
    <class kind="struct">playrho::d2::Contact::UpdateConf</class>
    <member kind="typedef">
      <type>TimestepIters</type>
      <name>substep_type</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a4d1cd0d07e1cabbb415fae7e4f838f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a2913ae6bc5f28a798bbf9a53419ad863</anchor>
      <arglist>(Fixture *fA, ChildCounter iA, Fixture *fB, ChildCounter iB)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a2a829f331661dda66d05f602b39a000d</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a5d478ecd9b50d8889c7a990da884bf3b</anchor>
      <arglist>(const Contact &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>af1e31fc73fe150e3b5f7bb4d3055d076</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTouching</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a0bf45a339742f6db83b9e6ca4e54fdd1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a438561f87b3779e64f78b86aa2f337ad</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a25c76926ff2509a572ebed8059a2d85d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a3883618aed9fe042053970de3ebac794</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a1a5ce883a515de0ff292c0086774be39</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixture *</type>
      <name>GetFixtureA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>acf266ef338a99dc9f63837c375706fe4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a0360ba36c9a23678996cf669e45d3d46</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixture *</type>
      <name>GetFixtureB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a461a1dea95676477646a0058a5afb0d3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>af6a74d980c2cf93a3c7fa33406308a39</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ad17871896907f9bf24487909ba98f105</anchor>
      <arglist>(Real friction) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a4138ff67e9742e3a08b10dead573e0a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a287f5162d91997593716f5ebca154527</anchor>
      <arglist>(Real restitution) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ab4d6887a07e00b6854f0cc3d1a137dd6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a02168acc7aab04eb10e6aa738a6392ca</anchor>
      <arglist>(LinearVelocity speed) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a174961238838f3c3fa6bebee50bf655e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>substep_type</type>
      <name>GetToiCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>aa8edfa65f97d2c80e868bac50695fed7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasValidToi</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a4ebfcc84851d42c9828e244fba58de8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetToi</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ae1a23d2f5c34d9eff2afa6f435c90311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FlagForFiltering</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ab851da7babc1be743106f2a6cb9e548d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsFiltering</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a6e2f98ef33d4945ef94853c92f031b87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FlagForUpdating</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a4985bfe554175931ab2029a885b1e888</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsUpdating</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a867592ecb023bd5c7aaf41a14fe050c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UpdateConf</type>
      <name>GetUpdateConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a8df6068a5e9bd6a97374e42bd3b022c2</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ContactAtty</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a502b4fc3baeeeb3466795109a44481d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>acb0615b385c30fd7ca0b7b562f5ba8bf</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a160a129552c387fc8462398d95b5d39b</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a83c524153440dfeb072b8479b3f3ace3</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a1eecaff8b7fee485cf11687a362299ab</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixture *</type>
      <name>GetFixtureA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ae95687c935176a9f12867b3f4e455238</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixture *</type>
      <name>GetFixtureB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a8f0ba59067e83279bcdd83817732701b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>afb78a950ed55c8058f6beffd7b26a180</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>abf62df2b59a399644e24938289aa3dd1</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a73cfb2e1e624b31d5f37fb3e2018e901</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>aae0a081f37037b2a2efb245676ace55b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a679c4d673a6ea2890e0d39a7b6fdb0f7</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a9b5dc1f3ca395793a68fcc5b87fb34e9</anchor>
      <arglist>(const Contact &amp;c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a6364ce32adb82c7dd45b80e8b0c9bfd5</anchor>
      <arglist>(Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ae7c83e82f89844199f5c06c5cda3749d</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOIOutput</type>
      <name>CalcToi</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a68f3d6b8ed4709b6b99bd8e096a9960e</anchor>
      <arglist>(const Contact &amp;contact, ToiConf conf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ContactAtty</name>
    <filename>classplayrho_1_1d2_1_1ContactAtty.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactAtty.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ContactFeature</name>
    <filename>structplayrho_1_1ContactFeature.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>afd2b1a5d28a16fc49261c39d8cebabc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_vertex</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>afd2b1a5d28a16fc49261c39d8cebabc0a1ac9273881afa95e1bf875a8f365fe0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_face</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>afd2b1a5d28a16fc49261c39d8cebabc0a2dd0a38b8272af0356945e37a2e378d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>Index</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ab960333ec02960bebf043a55ef1b6041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_vertex</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>afd2b1a5d28a16fc49261c39d8cebabc0a1ac9273881afa95e1bf875a8f365fe0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_face</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>afd2b1a5d28a16fc49261c39d8cebabc0a2dd0a38b8272af0356945e37a2e378d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>typeA</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a5c088ec7e1896a2b461674065d195dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>indexA</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ac1bd8a9bfa4c1cdb13e0e603e945d786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>typeB</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>aeed0a48d9b920fc4a044d12f506905f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>indexB</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ab540beeb299389dccbac7381e4e39f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetVertexVertexContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a10ad4cc19ec75313b99288e91950a47d</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetVertexFaceContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ad6e8b575033edcfa889ffbf46c59d3cf</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetFaceVertexContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>acba99e7b6830147b661bafaa0dea6e57</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetFaceFaceContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ab8801413b54ba7e1db710717c18020d7</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>Flip</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ac6715d6c6303a8e57025977ca0b079eb</anchor>
      <arglist>(ContactFeature val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a197cce644da40356103fcdebd7911dba</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a9469d42ec9781ca037c112ae05ebe9ae</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ContactImpulsesList</name>
    <filename>classplayrho_1_1d2_1_1ContactImpulsesList.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxManifoldPoints)&gt;::type</type>
      <name>Counter</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>afd836a0f7f5fa78a93b249eb81ea48dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Counter</type>
      <name>GetCount</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a492e5b3928781d272c8281adcd5ae900</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetEntryNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a93e87aaa55a2d38ff22bda824bf84ef6</anchor>
      <arglist>(Counter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetEntryTanget</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>aaba0fcd7239b70c9c20a27c6f54f42da</anchor>
      <arglist>(Counter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddEntry</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a10582ed9bfbe1061650b20acbaa3787f</anchor>
      <arglist>(Momentum normal, Momentum tangent) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetMaxNormalImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a07f0d8f5fce9556590d8e7e40289ae33</anchor>
      <arglist>(const ContactImpulsesList &amp;impulses) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::ContactKey</name>
    <filename>classplayrho_1_1ContactKey.html</filename>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ContactKey</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>ab7c11133a8dae0b567caeaaab8cb1184</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ContactKey</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>a37fe5be752f1e5b7c35ebfd9fb4a84eb</anchor>
      <arglist>(ContactCounter fp1, ContactCounter fp2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactCounter</type>
      <name>GetMin</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>a718737f4734ff23c24b8cdf711e0a08b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactCounter</type>
      <name>GetMax</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>af03788ee2ad7b2b4713b479356cfc44f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ContactListener</name>
    <filename>classplayrho_1_1d2_1_1ContactListener.html</filename>
    <member kind="typedef">
      <type>unsigned</type>
      <name>iteration_type</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactListener.html</anchorfile>
      <anchor>a090038a41a46c74f57cb289c0cee130e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactListener.html</anchorfile>
      <anchor>a43adb7b4f1a707179f9a50d59f374012</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BeginContact</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactListener.html</anchorfile>
      <anchor>a9737a46135fa144f57dcf5767a44dd49</anchor>
      <arglist>(Contact &amp;contact)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EndContact</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactListener.html</anchorfile>
      <anchor>ae78b93d60b9828b0de94cb0e9002b8db</anchor>
      <arglist>(Contact &amp;contact)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PreSolve</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactListener.html</anchorfile>
      <anchor>a544c062194af9d89702a2ad511f2dcea</anchor>
      <arglist>(Contact &amp;contact, const Manifold &amp;oldManifold)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PostSolve</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactListener.html</anchorfile>
      <anchor>aed78f6658410536ac0458acfc84793af</anchor>
      <arglist>(Contact &amp;contact, const ContactImpulsesList &amp;impulses, iteration_type solved)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ConvexHull</name>
    <filename>classplayrho_1_1d2_1_1ConvexHull.html</filename>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetDistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a7d7018e5533e08eb8f3eba2a433cc3a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a2acf139f12016ebffac2da470ea55330</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConvexHull &amp;</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>af3934cbb1d879f86b8f74f1b4aef9f97</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConvexHull</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a678ba0811f2975d1cdba6bfca49005eb</anchor>
      <arglist>(const VertexSet &amp;pointSet, NonNegative&lt; Length &gt; vertexRadius=NonNegative&lt; Length &gt;{DefaultLinearSlop *Real{2}})</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>aa99886fb5a26ab66edf9e1cca4b9f8b9</anchor>
      <arglist>(const ConvexHull &amp;lhs, const ConvexHull &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>ac2d04de1e99eea10f31f2a757b706607</anchor>
      <arglist>(const ConvexHull &amp;lhs, const ConvexHull &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Defaults</name>
    <filename>structplayrho_1_1detail_1_1Defaults.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR auto</type>
      <name>GetLinearSlop</name>
      <anchorfile>structplayrho_1_1detail_1_1Defaults.html</anchorfile>
      <anchor>ac253d924f79906cf2a318c98a0367464</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR auto</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>structplayrho_1_1detail_1_1Defaults.html</anchorfile>
      <anchor>a71aa7b6dfe0bc6671d361509dd47d82b</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Defaults&lt; Fixed&lt; std::int32_t, FRACTION_BITS &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1Defaults_3_01Fixed_3_01std_1_1int32__t_00_01FRACTION__BITS_01_4_01_4.html</filename>
    <templarg>FRACTION_BITS</templarg>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR auto</type>
      <name>GetLinearSlop</name>
      <anchorfile>structplayrho_1_1detail_1_1Defaults_3_01Fixed_3_01std_1_1int32__t_00_01FRACTION__BITS_01_4_01_4.html</anchorfile>
      <anchor>a48a02cc00f2c23d08275b69d3362b000</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR auto</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>structplayrho_1_1detail_1_1Defaults_3_01Fixed_3_01std_1_1int32__t_00_01FRACTION__BITS_01_4_01_4.html</anchorfile>
      <anchor>a70747129708e5d408fd0200a4f6cd7f1</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DestructionListener</name>
    <filename>classplayrho_1_1d2_1_1DestructionListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1DestructionListener.html</anchorfile>
      <anchor>a44e0d8a479fc35645689a11482ce5353</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SayGoodbye</name>
      <anchorfile>classplayrho_1_1d2_1_1DestructionListener.html</anchorfile>
      <anchor>a1dde5e15ee693ceb3b95231344001d0b</anchor>
      <arglist>(const Joint &amp;joint) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SayGoodbye</name>
      <anchorfile>classplayrho_1_1d2_1_1DestructionListener.html</anchorfile>
      <anchor>a48a2d0e1e736ca7a8b97c02b87e9b2b8</anchor>
      <arglist>(const Fixture &amp;fixture) noexcept=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DiskShapeConf</name>
    <filename>structplayrho_1_1d2_1_1DiskShapeConf.html</filename>
    <base>ShapeBuilder&lt; DiskShapeConf &gt;</base>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>DiskShapeConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a78d38eb6820687fd0164125461b55aa5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>DiskShapeConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a401254a27b1362c5ba250d1814401237</anchor>
      <arglist>(NonNegative&lt; Length &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DiskShapeConf &amp;</type>
      <name>UseLocation</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>ab8ca58fd6284d31c659912993144f2b7</anchor>
      <arglist>(Length2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DiskShapeConf &amp;</type>
      <name>UseRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a9cffdde99a7ec3fe7ad3ab2b634b741b</anchor>
      <arglist>(NonNegative&lt; Length &gt; r) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DiskShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>ab8659ce291088799ddf81064ac00071e</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a876cfe2252080d2f09e777d2f5ef2c48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a80722e9c17a546a9d2cecd9545654a04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR NonNegative&lt; Length &gt;</type>
      <name>GetDefaultRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a7b449596383835ec7e2d4868a5e262ed</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a2f1de4aa7db27a666fdd7f2f85130f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>location</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>adaafd1c41a01e0708a9a18b125133ac7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DistanceConf</name>
    <filename>structplayrho_1_1d2_1_1DistanceConf.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>iteration_type</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>a18fe1adddb6ad25884ebcaf28de640df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Simplex::Cache</type>
      <name>cache</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>ad0dc57b1e5c4fc6bc9ea4c352b1f7526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxIterations</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>aad8920477d137c4acfa0b5341ae521b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DistanceOutput</type>
      <name>Distance</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>ad01443fd4ea346d550ece90f7f92b1f4</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;transformA, const DistanceProxy &amp;proxyB, const Transformation &amp;transformB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DistanceJoint</name>
    <filename>classplayrho_1_1d2_1_1DistanceJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>DistanceJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>af7c768318eb7c5776547240ea4b9bfb5</anchor>
      <arglist>(const DistanceJointConf &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>ab5afe2028addabdcabf9dda630bb280b</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>a30570447201b457ed159cd334d4f31c4</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>afff9cb259c27434d5454ebbf03c3abcf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>a08de4f3c77f8ea43a188ffab46c94305</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>ae59166d2a1e8043433fe9eae76319706</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>a5ab2e73ed7ee2c8463e7f0ee212dbc70</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>ab0d11543041b486b10a8bb93e7801b55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>aca79b004e801cc6d5626e0ab90774044</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLength</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>a5808025b29efd27e65217d83c30e5631</anchor>
      <arglist>(Length length) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>abd2396d5744e5272091cdfcd73c5ed7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>a45259cf15cf95bb559bee4b9d8aa127d</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; frequency) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>GetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>a7ac238defbfad1179ce5941c0ee74fa3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>a96e6da6e0bb45e8553a9ed6d2365d309</anchor>
      <arglist>(Real ratio) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>a95149eb686a61d904c2291ba6b798cad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsOkay</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>a8865d46b0f1f32c9f6f5924b1cab34c0</anchor>
      <arglist>(const DistanceJointConf &amp;data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceJoint.html</anchorfile>
      <anchor>ae65a21864cd706cbd0f239ed4497841d</anchor>
      <arglist>(const DistanceJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DistanceJointConf</name>
    <filename>structplayrho_1_1d2_1_1DistanceJointConf.html</filename>
    <base>JointBuilder&lt; DistanceJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; DistanceJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>ad6c39a43cfd69b61f0de297dda64d08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>DistanceJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a50db522efb5d39a34269e23476b5ceeb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>abd684f40ac629fbdc63c4918bc08adf0</anchor>
      <arglist>(const DistanceJointConf &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a606ea66fcc425816375e4a7a328b3c84</anchor>
      <arglist>(NonNull&lt; Body * &gt; bodyA, NonNull&lt; Body * &gt; bodyB, Length2 anchorA=Length2{}, Length2 anchorB=Length2{}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DistanceJointConf &amp;</type>
      <name>UseLength</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a7d87e2ace3ca1ad92479f26a7ce35336</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DistanceJointConf &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a4fe1746adf3cf55603e6e3fb450a9892</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DistanceJointConf &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a481547421a0b08a9cea815189467ef42</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a82a119f9c13f7b9f792384ce12ea2c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a0202d808b84c9cfd47b62231a4b79be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>length</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a728c814c133bab347a07278fa6153fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a120be14a41a01c027ca4cbac8369d798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a2867b1456cf01d9f41e3b5471462fb3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DistanceOutput</name>
    <filename>structplayrho_1_1d2_1_1DistanceOutput.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1baea6b72c0c089383528b2916072f8b8a335</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxPoints</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1baea1dada05ceacdfcbd0bfface1404ca62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnfitSearchDir</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1baea0a82dbfc1f49e60c2850db23a3956473</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DuplicateIndexPair</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1baea0c837ab1d41e4bc9f4e7485953d981cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HitMaxIters</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1baeab8586e48042e6521a6c8b6d93f73436d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>iteration_type</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a2015bfeb0654b195a1f0ec4de6458870</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1baea6b72c0c089383528b2916072f8b8a335</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxPoints</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1baea1dada05ceacdfcbd0bfface1404ca62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnfitSearchDir</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1baea0a82dbfc1f49e60c2850db23a3956473</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DuplicateIndexPair</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1baea0c837ab1d41e4bc9f4e7485953d981cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HitMaxIters</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1baeab8586e48042e6521a6c8b6d93f73436d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Simplex</type>
      <name>simplex</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>ab00a929734dfa08adce26a4f0411be1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>iterations</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a3e530bb6c13140f89aa96893d816683c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a4dacf9189684fb5a146abfabba8df687</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DistanceProxy</name>
    <filename>classplayrho_1_1d2_1_1DistanceProxy.html</filename>
    <member kind="typedef">
      <type>const Length2 *</type>
      <name>ConstVertexPointer</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a907c4696aeb6b312916c5f8d8ccac2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstVertexPointer</type>
      <name>ConstVertexIterator</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a079697225a964bf2a6cc647e9543ccfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const UnitVec *</type>
      <name>ConstNormalPointer</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>ab4e33e8b30053ce9a1465e7743706960</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstNormalPointer</type>
      <name>ConstNormalIterator</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>abf6427308cbc66d4216be96aa1f71677</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a6dcffdc2cce9879f5d78a3c8362d5797</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a195ea26814c4fc64d16b5c492b9494db</anchor>
      <arglist>(const DistanceProxy &amp;copy) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>ae9b4f10ea5d31214657b19d9d777b9e7</anchor>
      <arglist>(const NonNegative&lt; Length &gt; vertexRadius, const VertexCounter count, const Length2 *vertices, const UnitVec *normals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>ac546ae436486377126a13b246ed97d55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; ConstVertexIterator &gt;</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a6e441632fdd6b68df536e493e7534686</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; ConstNormalIterator &gt;</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>abfbb598dc7da7ad91d10891cfd433f40</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a4feb3f3f5b109c56bfed98ae35a607ab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertex</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>af58ea5737487abe0a4ceab5f7a7c09d0</anchor>
      <arglist>(VertexCounter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a20cf8979b7630e5caf1ce9958768f1d9</anchor>
      <arglist>(VertexCounter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a44cc65808fd89570707b3af1bc87eb36</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>aa67cf0c4b074e5c10a793cb2f16a0860</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xfm0, const Transformation &amp;xfm1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a1311c8979a6d955fa240491cbf239e99</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a1c65d94d98dea8f68c3dd32e90b888bb</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSupportIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a6cfc27f1644f9c4d6da229b5eba07e51</anchor>
      <arglist>(const DistanceProxy &amp;proxy, T dir) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gac9da7b3dd9e1dc5532a0f3c47f31f22e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DynamicTree</name>
    <filename>classplayrho_1_1d2_1_1DynamicTree.html</filename>
    <class kind="struct">playrho::d2::DynamicTree::BranchData</class>
    <class kind="struct">playrho::d2::DynamicTree::LeafData</class>
    <class kind="class">playrho::d2::DynamicTree::TreeNode</class>
    <class kind="struct">playrho::d2::DynamicTree::UnusedData</class>
    <class kind="union">playrho::d2::DynamicTree::VariantData</class>
    <member kind="typedef">
      <type>ContactCounter</type>
      <name>Size</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a50dd3ef079943c3c2e5e9f5db597e9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContactCounter</type>
      <name>Height</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>afb4c79ac3866ac6733d47abd14ec88ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ac4e2861f240ffce2e9ea51d8940c5150</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a06fea4c54490270294a56ae627701639</anchor>
      <arglist>(Size nodeCapacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ad81a322bcd52726dba15394783eea8fb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>af2d9142c669aec29bb9916a8501f4879</anchor>
      <arglist>(const DynamicTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a3cd15bb0281c6ab6191e51b26f1d8c8b</anchor>
      <arglist>(DynamicTree &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a2fafb37e54884438b868f3cb18714730</anchor>
      <arglist>(DynamicTree other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>CreateLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a41731222ce0dbd6ffa1f6d8d2f753bdd</anchor>
      <arglist>(const AABB &amp;aabb, const LeafData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DestroyLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a797247f9d1710de7c5883fe08f1c868a</anchor>
      <arglist>(Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>af791e371bb59fb7440d0440d0f89766b</anchor>
      <arglist>(Size index, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>LeafData</type>
      <name>GetLeafData</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a53d2bd646d7fcd1d5ebbef75c73a5020</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLeafData</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a949f9eff32aa5fb52cd587921a4a4dcc</anchor>
      <arglist>(Size index, LeafData value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a06675690daf54a10b18f1da1a8a7326b</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Height</type>
      <name>GetHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a4c6bccb9bc6df8db71421e3ef32d001c</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetOther</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a6c47548f16509b0088da777223dab05b</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BranchData</type>
      <name>GetBranchData</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ab905d71ffa6b1e5b6d2a684ca3758a1f</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetRootIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ad8f642f8240c30f686f9db11533a2b51</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetFreeIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a6a84cb18d4e07355e33e01fc062974a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RebuildBottomUp</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a47cbaffc41092844c1b4812057e37f13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a48f9f9a84abaab41224a79cfb8bfd5ba</anchor>
      <arglist>(Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetNodeCapacity</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a6d5405cac98b2f35be80869c23abfe5a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetNodeCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a211b3f8b163604b56db4fa3887fc2f43</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetLeafCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a835291d0eb5b8bf966c76e2ab4f4e3fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>FindReference</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a3e47af4d29d32f41e00a90d854a73adb</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Size</type>
      <name>GetInvalidSize</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a662abed68313d3051a670efee6ec5aa5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Height</type>
      <name>GetInvalidHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a499867a20dcef8316b874eb56f613bd5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR bool</type>
      <name>IsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>aafe5f0b06fa0823ad2822a9748ff11ed</anchor>
      <arglist>(Height value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR bool</type>
      <name>IsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a0d43e2b01aca6f9d6ec76b5481a19fd3</anchor>
      <arglist>(Height value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR bool</type>
      <name>IsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a64369f43b2283d37e7ed2127e32b719f</anchor>
      <arglist>(Height value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Size</type>
      <name>GetDefaultInitialNodeCapacity</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a8146fcec39d886ea565f14cb5cebbb5c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a69812e831d19c41a310f02679e118f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a778697779a16cce60de39b6dee75a75d</anchor>
      <arglist>(DynamicTree &amp;lhs, DynamicTree &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a72265a3c2d4511e74df6ab4d13112f6d</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>adebb4dfdc038631f8b24ee19a0b29713</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestOverlap</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a905424c61ac9933179b91eb12ac0d537</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size leafIdA, DynamicTree::Size leafIdB) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::EdgeShapeConf</name>
    <filename>classplayrho_1_1d2_1_1EdgeShapeConf.html</filename>
    <base>ShapeBuilder&lt; EdgeShapeConf &gt;</base>
    <member kind="function">
      <type></type>
      <name>EdgeShapeConf</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>ad49ff02df45dad6431057c766770e130</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeShapeConf</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a4411ca2f890e0d98c65db50d25f77948</anchor>
      <arglist>(Length2 vA, Length2 vB, const EdgeShapeConf &amp;conf=GetDefaultConf()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a3c285199c324b6de0de6ed0ee4c675f9</anchor>
      <arglist>(Length2 vA, Length2 vB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>UseVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a0fa0648764ab95db5771e0bb4c4aba12</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>ae456a6827c99d1ae50ae93a31c2a9ebc</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertexA</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a3affefb1face6109ba0dbf3f2ae1316c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertexB</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a4e1dafe1cd7aabc170875038d72b6e76</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a60b2f40cbcd5bec85036d7f8169b1009</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a54d089d5ad8e26aac03f2d0d70d84499</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EdgeShapeConf</type>
      <name>GetDefaultConf</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>aeaba8cac67b704014d26574a3492bae0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>ab511eef5cb53693920b010d1298db639</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::equal_to&lt; playrho::d2::JointKey &gt;</name>
    <filename>structstd_1_1equal__to_3_01playrho_1_1d2_1_1JointKey_01_4.html</filename>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1equal__to_3_01playrho_1_1d2_1_1JointKey_01_4.html</anchorfile>
      <anchor>a77c4a1c1cac33335593709444cc49d21</anchor>
      <arglist>(const playrho::d2::JointKey &amp;lhs, const playrho::d2::JointKey &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Filter</name>
    <filename>structplayrho_1_1Filter.html</filename>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>bits_type</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>afc7787e34f2ba644f3b3e135225647a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int16_t</type>
      <name>index_type</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a289ef26ff12cc3cb15d74062ce27fd72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bits_type</type>
      <name>categoryBits</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a70f8953a304f7c864cda8f937fc65bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bits_type</type>
      <name>maskBits</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a9a186cc516b67d2165419e515e5be3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>index_type</type>
      <name>groupIndex</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a8388c2614c205b7aaa2226849779619f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>af48fe223cf379b5534ebf571d5f83164</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>ab177f652a925ae4e4a236a597dbe6d07</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a223329721a8138f316898ed9a4877250</anchor>
      <arglist>(const Filter filterA, const Filter filterB) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::Fixed</name>
    <filename>classplayrho_1_1Fixed.html</filename>
    <templarg></templarg>
    <templarg>FRACTION_BITS</templarg>
    <member kind="enumeration">
      <type></type>
      <name>CmpResult</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a17b16b2f06f99d0e941d7e8d9bff4e77</anchor>
      <arglist></arglist>
      <enumvalue file="classplayrho_1_1Fixed.html" anchor="a17b16b2f06f99d0e941d7e8d9bff4e77a29dcef0a3767c4ff65c0a47354a64869">Incomparable</enumvalue>
      <enumvalue file="classplayrho_1_1Fixed.html" anchor="a17b16b2f06f99d0e941d7e8d9bff4e77af5f286e73bda105e538310b3190f75c5">Equal</enumvalue>
      <enumvalue file="classplayrho_1_1Fixed.html" anchor="a17b16b2f06f99d0e941d7e8d9bff4e77ac6d9d7bb9939f62f01c80f8b1251501c">LessThan</enumvalue>
      <enumvalue file="classplayrho_1_1Fixed.html" anchor="a17b16b2f06f99d0e941d7e8d9bff4e77af6d044fe1f01fb0c956b80099e2a3072">GreaterThan</enumvalue>
    </member>
    <member kind="typedef">
      <type>BASE_TYPE</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ad5302b547a8052bcaec79f04430afaee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>add5f825d42acdafe8ff81d94bcc3b226</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aa131183cab01041206ff13b4aa50fc42</anchor>
      <arglist>(long double val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ac9179a85c1d70aaee22a2cdf23cb4538</anchor>
      <arglist>(double val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a55c21c0189667a8c5a266e63882b0d98</anchor>
      <arglist>(float val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a83e23d9587cd76c1a1e8ce74e7c41b89</anchor>
      <arglist>(unsigned long long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aecb8af801a914992db0586c74acc1f57</anchor>
      <arglist>(unsigned long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a830eec99b41c5c75724937034779629e</anchor>
      <arglist>(unsigned int val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a5b649dc8c22034e535c7496f12bd5e0e</anchor>
      <arglist>(long long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aa13b48a41e95d605220bb4836420b1e1</anchor>
      <arglist>(long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aaec740e71e3a4f646a41de69e73703a0</anchor>
      <arglist>(int val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a434467fe35e5753b38c4619c60eb5f10</anchor>
      <arglist>(short val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a484b7ca4b74c6ba3bb400a5cb37872bf</anchor>
      <arglist>(value_type val, unsigned int fraction) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a7ca3b90296fa8b7117eef62a07290f90</anchor>
      <arglist>(const Fixed&lt; BT, FB &gt; val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>ConvertTo</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a0ed66ce475cfae59ec1e4970984b62f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR CmpResult</type>
      <name>Compare</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>adc9ce130048d7f4a734e80f6dd120b5d</anchor>
      <arglist>(const Fixed other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator long double</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a85d97410d7799cf3e823f93e80f477a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator double</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a921fa4dbe4db3ad50c3fade7a968f8a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator float</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a0f54ca63fca55e38144d3fc3b6feff0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator long long</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ac57a004d80542be7d8dae79d1f7f14b3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator long</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a160367807b4736d0e95c86f0b155350a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator unsigned long long</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a4ffc8d8a4fb49cfad17fb384752afcb0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator unsigned long</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>af558c792d6ac96a431ea8cf87d3b45b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator unsigned int</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aa862a936dbbed4e027e32a0f7fcf11d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator int</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ac7d00f93df3ac6962fad407bd3d66489</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator short</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a8924a9f00ec0f085ed15dacf0802ce62</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aa1fd6b15271cc15171276017107410b3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a3b99600650fd0b971af67224c4e2271a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator bool</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>acb49e1002801c2acd4e6cc612a52ae5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a96b47643476f41aae070dacdb751f247</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed &amp;</type>
      <name>operator+=</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a06527b5c2f458f656251334ae31f5e3f</anchor>
      <arglist>(Fixed val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed &amp;</type>
      <name>operator-=</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a06a4b3204c64a673589d7dede5664085</anchor>
      <arglist>(Fixed val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed &amp;</type>
      <name>operator*=</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a2ce6a785531b924a7a26200ca3b2f215</anchor>
      <arglist>(Fixed val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed &amp;</type>
      <name>operator/=</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a0451faba6d56f19fec149af1becfb12a</anchor>
      <arglist>(Fixed val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed &amp;</type>
      <name>operator%=</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a11746f5d22795c10fc77bb4e824d684f</anchor>
      <arglist>(Fixed val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>isfinite</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a9107b311417e20b07d740279893e28d1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>isnan</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a5845caf2583f7abe0bdb18398e0f4802</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR int</type>
      <name>getsign</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ae6dfe923e19023e0df4a2e86984cdf84</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Fixed</type>
      <name>GetMin</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a6d824677ad22ffbb18a757f4660d6b2a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Fixed</type>
      <name>GetInfinity</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a1396abc9352cc8ae20a48e6c34a4b320</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Fixed</type>
      <name>GetMax</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a180463ab92cfcb166f34ba9f74ab02cd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Fixed</type>
      <name>GetNaN</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a403c79a84cfc2729db657dd7ca208b71</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Fixed</type>
      <name>GetNegativeInfinity</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a786985e2d98f4d29bd8fd08e6f526b3a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Fixed</type>
      <name>GetLowest</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a68f76faa735647ae48bd1b4edab47ecc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR value_type</type>
      <name>GetFromFloat</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a31e904500e3e039af8916b2581e39727</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR value_type</type>
      <name>GetFromSignedInt</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>abcc98b1beee8879f8b6fda3cbf64c6da</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR value_type</type>
      <name>GetFromUnsignedInt</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a3179abb2d2df822f1b82088f7e884d0f</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR unsigned int</type>
      <name>TotalBits</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a321f53d4736493af0190c42cdd14999a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR unsigned int</type>
      <name>FractionBits</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a04f0ef85960b8d68471da04cad0fb130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR unsigned int</type>
      <name>WholeBits</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a58a497fba7760c96043594f1f57d56d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR value_type</type>
      <name>ScaleFactor</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a1bec29540b6752409925f73dcb526177</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Fixture</name>
    <filename>classplayrho_1_1d2_1_1Fixture.html</filename>
    <member kind="function">
      <type>NonNull&lt; Body * &gt;</type>
      <name>GetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a06b4d3e9a3520768bc336da56083f566</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>GetShape</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a43e88ab8b58819aceb0b24b0c1cf98fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>acf9012410aef61637c1b8f37f11b7d85</anchor>
      <arglist>(bool sensor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>aa96df2ef6fd49bfeadf661a6b01fc274</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilterData</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a8332326cfd6a500f6e641853e9a4298b</anchor>
      <arglist>(Filter filter)</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilterData</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a832c01f7fb650fe78ca8091eae9ec7d1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Refilter</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a585e0019655a53829279eceabca4fdd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetUserData</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>abe3a29507e852de40f1e1e58cabefbe3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUserData</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a3a908676b0ffce6b4ddb829846921556</anchor>
      <arglist>(void *data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AreaDensity</type>
      <name>GetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a794787df25f18190349ff42287b1a8ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a6b86143c49818f6bea1ade0887145a29</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a74e92b77469f0f2e2974119cc6f78bb4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetProxyCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>af0e0d676a2adc4f6889450e53d9204a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureProxy</type>
      <name>GetProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a5b9c757eaab78c7b0464b6bbc84f41eb</anchor>
      <arglist>(ChildCounter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Span&lt; const FixtureProxy &gt;</type>
      <name>GetProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a3ad5bf726c5e30330e51d39482f0aca2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FixtureAtty</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>ac56b359ed7927506711361d73fbbf1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a197397d1fa4c56a0498efea2026dba7f</anchor>
      <arglist>(const Fixture &amp;fixture) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>adfdaf5afb737a4eb88daa57a82819c0c</anchor>
      <arglist>(const Fixture &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gab8a45f5746faae097776c2dcd5d8c9d4</anchor>
      <arglist>(const Fixture &amp;f, Length2 p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a881653bbb1f1064662695770738c3dfc</anchor>
      <arglist>(const Fixture &amp;f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a0daaf455abb76a6e73564741eedee365</anchor>
      <arglist>(const Fixture &amp;f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a83e0703de7a5f33d9a17c36f1aa43615</anchor>
      <arglist>(const Fixture &amp;fixtureA, const Fixture &amp;fixtureB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureConf</type>
      <name>GetFixtureConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Fixture.html</anchorfile>
      <anchor>a8db5cea675ddb8590ba6787a048a58b2</anchor>
      <arglist>(const Fixture &amp;fixture) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::FixtureAtty</name>
    <filename>classplayrho_1_1d2_1_1FixtureAtty.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1FixtureAtty.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::FixtureConf</name>
    <filename>structplayrho_1_1d2_1_1FixtureConf.html</filename>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR FixtureConf &amp;</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a126175e952c43e8e545ca8e0a93351cf</anchor>
      <arglist>(void *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR FixtureConf &amp;</type>
      <name>UseIsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>ad27014718ffe5783fcc061b36656eaad</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR FixtureConf &amp;</type>
      <name>UseFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a4248cc9c67c4339e9aca1126a4f3338f</anchor>
      <arglist>(Filter value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>userData</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>ae99eb96791cf487468f7c5f636e86ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a6ee27d488bf91f504acadd259fa36798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Filter</type>
      <name>filter</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a6db711336e93f9aa8b45da7739175779</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR FixtureConf</type>
      <name>GetDefaultFixtureConf</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a717b9c7d89e14f4f0e7f893075b3a8a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::FixtureProxy</name>
    <filename>structplayrho_1_1FixtureProxy.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxContacts)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1FixtureProxy.html</anchorfile>
      <anchor>aa423d44eb5a1c3180d1a7a11f7214ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>treeId</name>
      <anchorfile>structplayrho_1_1FixtureProxy.html</anchorfile>
      <anchor>ad30a34a6ba8446c9a1bb44786baf46d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1FixtureProxy.html</anchorfile>
      <anchor>a7fa7929a7c9cfd63177dcf77c3116bf1</anchor>
      <arglist>(const FixtureProxy &amp;lhs, const FixtureProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1FixtureProxy.html</anchorfile>
      <anchor>a11952027f7e2cabb36d03c2677219a4a</anchor>
      <arglist>(const FixtureProxy &amp;lhs, const FixtureProxy &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::FlagGuard</name>
    <filename>classplayrho_1_1FlagGuard.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>ac104fceea41a9806de0fda376f3d39df</anchor>
      <arglist>(T &amp;flag, T value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a3dce2bda9da65a2f7caacaa28dc7e37b</anchor>
      <arglist>(const FlagGuard&lt; T &gt; &amp;value)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>af487c3ee0e823dce4c17ef7e4663f6a3</anchor>
      <arglist>(FlagGuard&lt; T &gt; &amp;&amp;value) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>FlagGuard&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>afacfc35f209cde3e6550761bb4dbe0fe</anchor>
      <arglist>(const FlagGuard&lt; T &gt; &amp;value)=default</arglist>
    </member>
    <member kind="function">
      <type>FlagGuard&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a2566ed27d453c2f37e08a855df5133c6</anchor>
      <arglist>(FlagGuard&lt; T &gt; &amp;&amp;value) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a1649a18e1024ccbc6e8704b2f381f31e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a3b9ec10b77677a9f6c064942f43a7d2f</anchor>
      <arglist>()=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::FrictionJoint</name>
    <filename>classplayrho_1_1d2_1_1FrictionJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>FrictionJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>a76fe583a1d5e981defbf1c1f73e65033</anchor>
      <arglist>(const FrictionJointConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>ab31490b3e850ee5d2d927109125e2054</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>aab137d34a5e5c289efbcc69b3731b69c</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>a78da6b50706cb8a8c01965ff3f36f06d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>af67fbf77ac04f8d4ec0005b02c92bd2d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>ac7acd36c6e5aff16e1e9fd47740a407f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>a6f3c0f8f9f803c38e8c1868f0ea1aa49</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>ab82370041f00e01f935e3a41a5339937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>a445f96724c6cd9e455ad65f00095da89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxForce</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>ae98628abc7eedf766e42eb95b62aba4c</anchor>
      <arglist>(NonNegative&lt; Force &gt; force)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Force &gt;</type>
      <name>GetMaxForce</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>aec81f1b5f5acc058fcc5686f46f973a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>a88c331621fdec45a9676ca32184d1114</anchor>
      <arglist>(NonNegative&lt; Torque &gt; torque)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Torque &gt;</type>
      <name>GetMaxTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>adb506911b6740a2c892f81adf2bd3dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1FrictionJoint.html</anchorfile>
      <anchor>a2c68ff176bff91fd36b87f183341d713</anchor>
      <arglist>(const FrictionJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::FrictionJointConf</name>
    <filename>structplayrho_1_1d2_1_1FrictionJointConf.html</filename>
    <base>JointBuilder&lt; FrictionJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; FrictionJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a7af858d7bbdbc4e1de402f4b315d4f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>FrictionJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a313a9fecbd53c881deca45bba027ed3a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrictionJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a6ff0cc975ab2a3425979675907236e76</anchor>
      <arglist>(Body *bodyA, Body *bodyB, const Length2 anchor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR FrictionJointConf &amp;</type>
      <name>UseMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a96cd8b3b9d9cb186259e06224eebbd2d</anchor>
      <arglist>(NonNegative&lt; Force &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR FrictionJointConf &amp;</type>
      <name>UseMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a26ca93c6ecd2c9285411474daf66a3ef</anchor>
      <arglist>(NonNegative&lt; Torque &gt; v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a99fdb13a3f08e267da5d4351e0a82968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>ad320a4d48709fed7a9ba8ad7d96b422a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Force &gt;</type>
      <name>maxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a951dfd6ab71a10b2bf897c519b486e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Torque &gt;</type>
      <name>maxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a0dc172c241a2bd93f84c74c23b80da4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::FunctionalJointVisitor</name>
    <filename>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</filename>
    <base>playrho::d2::JointVisitor</base>
    <member kind="typedef">
      <type>std::function&lt; void(T)&gt;</type>
      <name>Proc</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>ae9652b7fe379738f5e98c04efe59445e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; Proc&lt; const RevoluteJoint &amp; &gt;, Proc&lt; RevoluteJoint &amp; &gt;, Proc&lt; const PrismaticJoint &amp; &gt;, Proc&lt; PrismaticJoint &amp; &gt;, Proc&lt; const DistanceJoint &amp; &gt;, Proc&lt; DistanceJoint &amp; &gt;, Proc&lt; const PulleyJoint &amp; &gt;, Proc&lt; PulleyJoint &amp; &gt;, Proc&lt; const TargetJoint &amp; &gt;, Proc&lt; TargetJoint &amp; &gt;, Proc&lt; const GearJoint &amp; &gt;, Proc&lt; GearJoint &amp; &gt;, Proc&lt; const WheelJoint &amp; &gt;, Proc&lt; WheelJoint &amp; &gt;, Proc&lt; const WeldJoint &amp; &gt;, Proc&lt; WeldJoint &amp; &gt;, Proc&lt; const FrictionJoint &amp; &gt;, Proc&lt; FrictionJoint &amp; &gt;, Proc&lt; const RopeJoint &amp; &gt;, Proc&lt; RopeJoint &amp; &gt;, Proc&lt; const MotorJoint &amp; &gt;, Proc&lt; MotorJoint &amp; &gt; &gt;</type>
      <name>Tuple</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>afd9902a117cab19db1ed1337812fc563</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FunctionalJointVisitor &amp;</type>
      <name>Use</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a39aad83d6317ad2d416fb2b76907cc72</anchor>
      <arglist>(const Proc&lt; T &gt; &amp;proc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a983dae516247b72c3bda8ae9acfef422</anchor>
      <arglist>(const RevoluteJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a02e445d7106163bced4f0b11402d7159</anchor>
      <arglist>(RevoluteJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>aa286d8820415c66f8a3b5c2bce8b7630</anchor>
      <arglist>(const PrismaticJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>abddecf47b10b0281b3c1fc125b757ae8</anchor>
      <arglist>(PrismaticJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>aee5dcf01304b3fa3cd5aebcd9483d877</anchor>
      <arglist>(const DistanceJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a667cca10e24f76d4de65b6741452d29a</anchor>
      <arglist>(DistanceJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a17ac02d9817baf0de4460077057c60a0</anchor>
      <arglist>(const PulleyJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>ab1210479e1328b14a6736d59b3e9c63d</anchor>
      <arglist>(PulleyJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a89cb3ec0af31b2eca87b6f3e1beae163</anchor>
      <arglist>(const TargetJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>afc5ff64ee123011ee67d46fd07e97469</anchor>
      <arglist>(TargetJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>ad616b7ce3039a3c8bd7860a667dc8192</anchor>
      <arglist>(const GearJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a33e099d35935a107de429376787de482</anchor>
      <arglist>(GearJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a6691bffd7c43c881a6eed408a6c11996</anchor>
      <arglist>(const WheelJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a2b86aa999379b1e897ea0f6adadcb2ff</anchor>
      <arglist>(WheelJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a0a66670bf1121e0de958be97955eb412</anchor>
      <arglist>(const WeldJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a42097e5fa35c51234b7f446e7bc2f996</anchor>
      <arglist>(WeldJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a5885a268399f2cce7717e884338cb044</anchor>
      <arglist>(const FrictionJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a5954f47c8f8e244ba386aa7a6fb72413</anchor>
      <arglist>(FrictionJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>ab505b61f063dbf3a23648dac8cdee7bb</anchor>
      <arglist>(const RopeJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a8671b322e4a97d917942ebfed7b390bf</anchor>
      <arglist>(RopeJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>ac664f540649a565c75f77eb3a2e1f595</anchor>
      <arglist>(const MotorJoint &amp;arg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a90bcfb4757299abb8c8224bdb240777a</anchor>
      <arglist>(MotorJoint &amp;arg) override</arglist>
    </member>
    <member kind="variable">
      <type>Tuple</type>
      <name>procs</name>
      <anchorfile>classplayrho_1_1d2_1_1FunctionalJointVisitor.html</anchorfile>
      <anchor>a742f01ba8e71c610275ba5208b2d253f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::GearJoint</name>
    <filename>classplayrho_1_1d2_1_1GearJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>GearJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a23c01305d59660c6e4281898cbd29c58</anchor>
      <arglist>(const GearJointConf &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a6d005704794cb758659631fda3560d59</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>ab1ad0d0bd95a789a62cc8d6c5d16fc69</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a2ad124dac4bb8cfd2b385c7a819ef447</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a48a0fcc2ade66e69edf05ae822e8a0c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a74965491192d5035f2da9ea17bcf0a7c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a6e553eac8476de2f3e23f4dfa2b30871</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a999dd1088303ad9780c10a7710ec0797</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a62d133b88583cf78bb89655ad5211e01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNull&lt; Joint * &gt;</type>
      <name>GetJoint1</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a3cb8c2fc26ef5a2be2c8efbce084d760</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNull&lt; Joint * &gt;</type>
      <name>GetJoint2</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>ab092b8223f40354e83531da7b35dcadd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>af302322eccd08aac5d314bb2b8b7a215</anchor>
      <arglist>(Real ratio)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a3b7dd8e23a4f6b2825ef460b4a944a4c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetConstant</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>ab0c1de40a8bf776153233560a38f2d7b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsOkay</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a84251b8789aab10544d4935905163ff8</anchor>
      <arglist>(const GearJointConf &amp;data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1GearJoint.html</anchorfile>
      <anchor>a47a8832ceb780632a61883551107187a</anchor>
      <arglist>(const GearJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::GearJointConf</name>
    <filename>structplayrho_1_1d2_1_1GearJointConf.html</filename>
    <base>JointBuilder&lt; GearJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; GearJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a94653fdd123e340df4cb748a59482a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GearJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a9e5904031baa113057e69ab08e1391d6</anchor>
      <arglist>(NonNull&lt; Joint * &gt; j1, NonNull&lt; Joint * &gt; j2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf &amp;</type>
      <name>UseRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a09c3c90bae01e1734bc137b98ccd8c5d</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NonNull&lt; Joint * &gt;</type>
      <name>joint1</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a95763e18f5977abdec1f86120665c654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNull&lt; Joint * &gt;</type>
      <name>joint2</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ac9cc0bf0ad79154bc6f6c68b95d080ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>ratio</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a738bfaf044a89d5ceaeefaad4930deeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::GrowableStack</name>
    <filename>classplayrho_1_1GrowableStack.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ElementType</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a96746e86907cd1053b982e432ce680db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>CountType</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a7d7f4c80b39831539b8f978700087ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GrowableStack</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a19c7450cd68265a17512a9639d6616bc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GrowableStack</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a9c10a27e7f004f614cee4f95b40903a9</anchor>
      <arglist>(const GrowableStack &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GrowableStack</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>ae23c37b1e689611775fae0ba861ab4b8</anchor>
      <arglist>(GrowableStack &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GrowableStack</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a1b8cf90e8ed8c94408746c241e5d0fb6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>GrowableStack &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a50607be467b265beb424ed09abbfebd1</anchor>
      <arglist>(const GrowableStack &amp;copy)=delete</arglist>
    </member>
    <member kind="function">
      <type>GrowableStack &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>af7078721936616126854b25f928eb7da</anchor>
      <arglist>(GrowableStack &amp;&amp;copy)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a9a52c69b5e506bef0d458f1631ca3514</anchor>
      <arglist>(const ElementType &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>top</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>aca6d1bc59a1ba12492ed2ae2c9974590</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>abd96c05bbcee5de9e40962a4a62a4bfc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR CountType</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a6bf5312601b4c23bb288dcad4c1addd0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR CountType</type>
      <name>capacity</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a87831b4b5ddc8e867f59ab57c6bb6b03</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a6ac87e2969fa5c650a3f59226504cb7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR CountType</type>
      <name>GetInitialCapacity</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a21c34e7151a5eeebeacfad4891802836</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR CountType</type>
      <name>GetBufferGrowthRate</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a6cb5063f3688b411c83f37935a4dbd46</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; playrho::ContactKey &gt;</name>
    <filename>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</filename>
    <member kind="typedef">
      <type>playrho::ContactKey</type>
      <name>argument_type</name>
      <anchorfile>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</anchorfile>
      <anchor>ac19c78e4d7df44d45e71d6eaca2235da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>result_type</name>
      <anchorfile>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</anchorfile>
      <anchor>abfe90dda9bfc6a5c384d90d59672a396</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</anchorfile>
      <anchor>a27a49d68d0a2f2ef540a4590b3f0b26c</anchor>
      <arglist>(const playrho::ContactKey &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::HasOne</name>
    <filename>structplayrho_1_1HasOne.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::HasOne&lt; T, detail::VoidT&lt; decltype(T{1}) &gt; &gt;</name>
    <filename>structplayrho_1_1HasOne_3_01T_00_01detail_1_1VoidT_3_01decltype_07T_021_03_08_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::HasType</name>
    <filename>structplayrho_1_1HasType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::HasType&lt; T, std::tuple&lt; T, Ts... &gt; &gt;</name>
    <filename>structplayrho_1_1HasType_3_01T_00_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="class">
    <name>HasType&lt; T, std::tuple&lt; Ts... &gt; &gt;</name>
    <filename>structplayrho_1_1HasType.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::HasType&lt; T, std::tuple&lt; U, Ts... &gt; &gt;</name>
    <filename>structplayrho_1_1HasType_3_01T_00_01std_1_1tuple_3_01U_00_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Ts</templarg>
    <base>HasType&lt; T, std::tuple&lt; Ts... &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>playrho::HasType&lt; T, std::tuple&lt;&gt; &gt;</name>
    <filename>structplayrho_1_1HasType_3_01T_00_01std_1_1tuple_3_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>playrho::Interval</name>
    <filename>classplayrho_1_1Interval.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>af3f2912d491535ecbe0f8b03da2357b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::numeric_limits&lt; value_type &gt;</type>
      <name>limits</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aa866ea1ceb4bd34b4cb87ed352407ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a150df1a32ed2c387e6cdf12a405333cd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ade6b697e03dc280b32da7cee8e306d36</anchor>
      <arglist>(const Interval &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a8b7e32359b5a2af409544b11c6f95a91</anchor>
      <arglist>(Interval &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a986a2eb2d2acffae59cf0856e640f5b2</anchor>
      <arglist>(const value_type &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a664f4ece14d8ff7248925961bb2ac71b</anchor>
      <arglist>(const value_type &amp;a, const value_type &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a3547fc60049e8f81bd5dc772aa1755f5</anchor>
      <arglist>(const std::initializer_list&lt; T &gt; ilist) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aa65c4d056f0baa19cdeb90f3fe512d2f</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a8dee2cf813de69b22a8872c432a1ae7f</anchor>
      <arglist>(const Interval &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a296371ae35bc96229e72601b59469620</anchor>
      <arglist>(Interval &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Interval &amp;</type>
      <name>Move</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ae48f4d96fb67a3bf0542fca2d867326b</anchor>
      <arglist>(const value_type &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR value_type</type>
      <name>GetMin</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a3f3f36a20f0f8d6c1b074eb2e5a9b72d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR value_type</type>
      <name>GetMax</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a405f7446ba69cc504e57c7f21cbfa2a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Interval &amp;</type>
      <name>Include</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ab8bb35352e6bfae55df5dfef4c855bdb</anchor>
      <arglist>(const value_type &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Interval &amp;</type>
      <name>Include</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a384959b62a578e932a08566136363bcd</anchor>
      <arglist>(const Interval &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Interval &amp;</type>
      <name>Intersect</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a0b1a58f394dd2d7a2ac56d4eb9052e4e</anchor>
      <arglist>(const Interval &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Interval &amp;</type>
      <name>Expand</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a87dacf54b9fc02414eb075899c068fbb</anchor>
      <arglist>(const value_type &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Interval &amp;</type>
      <name>ExpandEqually</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ad8f421845860de11afe2c836cadbf2e4</anchor>
      <arglist>(const NonNegative&lt; value_type &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR value_type</type>
      <name>GetLowest</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a07d3c63e5a744128270027d5d4f2ef31</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR value_type</type>
      <name>GetHighest</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a4a1f75c2d832f0a9080b14c268f0feb0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>Interval&lt; Length &gt;</type>
      <name>LengthInterval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ab87595595939d0c7469bc1c48524598a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetCenter</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>abd40c765c799140cbe2b9e1ce4e82bb7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsIntersecting</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a6337a4ffbf1fbfb13eece2bb55b93435</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Interval&lt; T &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ae1f28075bffede36f3b4c48a477edfda</anchor>
      <arglist>(Interval&lt; T &gt; a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>abebf2ea3be7831ecd4559b2bc0d739c1</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a56e28e7223ba1dc78278773b81130c19</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ab24ce9e9d1f928ef3e60c6bede948966</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a54f2a9ebae8216d14665a627b78c81a8</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a4d1061544f64556d9c7d77ae547a60b8</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a6f7ace6468a69a7f600ff05d01598ffd</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::InvalidArgument</name>
    <filename>classplayrho_1_1InvalidArgument.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::IsAddable</name>
    <filename>structplayrho_1_1IsAddable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsAddable&lt; T1, T2, detail::VoidT&lt; decltype(T1{}+T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsAddable_3_01T1_00_01T2_00_01detail_1_1VoidT_3_01decltype_07T1_02_03_09T2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsArithmetic</name>
    <filename>structplayrho_1_1IsArithmetic.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsArithmetic&lt; T, detail::VoidT&lt; decltype(T{}+T{}), decltype(T{} - T{}), decltype(T{} *T{}), decltype(T{}/T{}) &gt; &gt;</name>
    <filename>structplayrho_1_1IsArithmetic_3_01T_00_01detail_1_1VoidT_3_01decltype_07T_02_03_09T_02_03_08_00_13b076c419f6d293489767099cc927ef.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsDivisable</name>
    <filename>structplayrho_1_1IsDivisable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsDivisable&lt; T1, T2, detail::VoidT&lt; decltype(T1{}/T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsDivisable_3_01T1_00_01T2_00_01detail_1_1VoidT_3_01decltype_07T1_02_03_2T2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsEqualityComparable</name>
    <filename>structplayrho_1_1IsEqualityComparable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsEqualityComparable&lt; T1, T2, detail::VoidT&lt; decltype(T1{}==T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsEqualityComparable_3_01T1_00_01T2_00_01detail_1_1VoidT_3_01decltype_07T1_02_03_0a_0aT2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsInequalityComparable</name>
    <filename>structplayrho_1_1IsInequalityComparable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsInequalityComparable&lt; T1, T2, detail::VoidT&lt; decltype(T1{} !=T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsInequalityComparable_3_01T1_00_01T2_00_01detail_1_1VoidT_3_01decltype_07T1_02_03_01_9_0aT2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsIterableImpl</name>
    <filename>structplayrho_1_1detail_1_1IsIterableImpl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsIterableImpl&lt; T, VoidT&lt; decltype(begin(std::declval&lt; T &gt;())), decltype(end(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(begin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*begin(std::declval&lt; T &gt;())) &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsIterableImpl_3_01T_00_01VoidT_3_01decltype_07begin_07std_1_1declval03f33fab2e1cfd99f2050523d9c757b5.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Island</name>
    <filename>structplayrho_1_1d2_1_1Island.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Body * &gt;</type>
      <name>Bodies</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a5005b959dd38bf8734e0ef5cf82e024f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Contact * &gt;</type>
      <name>Contacts</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>acb705890fc232aef195e196065cf1a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Joint * &gt;</type>
      <name>Joints</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a2be8a5a6ab1b1d26070f21dfec50ca5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Island</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>ae00cbb1d97257560186cabeb9e54b80d</anchor>
      <arglist>(Bodies::size_type bodyCapacity, Contacts::size_type contactCapacity, Joints::size_type jointCapacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Island</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a24f49287f346f68adeeca9d0d0e59d84</anchor>
      <arglist>(const Island &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Island</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a4808588b2f009458f027dce6a8893ba3</anchor>
      <arglist>(Island &amp;&amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Island</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>afe55a8f2025c257eb75983c49d1190ce</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>Island &amp;</type>
      <name>operator=</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a582cfc949b06b62aeea91daf76cf00ba</anchor>
      <arglist>(const Island &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>Island &amp;</type>
      <name>operator=</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a4a31dac0ca258e2c91a215608654af53</anchor>
      <arglist>(Island &amp;&amp;other) noexcept=default</arglist>
    </member>
    <member kind="variable">
      <type>Bodies</type>
      <name>m_bodies</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a9571a0c95656a13dace26eb0d4507839</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Contacts</type>
      <name>m_contacts</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a463fe7306a8bc3ecf7c0fd8a93d05feb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Joints</type>
      <name>m_joints</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>ab90c3c408a397dee3f30fea04fb675fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfBodies</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>ad81cfb61a8aae11d28836a542584dd7f</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfContacts</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a0613fe306ae99ce5ca98798c757a3dc2</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a1b38c605da457526f62c63035cb0affe</anchor>
      <arglist>(const Island &amp;island, const Body *entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>ae256b2876b134f9f6eaa583ee990e486</anchor>
      <arglist>(const Island &amp;island, const Contact *entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>af70534dab51f6fa6a15dd0399d8d8ff7</anchor>
      <arglist>(const Island &amp;island, const Joint *entry)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::IslandStats</name>
    <filename>structplayrho_1_1IslandStats.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>minSeparation</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a56647a7552d22c1601e221060571a1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>maxIncImpulse</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>ad6315063bcd677bfbf1fc02e3a4df5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>bodiesSlept</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a0e77adb6237f10240ff654d4b568baf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>contactsUpdated</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a26a43c272d9953c4e7ca5f8c98339a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>contactsSkipped</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a5527b23bccc7a5d52883c73d9a38d18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>solved</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a5b80c2efc3ebf289982130730d514259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimestepIters</type>
      <name>positionIterations</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a8300c0cdc5ecf44a03123484c4f90ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimestepIters</type>
      <name>velocityIterations</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a32a1db01bb6337f88faedc21b35c5175</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::IsMatrix</name>
    <filename>structplayrho_1_1IsMatrix.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</name>
    <filename>structplayrho_1_1IsMatrix_3_01Vector_3_01Vector_3_01T_00_01N_01_4_00_01M_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>M</templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsMultipliable</name>
    <filename>structplayrho_1_1IsMultipliable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsMultipliable&lt; T1, T2, detail::VoidT&lt; decltype(T1{} *T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsMultipliable_3_01T1_00_01T2_00_01detail_1_1VoidT_3_01decltype_07T1_02_03_01_5T2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsSquareMatrix</name>
    <filename>structplayrho_1_1IsSquareMatrix.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</name>
    <filename>structplayrho_1_1IsSquareMatrix_3_01Vector_3_01Vector_3_01T_00_01M_01_4_00_01M_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>M</templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsVector</name>
    <filename>structplayrho_1_1IsVector.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsVector&lt; Vector&lt; T, N &gt; &gt;</name>
    <filename>structplayrho_1_1IsVector_3_01Vector_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Joint</name>
    <filename>classplayrho_1_1d2_1_1Joint.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>LimitState</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2cf1732ac5dc8ac9a946238c19683bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_inactiveLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2cf1732ac5dc8ac9a946238c19683bc9a710018e38be8dd1681bcd30b155f3052</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_atLowerLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2cf1732ac5dc8ac9a946238c19683bc9ab6e143bf09cf16d0fae6e40b3c1419e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_atUpperLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2cf1732ac5dc8ac9a946238c19683bc9a09f4db7c39db5e6bdc2e8c4a02336c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_equalLimits</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2cf1732ac5dc8ac9a946238c19683bc9a481aab4efe14a536d3314e7617dc2b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_inactiveLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2cf1732ac5dc8ac9a946238c19683bc9a710018e38be8dd1681bcd30b155f3052</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_atLowerLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2cf1732ac5dc8ac9a946238c19683bc9ab6e143bf09cf16d0fae6e40b3c1419e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_atUpperLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2cf1732ac5dc8ac9a946238c19683bc9a09f4db7c39db5e6bdc2e8c4a02336c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_equalLimits</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2cf1732ac5dc8ac9a946238c19683bc9a481aab4efe14a536d3314e7617dc2b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Joint</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2e8767dbaeac328fa3934c234d7ce550</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a64ba4daa52cc8680e85460870bc41092</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>adc64a8edfe09b0d30e0450521458234f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2502bb62eb385ea45209e359689ec879</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ae35387bb3f7432abf71e18022c7c1920</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>abea83ebdb28d6b0ba9d0aba3862e8da6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>aafaeabda4bd5630f755788ce3d9ac2c2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2761ee851db87e899cd982f483f176e1</anchor>
      <arglist>(JointVisitor &amp;visitor) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>abb7aba6070daa47883a0e5696d6fd228</anchor>
      <arglist>(JointVisitor &amp;visitor)=0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetUserData</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>aaf59c48ce3cdb5389160723a2f21aeb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUserData</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a08bbef2957954b5ef200dc2d53bd2439</anchor>
      <arglist>(void *data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>af8f6de6b7babfd10ca8db383f987b68a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a41afec5eea2944fc3cc0fa320bdb496d</anchor>
      <arglist>(const Length2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsOkay</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a95b6f9162b5291c676558ee5d9ca4624</anchor>
      <arglist>(const JointConf &amp;def) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Joint</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a1de4876ca0feee291af6c75f12ccd5e9</anchor>
      <arglist>(const JointConf &amp;def)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>JointAtty</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a5e2db0e9a7e5e578a48916bfcdc3933f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a5e526de13d058239de088ab752f62c21</anchor>
      <arglist>(const Joint &amp;j) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ab9bed9fa175445dc6ef21428cb2ee4af</anchor>
      <arglist>(Joint &amp;j) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a06956449699a714a65070ea4f4e497c7</anchor>
      <arglist>(const Joint *joint)</arglist>
    </member>
    <member kind="function">
      <type>JointType</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ab274cbc54f178cbd8236401727296dcf</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::JointAtty</name>
    <filename>classplayrho_1_1d2_1_1JointAtty.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1JointAtty.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::JointBuilder</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <templarg></templarg>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; DistanceJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>DistanceJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; FrictionJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>FrictionJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; GearJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>GearJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; MotorJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>MotorJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; PrismaticJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>PrismaticJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; PulleyJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>PulleyJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; RevoluteJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>RevoluteJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; RopeJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>RopeJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; TargetJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>TargetJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; WeldJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>WeldJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; WheelJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>WheelJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ac157db7f8e6f8b9003dba97a1cd54ddd</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a4a3b2778ef2430433a4d9db9c4e4eab5</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a08e3b911e3b626c2d5886c8ccfa604a0</anchor>
      <arglist>(Body *b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab014662b0e7833357abed345723f8b1c</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>UseUserData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>ab4b1bef7a0e032367f52fca81427b8b9</anchor>
      <arglist>(void *v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::JointConf</name>
    <filename>structplayrho_1_1d2_1_1JointConf.html</filename>
    <member kind="function">
      <type></type>
      <name>JointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>a41e81283cbcb0ddebd41d52a29f52aa9</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>JointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>a1050dcff217ac9a8bf5fdc2853673f94</anchor>
      <arglist>(JointType t) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>JointType</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>a065391a66b87a1ea4a250754c26cb649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Body *</type>
      <name>bodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>ab0491a1c54557c72697f7f5b5efe00e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Body *</type>
      <name>bodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>afa2f841c8d2b694ddfe7278576fd352a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>collideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>aaa7f7c919649416cb14a4abb8deacc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>userData</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>a10afb2cc24d99c97468375b2123d54af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>aaae24e0e3eadefda8d4145490e1c49ab</anchor>
      <arglist>(JointConf &amp;def, const Joint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::JointKey</name>
    <filename>classplayrho_1_1d2_1_1JointKey.html</filename>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR Body *</type>
      <name>GetBody1</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>acac87257b94babbb7794529286b6325e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR Body *</type>
      <name>GetBody2</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>abbfd98454c21674ab7ee5830b11ebebb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR JointKey</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>a104dab32d44d334803781d87f41d0bc2</anchor>
      <arglist>(const Body *bodyA, const Body *bodyB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsFor</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>a050555233768cc04b61249789df08fd9</anchor>
      <arglist>(const JointKey key, const Body *body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::JointVisitor</name>
    <filename>classplayrho_1_1d2_1_1JointVisitor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JointVisitor</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>af1ec5a61b79798940d1aa5cb756c2671</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a182ddca5ce740c8543efd7bd8b8779e6</anchor>
      <arglist>(const RevoluteJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>ad818656d8f69585b449c389a9dbc65bb</anchor>
      <arglist>(RevoluteJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a7dd3e5f7a8e0dadc462d46f825f1ea62</anchor>
      <arglist>(const PrismaticJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>ac5c5727aa502f4259781060a977fddd1</anchor>
      <arglist>(PrismaticJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>aca703497aa9684991679fab1cebd21b5</anchor>
      <arglist>(const DistanceJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>aca8523d0b11c073057ef99d0ae32606c</anchor>
      <arglist>(DistanceJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a2331980f9c0cdd8ecaa4e2452afb778c</anchor>
      <arglist>(const PulleyJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>ab72c2850662d323a7c2a2673db4f48b1</anchor>
      <arglist>(PulleyJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a9031793287d4eaea8fa1b96da6f077a5</anchor>
      <arglist>(const TargetJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>ab5f7976c8ac8210c2a6e91a0b7401ed5</anchor>
      <arglist>(TargetJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a8e8fba9577ad451fffdd09cf9f0d4706</anchor>
      <arglist>(const GearJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a867c948909ae4940cfd533d80f6392cb</anchor>
      <arglist>(GearJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a7caec3f61e980d65f6085c9d0ebd7407</anchor>
      <arglist>(const WheelJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>ab5902513ad82d3e75e4eb348f016c4a6</anchor>
      <arglist>(WheelJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>ac536fb546b87902acc08381d031220df</anchor>
      <arglist>(const WeldJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>acd9db0d77ae44a91f3fce6f9e0d46852</anchor>
      <arglist>(WeldJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a4d69ee1af3c768962e799325e9501468</anchor>
      <arglist>(const FrictionJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>abdc68ad1fc2cb468320837e34896712d</anchor>
      <arglist>(FrictionJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a7d7535beb2ba8a0a17db5ef4e5d3cfa8</anchor>
      <arglist>(const RopeJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a36cfcaa5ef7ddd679442e8bacb854468</anchor>
      <arglist>(RopeJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a426716a9ae43bd48160ec84b0f4fba85</anchor>
      <arglist>(const MotorJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a396f921cc16d162d00f4fdde0a622e8c</anchor>
      <arglist>(MotorJoint &amp;joint)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JointVisitor</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a41351b66d92eea975289c7b514ca3bd4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JointVisitor</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a683f8983dc5bea60bad7a6a6ded33b72</anchor>
      <arglist>(const JointVisitor &amp;other)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JointVisitor</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a2d92bfcca84322ff0caafc39f0c050bc</anchor>
      <arglist>(JointVisitor &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>JointVisitor &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a4a648a93cc4e284987e56db02d6e95b7</anchor>
      <arglist>(const JointVisitor &amp;other)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>JointVisitor &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1JointVisitor.html</anchorfile>
      <anchor>a606a1809b1d4a3df233d6fca975f6e6e</anchor>
      <arglist>(JointVisitor &amp;&amp;other)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DynamicTree::LeafData</name>
    <filename>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</filename>
    <member kind="variable">
      <type>Body *</type>
      <name>body</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</anchorfile>
      <anchor>a5e80f1b0c229c457eb1ef6f878f8d6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Fixture *</type>
      <name>fixture</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</anchorfile>
      <anchor>a51e8498b4614eca45aac8ed8539e135e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ChildCounter</type>
      <name>childIndex</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</anchorfile>
      <anchor>a1a1172d98c356ab28405f0bdfe17b94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</anchorfile>
      <anchor>ab63957a6534ce7385503337c9a9119c6</anchor>
      <arglist>(const DynamicTree::LeafData &amp;lhs, const DynamicTree::LeafData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</anchorfile>
      <anchor>a22c2b474f92927440fb4845ca9a77e75</anchor>
      <arglist>(const DynamicTree::LeafData &amp;lhs, const DynamicTree::LeafData &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::LengthError</name>
    <filename>classplayrho_1_1LengthError.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::LengthIndexPair</name>
    <filename>structplayrho_1_1LengthIndexPair.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1LengthIndexPair.html</anchorfile>
      <anchor>ae536eb1885cee2b803e82e8171ab9eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexPair</type>
      <name>indices</name>
      <anchorfile>structplayrho_1_1LengthIndexPair.html</anchorfile>
      <anchor>ad6a89b69c4a84810b16b3be86f74e6b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::LengthIndices</name>
    <filename>structplayrho_1_1detail_1_1LengthIndices.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Length</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1detail_1_1LengthIndices.html</anchorfile>
      <anchor>ae65542d848e941bbadd0e87514161a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexCounterArray&lt; N &gt;</type>
      <name>indices</name>
      <anchorfile>structplayrho_1_1detail_1_1LengthIndices.html</anchorfile>
      <anchor>ac0afe75cf5e5314e21346c52ca71209e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::less&lt; playrho::d2::JointKey &gt;</name>
    <filename>structstd_1_1less_3_01playrho_1_1d2_1_1JointKey_01_4.html</filename>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less_3_01playrho_1_1d2_1_1JointKey_01_4.html</anchorfile>
      <anchor>a0d2ee56f590f1458c08c7650141d2550</anchor>
      <arglist>(const playrho::d2::JointKey &amp;lhs, const playrho::d2::JointKey &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalGreater</name>
    <filename>structplayrho_1_1LexicographicalGreater.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalGreater.html</anchorfile>
      <anchor>ac790375bb1a9eea06b81487d672a67c2</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalGreaterEqual</name>
    <filename>structplayrho_1_1LexicographicalGreaterEqual.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalGreaterEqual.html</anchorfile>
      <anchor>a6227678953085394aa7480fec8977542</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalLess</name>
    <filename>structplayrho_1_1LexicographicalLess.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalLess.html</anchorfile>
      <anchor>ab4454a1648e777f056ce57450746c7a9</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalLessEqual</name>
    <filename>structplayrho_1_1LexicographicalLessEqual.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalLessEqual.html</anchorfile>
      <anchor>a6c13e9bc94c64eeef2925b870caf7863</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Manifold</name>
    <filename>classplayrho_1_1d2_1_1Manifold.html</filename>
    <class kind="struct">playrho::d2::Manifold::Conf</class>
    <class kind="struct">playrho::d2::Manifold::Point</class>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unset</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aab0b6bab8f299c068c058ad66d1ada97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_circles</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa404a7aad615dac34bb439a4419bb603d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa8553bfcf72ca701046534f9db05a698a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa0aab1f9c4679f8d2ff978e5fe28a2e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxManifoldPoints)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a05c347426e71c41c3b5cff2ff42fa864</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContactFeature::Index</type>
      <name>CfIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>abfa05cdcf8c1ea283a03ad70e9ae0543</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContactFeature::Type</type>
      <name>CfType</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>acf4b47d8ef7fa8d2267b055934cec2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unset</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aab0b6bab8f299c068c058ad66d1ada97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_circles</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa404a7aad615dac34bb439a4419bb603d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa8553bfcf72ca701046534f9db05a698a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa0aab1f9c4679f8d2ff978e5fe28a2e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Manifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a27050de13d19927176e1ab48f8218ecd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Manifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a5cea02945f6e8c263c39c1679a96b7f4</anchor>
      <arglist>(const Manifold &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Type</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a94c0e33b32c3c76d23947c300aafdaa4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>GetPointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a6c95bd890c7d97e6d12b40b21c90002a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetContactFeature</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ae43c6ff32636526482ea1600511856f3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Momentum2</type>
      <name>GetContactImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ab0b5525239348b28de631f510a416602</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContactImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>af270f6aebe84d08ff5de8eea1f2ccbe4</anchor>
      <arglist>(size_type index, Momentum2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>GetPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>afc69f25e15e201ca7db3fd75e9c04ac3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPointImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a477022edb23b761024a659e533098047</anchor>
      <arglist>(size_type index, Momentum n, Momentum t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a1399ecf9d6951ca8b72dd34dc66d1e75</anchor>
      <arglist>(const Point &amp;mp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ae52dee2b3919b2ef87c65d281ec12ccc</anchor>
      <arglist>(CfType type, CfIndex index, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetLocalNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a259390aa94937240ac807224cdbfa209</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a94067e4bd3147493275d63f557a325f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>GetOpposingPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a64ae6798b8aca0aa8d194daefe284aa5</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForCircles</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ab19eafd2d1d5c978707fcfcd043a5b16</anchor>
      <arglist>(Length2 vA, CfIndex iA, Length2 vB, CfIndex iB) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ae36eca50e09df75844bc8b0f5b1571c8</anchor>
      <arglist>(UnitVec normalA, Length2 faceA) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ae152f8218cc779409748741948cee42c</anchor>
      <arglist>(UnitVec ln, Length2 lp, const Point &amp;mp1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a66a2eb957b8c145582d1bbb746f0ba58</anchor>
      <arglist>(UnitVec ln, Length2 lp, const Point &amp;mp1, const Point &amp;mp2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a5b6211aa32f902554f00e03a92b55b7f</anchor>
      <arglist>(UnitVec ln, Length2 lp) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>afe0f58542ec85b3157ecfc8eb116aa84</anchor>
      <arglist>(UnitVec ln, Length2 lp, const Point &amp;mp1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a085b3c271852fd58f09f66af00196360</anchor>
      <arglist>(UnitVec ln, Length2 lp, const Point &amp;mp1, const Point &amp;mp2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a638197fe01a1a3a66f8d824cfb6007c5</anchor>
      <arglist>(UnitVec na, CfIndex ia, Length2 pa) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a655c5947eb274f1bde7d272cf6d00a4d</anchor>
      <arglist>(UnitVec nb, CfIndex ib, Length2 pb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ad7dc371a98115275e9e0960ce15d4be9</anchor>
      <arglist>(UnitVec na, CfIndex ia, Length2 pa, CfType tb0, CfIndex ib0, Length2 pb0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a282ec25d1d0f99e4ebf6f2cc91e64816</anchor>
      <arglist>(UnitVec nb, CfIndex ib, Length2 pb, CfType ta0, CfIndex ia0, Length2 pa0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a6c5c998571725b32efb5bd954055c658</anchor>
      <arglist>(UnitVec na, CfIndex ia, Length2 pa, CfType tb0, CfIndex ib0, Length2 pb0, CfType tb1, CfIndex ib1, Length2 pb1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a3895a7108d8b9bc5d678b5cf2336181a</anchor>
      <arglist>(UnitVec nb, CfIndex ib, Length2 pb, CfType ta0, CfIndex ia0, Length2 pa0, CfType ta1, CfIndex ia1, Length2 pa1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a18bbc8e12d21c4ae260d0bb333e0eed5</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ab7261adb2e0ccb0b3db58fc194d50614</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>CollideShapes</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a05380ac6609b4f7b27e4c1ae9e9e7535</anchor>
      <arglist>(const DistanceProxy &amp;shapeA, const Transformation &amp;xfA, const DistanceProxy &amp;shapeB, const Transformation &amp;xfB, Manifold::Conf conf=GetDefaultManifoldConf())</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>acd1a48ca1b0a7f336a3404b2eb5bab5d</anchor>
      <arglist>(const d2::Manifold &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a54c453e054f0b9692dc3300e5861f42c</anchor>
      <arglist>(const Manifold &amp;manifold, Transformation xfA, Length radiusA, Transformation xfB, Length radiusB)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::MassData</name>
    <filename>structplayrho_1_1detail_1_1MassData.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Vector&lt; Length, N &gt;</type>
      <name>center</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>a95c432524989b39cbb1574548f53bf61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Mass &gt;</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>ad30925834c09f1179332797ce4ce4f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; RotInertia &gt;</type>
      <name>I</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>abc772e841838fddea807268d27dddb55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>ae5836a818477a066a253a0fa6fd8f2c6</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>a0e76b1db2bbc00a66397e207279070f3</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::MotorJoint</name>
    <filename>classplayrho_1_1d2_1_1MotorJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>MotorJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a9e77295e32a8fa58a7eeb73b87db29cd</anchor>
      <arglist>(const MotorJointConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a5e5f7eacd83fc98edf5795b3b033cc3f</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>ac9c1657c687ec26391df98d294121c92</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a9104d2fcf4ea96cf6ff16ea44983b483</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a25f13a3e1079383a0e97919aa6cb7bbe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a5b334af08b7163fa8d52815e7b6afa1a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>ab956b0ed430f2d84b2eb51c089c9e9dc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>ac246fe30a5bff9c1bcd6fba27c81fc6c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a33891065d9f8841008c171b6a9fcae94</anchor>
      <arglist>(const Length2 linearOffset)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a6f128abce5b89edb25d53171beb793fa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a36ed928caf272fba676090574e399625</anchor>
      <arglist>(Angle angularOffset)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Force &gt;</type>
      <name>GetMaxForce</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>aabc917cac83ea23faf3299dae1e4b0b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxForce</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a98ab6f83d636cf534256f5cf8bba1548</anchor>
      <arglist>(NonNegative&lt; Force &gt; force)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Torque &gt;</type>
      <name>GetMaxTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a3320d02413fc2e705e28d2e57b260180</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a0c4a728bae8c650761969f2f9c94ed8a</anchor>
      <arglist>(NonNegative&lt; Torque &gt; torque)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetCorrectionFactor</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a82a24f37f8df8b4b912d666492ad5229</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCorrectionFactor</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a9245b78f8c2437be65aa74a58a6c5988</anchor>
      <arglist>(Real factor)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearError</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a348ebca9d2bd2a7579e764262bf17897</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularError</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a7e09ea41b56bc23aa732049533778bfe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1MotorJoint.html</anchorfile>
      <anchor>a3d3e840a6937715846380ef07fcf7b68</anchor>
      <arglist>(const MotorJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::MotorJointConf</name>
    <filename>structplayrho_1_1d2_1_1MotorJointConf.html</filename>
    <base>JointBuilder&lt; MotorJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; MotorJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a9905449d772cb2f70edb5a7acea4b8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>MotorJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a62679d401104aad32141574bbf80f416</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotorJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a4503aee3799d26c3bc6c1b0b045631d8</anchor>
      <arglist>(NonNull&lt; Body * &gt; bodyA, NonNull&lt; Body * &gt; bodyB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf &amp;</type>
      <name>UseLinearOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a2b69e90365d189b41229fa152572372d</anchor>
      <arglist>(Length2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf &amp;</type>
      <name>UseAngularOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a535262ea663480b0784b1c41ce2855ef</anchor>
      <arglist>(Angle v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf &amp;</type>
      <name>UseMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a8af58ae66a92db2ec9841b43543dfc7d</anchor>
      <arglist>(NonNegative&lt; Force &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf &amp;</type>
      <name>UseMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a9e7f9d69af80ec1f43a82cecafd7e715</anchor>
      <arglist>(NonNegative&lt; Torque &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf &amp;</type>
      <name>UseCorrectionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a4e30921694805995502f309d407b006f</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>linearOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a7f1eb7d88f969a24a4c3f33f4bfa9e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angularOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aece1946de51fb38a8720af6b22c8abe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Force &gt;</type>
      <name>maxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ae72dd67a4e667a4543e9b58bc5279a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Torque &gt;</type>
      <name>maxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ac9a7dcf98f31d2247acbb35332520396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>correctionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a32ca8e0a69670cf39621f908965d1a01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::MovementConf</name>
    <filename>structplayrho_1_1MovementConf.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>maxTranslation</name>
      <anchorfile>structplayrho_1_1MovementConf.html</anchorfile>
      <anchor>aa685b405a15189fe13d7982846f83dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxRotation</name>
      <anchorfile>structplayrho_1_1MovementConf.html</anchorfile>
      <anchor>a2021570112ff2beb19a7ce9ea96d53b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::MultiShapeConf</name>
    <filename>structplayrho_1_1d2_1_1MultiShapeConf.html</filename>
    <base>ShapeBuilder&lt; MultiShapeConf &gt;</base>
    <member kind="function">
      <type></type>
      <name>MultiShapeConf</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a622ea6c49c19d01616b1ad1570f4f568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MultiShapeConf &amp;</type>
      <name>AddConvexHull</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a8129502b37cd4a1e82fc7f82fb3e3c5e</anchor>
      <arglist>(const VertexSet &amp;pointSet, NonNegative&lt; Length &gt; vertexRadius=GetDefaultVertexRadius()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MultiShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a0182d08b91c3a8c3e2d7096cdc016db2</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a7d2a15ec3044e03c69be7bea285568ed</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MultiShapeConf</type>
      <name>GetDefaultConf</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>afb36a83892bfd4c7f2afe628ccad09f4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConvexHull &gt;</type>
      <name>children</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a8ce9bba8e17bdb910b906fdb9220e124</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::numeric_limits&lt; playrho::Fixed&lt; BT, FB &gt; &gt;</name>
    <filename>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>FB</templarg>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR playrho::Fixed&lt; BT, FB &gt;</type>
      <name>min</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a354b3d41b49762248ec26566208c056b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR playrho::Fixed&lt; BT, FB &gt;</type>
      <name>max</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a7271a3fa3e4cb5e779e7b9c4030ee13c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR playrho::Fixed&lt; BT, FB &gt;</type>
      <name>lowest</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a0cf010d5e42947c52dd69962f41cd871</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR playrho::Fixed32</type>
      <name>epsilon</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>aa90282028e3ba426f0f81f61dc69a683</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR playrho::Fixed32</type>
      <name>round_error</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ab4b9459b936e660cf90bcebda36ac716</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR playrho::Fixed&lt; BT, FB &gt;</type>
      <name>infinity</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>abcb8f760fb7556ba3a89fb38d56837bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR playrho::Fixed&lt; BT, FB &gt;</type>
      <name>quiet_NaN</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ae60f1cca96de32d632e2c956f60dc431</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR playrho::Fixed&lt; BT, FB &gt;</type>
      <name>signaling_NaN</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a382ec0b609dd963b4a989cdcae5e38c1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR playrho::Fixed&lt; BT, FB &gt;</type>
      <name>denorm_min</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a3e0217f072d682ca72f207688373537c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>is_specialized</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a67501c57769e711435d0ae80afb8b3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR int</type>
      <name>digits</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ac2f98d94bcc590b7e4f1b0c63798c4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR int</type>
      <name>digits10</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a8802ba7b9dc7767becaa9c09cc47a118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR int</type>
      <name>max_digits10</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ab633df40be2cb6c615729402d2b05816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>is_signed</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a8e989d243856e7c5adff6813abcad99d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>is_integer</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>af7de0e8fd419e5bbf6ca732dd4420059</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>is_exact</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a5a082d90163fc729ad4cd5f1027c53c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR int</type>
      <name>radix</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ad1aa726bd3e3419f9626f6124e050182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR int</type>
      <name>min_exponent</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ab793c40cfbab5ac6698da6dacbef1412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR int</type>
      <name>min_exponent10</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a6baf4e4e4cd735c1a559819f4a3c3f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR int</type>
      <name>max_exponent</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a2dd64ba3747142810eeb8edae09c9243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR int</type>
      <name>max_exponent10</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>aa074a800c1486cb2a543819e4aba73f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>has_infinity</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a4460f89d3d952a354a6b047ac8d63e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>has_quiet_NaN</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a946884fe96a703c80b5b6e8f03730f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>has_signaling_NaN</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a964069e87131651a3cc9a6d94782259b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR float_denorm_style</type>
      <name>has_denorm</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ab959a3b87c25dd19567ecf0cd8ae65a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>has_denorm_loss</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a0af1482ae596f2039eee4434481bbd6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>is_iec559</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a960127acc464978cce3bde1e7e292842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>is_bounded</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a4550343364d8df0ba2a7d4b01414706d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>is_modulo</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ac9e678b9b8e60c84ab27d99fb5745330</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>traps</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>adeb105ebfb12a4eb0a17e8ab463a28da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>tinyness_before</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a18479f3bd47891f2b52a471893cd8b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR float_round_style</type>
      <name>round_style</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ab6b6747ed9457608056945d10363541f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::OptionalValue</name>
    <filename>classplayrho_1_1OptionalValue.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>aa47474e3410a8bb405046cd6054a0ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>OptionalValue</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a2b84b0ffd5e4f378663c4956d2a53937</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>OptionalValue</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a05d817ef3946816ea3e78928045cee1f</anchor>
      <arglist>(const OptionalValue &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>OptionalValue</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a014156d687a3a424e687cd9e733fabd6</anchor>
      <arglist>(OptionalValue &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>OptionalValue</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a215eb9cdb16824f48daa9c1688a0a9ac</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptionalValue</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>ae907a1e2a099379b9a9d5dca9c26ca51</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>afc472436e3362e82db7540fce9f40fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a0683762bf9ff1c008bac2604add1a1e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a6c26a2a52eaa8f328a21beb71d363d80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>aafa28319c56974a6535b1eec531882d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator bool</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a56b72c835a0c72cc738f317a5af46143</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>has_value</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a7b38feb32e81fd67f1b1341b6774dc5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OptionalValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a6fb2468b7cebcb512239348dc49a9bbe</anchor>
      <arglist>(const OptionalValue &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>OptionalValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a379368ae4e2b7e08706b4a40de5d2194</anchor>
      <arglist>(OptionalValue &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OptionalValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a3629c06e8ae4d8bc2402ee2a9ae98f0c</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T &amp;</type>
      <name>value</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a3aa87e9d869d55056174aaee7f5d61fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T &amp;</type>
      <name>value</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a079b492b5b173e071c3d6d39d0f17b81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>value_or</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a8267e92811bb025ceae037e2465f6cb0</anchor>
      <arglist>(const T &amp;alt) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>ac46d94797fff49c032d74111c3ee54a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OptionalValue&lt; JointType &gt;</name>
    <filename>classplayrho_1_1OptionalValue.html</filename>
    <member kind="typedef">
      <type>JointType</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>aa47474e3410a8bb405046cd6054a0ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>OptionalValue</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a2b84b0ffd5e4f378663c4956d2a53937</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>OptionalValue</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a05d817ef3946816ea3e78928045cee1f</anchor>
      <arglist>(const OptionalValue &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>OptionalValue</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a014156d687a3a424e687cd9e733fabd6</anchor>
      <arglist>(OptionalValue &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>OptionalValue</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a215eb9cdb16824f48daa9c1688a0a9ac</anchor>
      <arglist>(JointType v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptionalValue</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>ae907a1e2a099379b9a9d5dca9c26ca51</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR JointType &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>afc472436e3362e82db7540fce9f40fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR JointType &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a0683762bf9ff1c008bac2604add1a1e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR JointType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a6c26a2a52eaa8f328a21beb71d363d80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR JointType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>aafa28319c56974a6535b1eec531882d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>operator bool</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a56b72c835a0c72cc738f317a5af46143</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>has_value</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a7b38feb32e81fd67f1b1341b6774dc5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>OptionalValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a6fb2468b7cebcb512239348dc49a9bbe</anchor>
      <arglist>(const OptionalValue &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>OptionalValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a379368ae4e2b7e08706b4a40de5d2194</anchor>
      <arglist>(OptionalValue &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OptionalValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a3629c06e8ae4d8bc2402ee2a9ae98f0c</anchor>
      <arglist>(JointType v)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR JointType &amp;</type>
      <name>value</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a3aa87e9d869d55056174aaee7f5d61fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR JointType &amp;</type>
      <name>value</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a079b492b5b173e071c3d6d39d0f17b81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR JointType</type>
      <name>value_or</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>a8267e92811bb025ceae037e2465f6cb0</anchor>
      <arglist>(const JointType &amp;alt) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classplayrho_1_1OptionalValue.html</anchorfile>
      <anchor>ac46d94797fff49c032d74111c3ee54a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::VelocityConstraint::Point</name>
    <filename>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>relA</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>afea6779d37d712bc631486e169375b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>relB</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>ad8c383e7af738ac5cbfb1ece23f929bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>normalImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a07214867dc5dbd761c7566e727d47165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>tangentImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a46981d0d52f8dd1c4e0d343ea0c6b789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>normalMass</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>af86742c9f4bc34e8627e1a2e3abd9650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>tangentMass</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a2042c9c49d68f33fb1d14915aee92f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>velocityBias</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a299776dd779c0df434dcf430a9702c75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Manifold::Point</name>
    <filename>structplayrho_1_1d2_1_1Manifold_1_1Point.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>localPoint</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a5348993dcfb618cbd8b0fc90dceee8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactFeature</type>
      <name>contactFeature</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a7167ff28b5f0904bec2d23f896725f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>normalImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a30a0186139d64d835043d665cd832463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>tangentImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a8cb59ad4a08b8c95d54bb940eff1356f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a30d3152820c6a35af37c2139d316d1da</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a72a1cdedaec111016d79f96aa4970cef</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldManifold::PointData</name>
    <filename>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>location</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</anchorfile>
      <anchor>aea6708ae9b1403f9945f268497ecc62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum2</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</anchorfile>
      <anchor>a7f514ec10ce3a9610e5fd89cdb45eae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>separation</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</anchorfile>
      <anchor>a1790b3ac6bead0e07902e50b74fd3a66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::PointStates</name>
    <filename>structplayrho_1_1PointStates.html</filename>
    <member kind="variable">
      <type>PointState</type>
      <name>state1</name>
      <anchorfile>structplayrho_1_1PointStates.html</anchorfile>
      <anchor>afdb16526dc8ff9695d14b2ca4f7abc0d</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
    <member kind="variable">
      <type>PointState</type>
      <name>state2</name>
      <anchorfile>structplayrho_1_1PointStates.html</anchorfile>
      <anchor>a94bc744b819fb153e5fefc1cf7e0a0c1</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::PolygonShapeConf</name>
    <filename>classplayrho_1_1d2_1_1PolygonShapeConf.html</filename>
    <base>ShapeBuilder&lt; PolygonShapeConf &gt;</base>
    <member kind="function">
      <type></type>
      <name>PolygonShapeConf</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a0e94d9b35ce7c7dce34b90a704d9e6a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonShapeConf</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a42edb2fd063c171ba2808f41290dd2b2</anchor>
      <arglist>(Length hx, Length hy, const PolygonShapeConf &amp;conf=GetDefaultConf()) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonShapeConf</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a19d8dd9f7366d14ee1c7c2c3f2e16cde</anchor>
      <arglist>(Span&lt; const Length2 &gt; points, const PolygonShapeConf &amp;conf=GetDefaultConf()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>UseVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a794190ea846c9740a083a138df49b53f</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>UseVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a03c30734fb3bea61184cd60242292522</anchor>
      <arglist>(const std::vector&lt; Length2 &gt; &amp;verts) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>SetAsBox</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>aaccd7ca4c4e1fa493fe4dca42d200d33</anchor>
      <arglist>(Length hx, Length hy) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>SetAsBox</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a0418323b917825bf3c806d021326a8b6</anchor>
      <arglist>(Length hx, Length hy, Length2 center, Angle angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a0f0f7f5c1e7813f0fddfbec61f67fab6</anchor>
      <arglist>(Span&lt; const Length2 &gt; verts) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>ab8b2c8db9fce1f6ffeb54999ad470533</anchor>
      <arglist>(const VertexSet &amp;points) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>ad4f18191bdca333f5ae7a3bd72f55492</anchor>
      <arglist>(Transformation xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a3d0ad326e4fe500df26659f2e2c911f5</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetVertexCount</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>af8ebdeefc032af260648a6f22ef2d5d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertex</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>ae8f44760bbca63a7d2f24e61ef0ae483</anchor>
      <arglist>(VertexCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a717c9833aa73b9c7ba8a831ac1ed849f</anchor>
      <arglist>(VertexCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>Span&lt; const Length2 &gt;</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>af204b554caf67699a0266a98283ad65d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Span&lt; const UnitVec &gt;</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a5d8edab6a66d2fb2d4fe6f239778f996</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetCentroid</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>af7d3c5f204842ca4d69767a947967867</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a964f148cd7c5507a2d0a39f36bbc73fa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PolygonShapeConf</type>
      <name>GetDefaultConf</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a9a88202e222078955d2489db3cd1a2ff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a85a22e05b0a08405afcd1e26b541dc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a63cafb11d617b347c4a9b8b9c5d9f03b</anchor>
      <arglist>(const PolygonShapeConf &amp;lhs, const PolygonShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a7702bc246ae38c520cea78d599de7493</anchor>
      <arglist>(const PolygonShapeConf &amp;lhs, const PolygonShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a066828295fc1238756f5adf1f3502343</anchor>
      <arglist>(const PolygonShapeConf &amp;shape, VertexCounter index)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Position</name>
    <filename>structplayrho_1_1d2_1_1Position.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>linear</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a0e1c6a8ff1b5c12185ed6d168168352d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angular</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a9736efa8287839f997bfe73a2cca5d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a0b325984ddf275be8575ac041401cdc2</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a8db523eb206a1723feb68fc11183edd7</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a801c517fa59ec5a2c9027662c6f4cd97</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>ae02afd1c287e2db64fa85a1b6542c075</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position &amp;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a807afcdc1b971f4688ec64bc0643c3f8</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a14cd1db8f0ef39b121f8f4f704561277</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position &amp;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>ab64d27801b571b2ed1c331d983868fa0</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a1d9083b02a7ce6a77e29b85e091640e5</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>afbd759adf86eff9713875869bef74e16</anchor>
      <arglist>(const Real scalar, const Position &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a2e1c3c15bbaf21f605e15f88c8d55db8</anchor>
      <arglist>(const d2::Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>GetPosition</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>aa791f769d7311d093e53b09c772b78d6</anchor>
      <arglist>(const Position pos0, const Position pos1, const Real beta) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::PositionConstraint</name>
    <filename>classplayrho_1_1d2_1_1PositionConstraint.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxManifoldPoints)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a7ad49b49ea4a42d2f38c0ceb04c011c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a20ce8042961849aaa195534b35602ba9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a4119c5d77ea709477bc05da990f4667e</anchor>
      <arglist>(const Manifold &amp;m, BodyConstraint &amp;bA, Length rA, BodyConstraint &amp;bB, Length rB)</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint *</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>af08bd511f62aa56ade87fc6190177d1f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint *</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a2d2ff7f03b3ac20606c9656e16d94254</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetRadiusA</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a56e5a795efe6deb2f0a74ffa0a8e09c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetRadiusB</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a8b538237647245392998ca5783bfd5ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Manifold</type>
      <name>manifold</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a5c075475304d221d85d788b1ed2044e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PositionSolution</name>
    <filename>structplayrho_1_1d2_1_1PositionSolution.html</filename>
    <member kind="variable">
      <type>Position</type>
      <name>pos_a</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolution.html</anchorfile>
      <anchor>a94dcd535a62f19ae0753dd1013a23f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>pos_b</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolution.html</anchorfile>
      <anchor>a4a2eb9fb99af276f37080ed47ee29f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>min_separation</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolution.html</anchorfile>
      <anchor>a97ddb12bb40404b746000169247f3d07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PositionSolverManifold</name>
    <filename>structplayrho_1_1d2_1_1PositionSolverManifold.html</filename>
    <member kind="variable">
      <type>UnitVec</type>
      <name>m_normal</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolverManifold.html</anchorfile>
      <anchor>ae2a97c6f55ca6b63af6d0ac5cb8051af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>m_point</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolverManifold.html</anchorfile>
      <anchor>a815fb3af92df6eb9f46ab5ac45d69d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>m_separation</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolverManifold.html</anchorfile>
      <anchor>a3bfdfd3b788793b1a0f17dc99e72cdbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::PreStepStats</name>
    <filename>structplayrho_1_1PreStepStats.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>counter_type</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a3d2ba1ef027e1612d7631cc1a3c0de33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>proxiesMoved</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>aa74721e50128fa65a1de046dbf368743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>destroyed</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a62ba523ddae45bd7f16766075b5d71ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>added</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a9342f0dc6ecefd1d1519804f013cd164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>ignored</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a935bdc19edba8c3a8e4e83203d5ff534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>updated</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a0f7525eed88446bcb034e37bb8f51f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>skipped</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a4ac67155c97fe89e223375eb442ebfba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::PrismaticJoint</name>
    <filename>classplayrho_1_1d2_1_1PrismaticJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>PrismaticJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a25637dc9408176996058d99722776ac2</anchor>
      <arglist>(const PrismaticJointConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a4f0efc0adc41d1b73bb21e3ebfea3f4e</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>ab19bafe6dc31c794c7fb121489098959</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a5459cbd463e1065377bac025f0696c61</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a124f8af35a15046398697df6fb2e1744</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a5c3b99eda3c77618e7b9582b1ad5a18f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a5bf8d14b80feca539187894c7c022bcb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a14c87b91785bf18bd9381dd7f7a46644</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a7cff34ce97cfd639380f8abe9b1a1c8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalAxisA</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a64be30cf8676ead7338af8ce58c48ac8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>ab7b6029d143c498455269811af3e1925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a273f87b7642c10d41bfbe4f60e0919eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>abde683572e3eda2348f4ff679762ca42</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLowerLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a93baf1343ca39a5496fe5c7b257e2e58</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetUpperLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a2c8c01197a485aacd0655e266aa68dc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLimits</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a97f75f0d723d2c0aab1af3dff8630ec7</anchor>
      <arglist>(Length lower, Length upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a9678e65fe5d664afe8241a9e38c00b7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>ae1750099293f09972ab2e17dacbc7d9e</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a44a3ec993aef96c10e05816b121186fa</anchor>
      <arglist>(AngularVelocity speed) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a210085214ead34f375c2aed3c00ad3a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a46e122cbefc4b6727dcb153093074587</anchor>
      <arglist>(Force force) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxMotorForce</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>abc636011be24e093e6118c33aec8d308</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetMotorImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a777fbdd5f29136ffba37c438eff3330b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>ac5d2cd159dc1852e8cfd078bb9f8a2c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a5a7670d3ce160acd59649d8fa877ae85</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetLinearVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>adcd27abba8be9fe2f9c2e02fa2bbcd86</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMotorForce</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>a00adda0f4423a7889aa94e49ed5b561a</anchor>
      <arglist>(const PrismaticJoint &amp;joint, Frequency inv_dt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1PrismaticJoint.html</anchorfile>
      <anchor>aef2b20cbcd83c2314aae9974da396826</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PrismaticJointConf</name>
    <filename>structplayrho_1_1d2_1_1PrismaticJointConf.html</filename>
    <base>JointBuilder&lt; PrismaticJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; PrismaticJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a97aa04eb737dafc20bd6b9c71cd08027</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>PrismaticJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ad3eea86ebe912720fc87ad277fe8fde3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrismaticJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a59cea99dc54f1b0a3c1a21615ddfd7aa</anchor>
      <arglist>(const PrismaticJointConf &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrismaticJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a0d7ecb4cc83b40bcfe7b0d5df945751c</anchor>
      <arglist>(NonNull&lt; Body * &gt; bodyA, NonNull&lt; Body * &gt; bodyB, const Length2 anchor, const UnitVec axis) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf &amp;</type>
      <name>UseEnableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a2af5cd9cc6fafd172e9cfec94df94a46</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf &amp;</type>
      <name>UseLowerTranslation</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a5dfa489b35a7097b200a9b9d4a261f78</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf &amp;</type>
      <name>UseUpperTranslation</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>af9a0b714297894bd414ddf8272d4b583</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf &amp;</type>
      <name>UseEnableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a4c6080a8771cebea7c280de9dbbbc57b</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>acb27b85c4d08c968759d5d7796a1c029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a5a48a83723f94a0b0cdc50db53f39863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localAxisA</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a756b371c576fd6b4c5b515d7f90508c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>acf649fb9b1aa944fca93ce9a3aa0f35d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a1828f7c8df20ebd1a9dc9d7b7544683a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>lowerTranslation</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a1ffc6b4859a9124c61781fd10eea8ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>upperTranslation</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>aba43283e8cb93bca0a1aca2b6cd303a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>aeb33a2ae730aed0a2100bdb9d582d0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Force</type>
      <name>maxMotorForce</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a98ff45552fc5f8fe747626a43b4765da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>motorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a5ac7078c1d1fe807b2597830995eede5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::PulleyJoint</name>
    <filename>classplayrho_1_1d2_1_1PulleyJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>PulleyJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a1371b014e0d2b3efa90aadb95d112e3b</anchor>
      <arglist>(const PulleyJointConf &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a65329727cf29c7c8fbc11d0de1056604</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a645758f93c794403b0349b05efef4723</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a00af59da7ea56732cfc5d095e3e93597</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a37b1b2d0a5aedfff7820c884c49c66f5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>aac53b6851e2dbb36f6d98a778abd28b3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>ae35143e97c92baf4b2d3c76e1a591e58</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>ac15ec949b15596d474294762adb2423e</anchor>
      <arglist>(const Length2 newOrigin) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a735fd7b7bd5d232e55695313fa509d5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>afea9e6e048ddf31b44f345b1b4bf469c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>ae96af37b36792b684f0c9304ee2f873b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>abe43ab4cc591e4013152c2492e48d832</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLengthA</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a2729bc05d31bec0a29446dff823c7cba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLengthB</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a869cd97c0f36a66ef92426854f08b181</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a9d8a2dade8bb3e2bc9fa15aa71dc459f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthA</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a14a941545584e7cdd988f35be8cc0524</anchor>
      <arglist>(const PulleyJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthB</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>ae5523513c7bf6104e006be40abd13289</anchor>
      <arglist>(const PulleyJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1PulleyJoint.html</anchorfile>
      <anchor>a73d8424fa90990867932b237da9006b9</anchor>
      <arglist>(const PulleyJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PulleyJointConf</name>
    <filename>structplayrho_1_1d2_1_1PulleyJointConf.html</filename>
    <base>JointBuilder&lt; PulleyJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; PulleyJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a1919cd604668a09cab637428f1860840</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PulleyJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a8259ee38c23914223b018750df2c27c0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PulleyJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a5e8cf00c61107fd6fb0f144db886f62d</anchor>
      <arglist>(NonNull&lt; Body * &gt; bodyA, NonNull&lt; Body * &gt; bodyB, const Length2 groundAnchorA, const Length2 groundAnchorB, const Length2 anchorA, const Length2 anchorB)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf &amp;</type>
      <name>UseRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a828a2d9a7bfa4fa425f51e3a380ec8f0</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>groundAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>ae871b9f7f4170ab3c5d8649b105be628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>groundAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>abad43cab21334c27e18eddbcd29a307d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a5654e8eb83ec564fd4e13bc78c508ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a812dd6e228eee80b1ae52345f80bff79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>lengthA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>acff474ab17b3eef88979384619ca35e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>lengthB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a4f166e163524dd6342f9a4e8dcbdabbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>ratio</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>af58f34604aac5e68a092cc8a14ac3170</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::Range</name>
    <filename>classplayrho_1_1Range.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>IT</type>
      <name>iterator_type</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>ac6c98bebce9a665a4c0039726f25f79b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Range</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>a53304c4db0208a607d0c3a851ec31867</anchor>
      <arglist>(iterator_type iter_begin, iterator_type iter_end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR iterator_type</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>a5648770542e2ba5712cb6e2959dc96be</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR iterator_type</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>a43c052496631542ba90cb6ba90530253</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>a7d513731af62e0301db184cac1499e78</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::RayCastHit</name>
    <filename>structplayrho_1_1d2_1_1RayCastHit.html</filename>
    <member kind="variable">
      <type>UnitVec</type>
      <name>normal</name>
      <anchorfile>structplayrho_1_1d2_1_1RayCastHit.html</anchorfile>
      <anchor>a2a993f3e785fc0929c42d5cfe3efeb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitInterval&lt; Real &gt;</type>
      <name>fraction</name>
      <anchorfile>structplayrho_1_1d2_1_1RayCastHit.html</anchorfile>
      <anchor>ad58f1dad1048538e82f9716b6e1b09d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::RayCastInput</name>
    <filename>structplayrho_1_1detail_1_1RayCastInput.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Vector&lt; Length, N &gt;</type>
      <name>p1</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>ae704520881afed2dde9ad52c23466250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Length, N &gt;</type>
      <name>p2</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>ac2bf0abf53cc75c30d40e38440688dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitInterval&lt; Real &gt;</type>
      <name>maxFraction</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>aa0b141435d73218cda9930d7cc723ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>a5c551f67d9d86f42a5518cc7cc69a2ff</anchor>
      <arglist>(const playrho::detail::RayCastInput&lt; 2 &gt; &amp;input) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::RegStepStats</name>
    <filename>structplayrho_1_1RegStepStats.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>counter_type</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a28c54150b3b815b281bf5edeeea9a531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>minSeparation</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a81e12bb435f7cefe9879cca393b246fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>maxIncImpulse</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>ade610bd3954daebf0c1ade2b7d04a69e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>islandsFound</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>ab7d450a02ef4369564d88a69b53cc915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>islandsSolved</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a47e17195aadb3418bab41d74262f0358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsAdded</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a4072966f53fbc8629e9ca20f80fbdc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>bodiesSlept</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>ae8a6352918620a06c09a7801badc8f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>proxiesMoved</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>aad48bb0799fbca241b0fe72b71a9ad85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumPosIters</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a617e466c8bed191b228829b18436c0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumVelIters</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>acf9a3a63b6c0c7182005ff7ae6d381c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::RevoluteJoint</name>
    <filename>classplayrho_1_1d2_1_1RevoluteJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>RevoluteJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>afb611c13ea0b7fed0b8d6a64c4576337</anchor>
      <arglist>(const RevoluteJointConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>ae8bc6fc1c6ce6e056a991e01600bf5f0</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a56c4ba3fa6a15ec9fb98bfe843ed8875</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a2da2b33e7287e4097214f0402552ab53</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>ac3f00d3c82792a10cf3e1122e6bb4ca1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a1ba6fbdc104e0420e88d88f0a05f9075</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a7ada5c5aa07c87e5053315a869193a31</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a78a0454eb8fdf0af40dc1508d25e776e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a02824466f874652521d6d065e7df2a31</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a4bf19603cf8ee0db7c31f39a88bf257f</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetLowerLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a843aa38c6ae5ec466fc0a296e7b15771</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetUpperLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a2164f4fd772622c34186cd5d4ea56d94</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLimits</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a5a793779ba6e5acca4d2b3a6a3bbd205</anchor>
      <arglist>(Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a9ccbf9b57fdcb58610204f866486dad4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a22bffa82444c5774305f04a1b6680534</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a0c93a7e67ab83d76770c32229e814fe1</anchor>
      <arglist>(AngularVelocity speed)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a05278d811cb2373cf90e5da9b79ff3e4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a100b092b8f1031913690c1597df3fb2c</anchor>
      <arglist>(Torque torque)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a4a9e6a5e9e85cfa96db4f9b6a6ac2889</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a7eed04dd372560c8512984b26d6e4b38</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a6f2f29ba34867ee46b41f8200a969b95</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetMotorImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>ae7120ff6f2121cc53d579a66507b2e7d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>ac5f7c097d97064e245903684b2421e4b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetJointAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a1a4aed49a820640ab3902fcad07bb14f</anchor>
      <arglist>(const RevoluteJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a90728baa90a0569f4e7a0b218905d39f</anchor>
      <arglist>(const RevoluteJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>a595b857943513c1b14ed528dbd05a094</anchor>
      <arglist>(const RevoluteJoint &amp;joint, Frequency inv_dt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1RevoluteJoint.html</anchorfile>
      <anchor>ada7cb792bed88f18a0225923262d5268</anchor>
      <arglist>(const RevoluteJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::RevoluteJointConf</name>
    <filename>structplayrho_1_1d2_1_1RevoluteJointConf.html</filename>
    <base>JointBuilder&lt; RevoluteJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; RevoluteJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a65d0db4433a486e5e210757ba4b3c95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>RevoluteJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a099b2652bc7fb3162025746efa0aebb7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevoluteJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a611ad2d6456a1b6c0358c37f5c5954e6</anchor>
      <arglist>(NonNull&lt; Body * &gt; bodyA, NonNull&lt; Body * &gt; bodyB, const Length2 anchor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR RevoluteJointConf &amp;</type>
      <name>UseEnableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a5b8072c764c1869bdb83cb1c24a55aa7</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR RevoluteJointConf &amp;</type>
      <name>UseLowerAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a5492eb234f716c5ecb04903a99eebf4a</anchor>
      <arglist>(Angle v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR RevoluteJointConf &amp;</type>
      <name>UseUpperAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a70a281740c12f6b168445020511654ef</anchor>
      <arglist>(Angle v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR RevoluteJointConf &amp;</type>
      <name>UseEnableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ae11204f29056a15a24825210cee06dbc</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a2fcc05a844f7b23c1f6436a14ddc6b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ae121b11f06c2846c9c21f6bb859b41a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ae12fcb14448e24409280a4b2d680862f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>abb607270b510bd784d929c9338377987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>lowerAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a0ccc513b9e7cb2de2e69dc3ddafaa5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>upperAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a48178eb3386b21661b50428ad01a83a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ac3dad8b2ed239ab461f6f46f02a91d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>motorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ad4ade0ad13e33db6ff8ac1d7dc2a95f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Torque</type>
      <name>maxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a06214676ef7b5c1bde90398241c69f02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::RopeJoint</name>
    <filename>classplayrho_1_1d2_1_1RopeJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>RopeJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>a9412a4cfdc4bab52dee0fd9da87fce94</anchor>
      <arglist>(const RopeJointConf &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>a746b17509335f1258fb4d66bb8f9bddf</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>a854fe83b8a16d3fa6dc5b4636914a2e6</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>afa2c09d570775b7631c6d6317464cbfa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>ac07d7a759b195353610350d79e8ce96c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>a4d0228136bc78efef17782f4cb738ff8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>a934e324b91e3f46443204e592a68dfdf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>a4b27e2ea53e0213895b8722c4459af72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>a39f52fb5cdece9bf274dfdcfe8679e72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxLength</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>ab4a4cbda9111fde5ee619d17bf55654d</anchor>
      <arglist>(Length length)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxLength</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>aecfa4e778f3281c750da5e8fb87396a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>a86c8994a3e455d7ee31ba10bc89ecd59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RopeJointConf</type>
      <name>GetRopeJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1RopeJoint.html</anchorfile>
      <anchor>a32c2f5ba2c9becb7db0c7264d96822e1</anchor>
      <arglist>(const RopeJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::RopeJointConf</name>
    <filename>structplayrho_1_1d2_1_1RopeJointConf.html</filename>
    <base>JointBuilder&lt; RopeJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; RopeJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a8602b4d23d1f5952bf35c6cdb4c4885f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>RopeJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a1a4f6a271713d0f9232ba746262b9bfb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>RopeJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>af6aece5e214ca4dff823c7169dc183a0</anchor>
      <arglist>(Body *bodyA, Body *bodyB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR RopeJointConf &amp;</type>
      <name>UseMaxLength</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a699afbae729b7b58f5ec6f0a3f6593d5</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>acd5e67cc48836a7f923bc80919896665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ae118b073aebd3f30cc2305ab98a00e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxLength</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a99f6e04f43dec401dd2428001f67339a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::SeparationInfo</name>
    <filename>structplayrho_1_1detail_1_1SeparationInfo.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Length</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1detail_1_1SeparationInfo.html</anchorfile>
      <anchor>a52e9b815b891868dea807e7163cb62cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexCounter</type>
      <name>firstShape</name>
      <anchorfile>structplayrho_1_1detail_1_1SeparationInfo.html</anchorfile>
      <anchor>afa2a42c94308c4343111fff4d7880dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexCounterArray&lt; N &gt;</type>
      <name>secondShape</name>
      <anchorfile>structplayrho_1_1detail_1_1SeparationInfo.html</anchorfile>
      <anchor>a889ca2d038a15d1243ed8d7c56eee94c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::SeparationScenario</name>
    <filename>structplayrho_1_1d2_1_1SeparationScenario.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a7542a88cbda414a9a7fbca4ac6f3ad49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_points</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a7542a88cbda414a9a7fbca4ac6f3ad49a4df03d0e8e813409a53aa8dfc7052e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceA</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a7542a88cbda414a9a7fbca4ac6f3ad49a02fbe11fb2c5664334220887400538c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceB</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a7542a88cbda414a9a7fbca4ac6f3ad49aca9586d314cc70f7a7fa5bc8ec8044a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_points</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a7542a88cbda414a9a7fbca4ac6f3ad49a4df03d0e8e813409a53aa8dfc7052e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceA</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a7542a88cbda414a9a7fbca4ac6f3ad49a02fbe11fb2c5664334220887400538c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceB</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a7542a88cbda414a9a7fbca4ac6f3ad49aca9586d314cc70f7a7fa5bc8ec8044a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceProxy &amp;</type>
      <name>proxyA</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a309380250dcb6439cfacdf252c4fbc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceProxy &amp;</type>
      <name>proxyB</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a412ef190f6f2e26770cb99f4289901cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UnitVec</type>
      <name>axis</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a242beaf2d1fd0eae0775b8df33036657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Length2</type>
      <name>localPoint</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a0a942b76e9bea03620d7eb56a200d408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Type</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>ae70fb173f67515d4aee87831cb585b74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Shape</name>
    <filename>classplayrho_1_1d2_1_1Shape.html</filename>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aee4de1d29164d3ce16d1e9b7c608c9b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a49064658ede9605c072768f4087dc119</anchor>
      <arglist>(T arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a4115a5df86a7d55dd2bc6b2a550ade6b</anchor>
      <arglist>(const Shape &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a9fd20e087fafb0576d6b4fb2919fa39a</anchor>
      <arglist>(Shape &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>afae45d39c259d86a251a19183e56e703</anchor>
      <arglist>(const Shape &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>acbee1b56e39a192551950a196bb8b6be</anchor>
      <arglist>(Shape &amp;&amp;other)=default</arglist>
    </member>
    <member kind="friend">
      <type>friend ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ac04194136cade2a9cb3db0ce6234b3fc</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aef5a495e8d68c39d47d049f51ec5452f</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="friend">
      <type>friend MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a1f9e8db270c93956369ac55920c462d7</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a9d425ca5951dc633c1a63d5449091871</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter idx)</arglist>
    </member>
    <member kind="friend">
      <type>friend Real</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a7391adc084afda958cdb54b10229990c</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ab731ba8dc3b08ed048d5348def3f0ab6</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a154958fa91ee5653a279fc28e1472ab8</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a5affc9e0eb1efb455e629467b34f12fd</anchor>
      <arglist>(Shape &amp;shape, const Mat22 &amp;m)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a078b7c94807300b94e400680d1481e03</anchor>
      <arglist>(const Shape &amp;shape, void *userData)</arglist>
    </member>
    <member kind="friend">
      <type>const friend void *</type>
      <name>GetData</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ac502d94004092397686afd7fe440012a</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>const friend std::type_info &amp;</type>
      <name>GetUseTypeInfo</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a525ee91011d1430713a9425b90a23401</anchor>
      <arglist>(const Shape &amp;shape)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a2f3eda877731309d323c5227a2176ba8</anchor>
      <arglist>(const Shape &amp;shape, const TypeInfoVisitor &amp;visitor)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aab78335ce5150860eca7156ef23cc6c4</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a8725ac7fabaac950fabc413b492da29e</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a74afc15ef58efc35461a1580887e5363</anchor>
      <arglist>(const Shape &amp;shape, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gafcfbf811dc989043838f0a4c7c64b59b</anchor>
      <arglist>(const Shape &amp;shape, Length2 point) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::ShapeBuilder</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <templarg></templarg>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a78dc4119b49287d6ab2577c7264639ce</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a322c417f87059108bd473b48a9a7b9f7</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ConcreteConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a973f6781e63cb44363bf2a720f811855</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ConcreteConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>acf9c2136c7a5242413b58757df80bf6c</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ConcreteConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a36e113cd3a962dae60b3e3ab855c70</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; ChainShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a78dc4119b49287d6ab2577c7264639ce</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a322c417f87059108bd473b48a9a7b9f7</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ChainShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a973f6781e63cb44363bf2a720f811855</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ChainShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>acf9c2136c7a5242413b58757df80bf6c</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ChainShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a36e113cd3a962dae60b3e3ab855c70</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; DiskShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a78dc4119b49287d6ab2577c7264639ce</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a322c417f87059108bd473b48a9a7b9f7</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DiskShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a973f6781e63cb44363bf2a720f811855</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DiskShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>acf9c2136c7a5242413b58757df80bf6c</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DiskShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a36e113cd3a962dae60b3e3ab855c70</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; EdgeShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a78dc4119b49287d6ab2577c7264639ce</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a322c417f87059108bd473b48a9a7b9f7</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR EdgeShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a973f6781e63cb44363bf2a720f811855</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR EdgeShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>acf9c2136c7a5242413b58757df80bf6c</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR EdgeShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a36e113cd3a962dae60b3e3ab855c70</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; MultiShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a78dc4119b49287d6ab2577c7264639ce</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a322c417f87059108bd473b48a9a7b9f7</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR MultiShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a973f6781e63cb44363bf2a720f811855</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR MultiShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>acf9c2136c7a5242413b58757df80bf6c</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR MultiShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a36e113cd3a962dae60b3e3ab855c70</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; PolygonShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a78dc4119b49287d6ab2577c7264639ce</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a322c417f87059108bd473b48a9a7b9f7</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR PolygonShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a973f6781e63cb44363bf2a720f811855</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR PolygonShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>acf9c2136c7a5242413b58757df80bf6c</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR PolygonShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a36e113cd3a962dae60b3e3ab855c70</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; ShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a78dc4119b49287d6ab2577c7264639ce</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a322c417f87059108bd473b48a9a7b9f7</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a973f6781e63cb44363bf2a720f811855</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>acf9c2136c7a5242413b58757df80bf6c</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a36e113cd3a962dae60b3e3ab855c70</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::ShapeConf</name>
    <filename>structplayrho_1_1d2_1_1ShapeConf.html</filename>
    <base>ShapeBuilder&lt; ShapeConf &gt;</base>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeConf.html</anchorfile>
      <anchor>a78dc4119b49287d6ab2577c7264639ce</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeConf.html</anchorfile>
      <anchor>a322c417f87059108bd473b48a9a7b9f7</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Simplex</name>
    <filename>classplayrho_1_1d2_1_1Simplex.html</filename>
    <class kind="struct">playrho::d2::Simplex::Cache</class>
    <member kind="typedef">
      <type>SimplexEdges::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>aa09547ee35a1d556d336b39bb4e42f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; Real, MaxSimplexEdges, std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type &gt;</type>
      <name>Coefficients</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a13182e4772a3721b437a06779bfd76f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Simplex</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>ab9d766572889f12076d3ab5a16d67daf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR SimplexEdges</type>
      <name>GetEdges</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>aacfd525d6824e03d630698580d219598</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const SimplexEdge &amp;</type>
      <name>GetSimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a84c15cfdf23cccd81f1a3213b1557863</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Real</type>
      <name>GetCoefficient</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a877d4b165d8b245ac20e2d478ad654a2</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>ab5c8baec304fad5c52ab4549c3ea57f2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cache</type>
      <name>GetCache</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>ae4e2c906e65ba580c20f5b5fe6d1f37e</anchor>
      <arglist>(const SimplexEdges &amp;edges) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>CalcMetric</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a21f4fbe4f435a497f723ba4692745d13</anchor>
      <arglist>(const SimplexEdges &amp;simplexEdges)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>aa29f341b7742ae85f6a0650d8e495a6a</anchor>
      <arglist>(const SimplexEdge &amp;s0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a67974276b721135016f384f5475990ef</anchor>
      <arglist>(const SimplexEdge &amp;s0, const SimplexEdge &amp;s1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>ab745b96a84c8e8340e8abf7efbfd3c69</anchor>
      <arglist>(const SimplexEdge &amp;s0, const SimplexEdge &amp;s1, const SimplexEdge &amp;s2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a9c422b7a3f95fe304c3d442350fe2301</anchor>
      <arglist>(const SimplexEdges &amp;edges) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::SimplexEdge</name>
    <filename>classplayrho_1_1d2_1_1SimplexEdge.html</filename>
    <member kind="function">
      <type></type>
      <name>SimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a302d4590ff337587c2be97914585b990</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>SimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>ae43171f8454883b88ae071b95652aa99</anchor>
      <arglist>(const SimplexEdge &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>SimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a9b24573ee63f4ab06b6d0472687a981b</anchor>
      <arglist>(Length2 pA, VertexCounter iA, Length2 pB, VertexCounter iB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetPointA</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a63a9cdf1221719d04f4b8ed0f8716204</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetPointB</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>ac2888e20aac4eae1f7cb6b99a1cf7c00</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetIndexA</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a5dd99b8f85facbe04f33068f05712b62</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetIndexB</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a25f5ada8595ca6483e062ee4e8a201e7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetIndexPair</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a56820ae5d6740879832326cfdbebe61b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::SizedRange</name>
    <filename>classplayrho_1_1SizedRange.html</filename>
    <templarg></templarg>
    <base>playrho::Range</base>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1SizedRange.html</anchorfile>
      <anchor>afb0d072ac67e66418f5d45ed63efaa30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>SizedRange</name>
      <anchorfile>classplayrho_1_1SizedRange.html</anchorfile>
      <anchor>aec82da9d83ba96a21b85796484d8f8c7</anchor>
      <arglist>(typename Range&lt; IT &gt;::iterator_type iter_begin, typename Range&lt; IT &gt;::iterator_type iter_end, size_type size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1SizedRange.html</anchorfile>
      <anchor>aa2f0a3f7aa569c0946ec4b78bcaa5d1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::Span</name>
    <filename>classplayrho_1_1Span.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a71f2562f09ebcc2077d54844556707d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>data_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a4ebcb51676a0de69e4a8e1ed2c389762</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const data_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ad58b1f45f17cc2d44e9574e9fadc7271</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ab168aaeaa6439758345a1ad6d2d3368e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a1cd4ade9ef3e2bafbb96260216e4f044</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>aa5b01aab6e08e9e68c837bc484783e60</anchor>
      <arglist>(const Span &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>aeb167186d5cdf401c0e3adf89a864d2f</anchor>
      <arglist>(pointer array, size_type size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a0b726f37998c9416451284d9b4548150</anchor>
      <arglist>(data_type(&amp;array)[SIZE]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>aa9d9b32541fbd0cd70a55abba0713ad9</anchor>
      <arglist>(U &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ab6e76aa88794582c3289b6ca6cff21c0</anchor>
      <arglist>(std::initializer_list&lt; T &gt; list) noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a3a5b487c1f1bd3836229446ee1cbb5b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>cbegin</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a801ea93ca0ecde35e3599a37b9d2e696</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a6af40e1afd77999c87fe31260e13e0c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>cend</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a99db26b218cd2950dfa0f2caf4594ce1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>data_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>af9975d64194fada4d335663c9b64ce8d</anchor>
      <arglist>(size_type index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ac2bf69dc112d83f536622d2b0aa0294f</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a46e533bb1a49699032c939dacb0522ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a179f2bbfe30ddc06c2bb951d759f5666</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a39c93b3f193d7051f35e73ce69f8c00b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::StackAllocator</name>
    <filename>classplayrho_1_1StackAllocator.html</filename>
    <class kind="struct">playrho::StackAllocator::Conf</class>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a0bafd291e17d9f128088d4bef621e9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StackAllocator</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1ff66212305cb343da5b90937c1a98a6</anchor>
      <arglist>(Conf config=GetDefaultConf()) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StackAllocator</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a95796512a425aa969779c894694f31d4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StackAllocator</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a758d218aef5b2637acdf12bea4700b71</anchor>
      <arglist>(const StackAllocator &amp;copy)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StackAllocator</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a8392584b346cc6a4b2ae80b7b3cc795b</anchor>
      <arglist>(StackAllocator &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>StackAllocator &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a8a48daabf0a431c13a008db54879b7cc</anchor>
      <arglist>(const StackAllocator &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>StackAllocator &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a4ae178088811556e20ab278d38927e1e</anchor>
      <arglist>(StackAllocator &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>ac8e979666fdf6c46afcfabd9917b388a</anchor>
      <arglist>(size_type size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a74aadaded9475221a0ea343bff727df5</anchor>
      <arglist>(void *p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AllocateArray</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>ab4ff8751df8da6bf2c903a7c83dd2768</anchor>
      <arglist>(size_type size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a42fcb9c0ff893451d417a7390a0779d8</anchor>
      <arglist>(void *p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMaxAllocation</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a5dea6fdea4c280522c87c9971d309f6c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetEntryCount</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1d9b7f75f4b0e9f03723023a051196b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>afdba831ecea6d5cc6d44a4051a65e6a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetAllocation</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1c161fe331b7784d7139e6032dc754a1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetPreallocatedSize</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>ae9af1be801d148021936d83e00dccd1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMaxEntries</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a2314cc547523157f10b1afe5e53105f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Conf</type>
      <name>GetDefaultConf</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>ad553a5fe1c55a43076db401e494f0543</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TOIOutput::Statistics</name>
    <filename>structplayrho_1_1TOIOutput_1_1Statistics.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiIters)&gt;::type</type>
      <name>toi_iter_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a9c13fac3cddaab2929c7e3109231f7d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>dist_iter_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a741a2e6921ede4b9845e2078e8089ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiRootIters)&gt;::type</type>
      <name>root_iter_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>aeaef49f811b7603b236db6e5f4a44801</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Wider&lt; toi_iter_type &gt;::type</type>
      <name>toi_sum_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a75c3a0c41935f0dc4dd43b97cc9d252f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Wider&lt; dist_iter_type &gt;::type</type>
      <name>dist_sum_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a3ddf7cb3c9575ed71940027186d11378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Wider&lt; root_iter_type &gt;::type</type>
      <name>root_sum_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a8b34d9dcdde83b0f8c70edbc503a2e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_sum_type</type>
      <name>sum_finder_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a34c182fa1ac03ed52af67c48e3029fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_sum_type</type>
      <name>sum_dist_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a6cec2125783884456c9642ffb69aafc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_sum_type</type>
      <name>sum_root_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a92b3b857a6d3b0336c85ab388543528a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_iter_type</type>
      <name>toi_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a9935def8ecce62156b6e864cec91ee24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_iter_type</type>
      <name>max_dist_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a9e8238c810e61f665478d60375e3d307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_iter_type</type>
      <name>max_root_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>ae5860339700dac34b811c4aa06b95d2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::StepConf</name>
    <filename>classplayrho_1_1StepConf.html</filename>
    <member kind="typedef">
      <type>TimestepIters</type>
      <name>iteration_type</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a8e5a2fa02589f5bdd860ce232242cdc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>GetTime</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>ac41f404b6345d1cd8b9ea21eb485bea8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvTime</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>abb06f6542373de2b0d452e0a1ad7e1cd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR StepConf &amp;</type>
      <name>SetTime</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a2144d7186ffeb6eb540716f99f9bfe7a</anchor>
      <arglist>(Time value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR StepConf &amp;</type>
      <name>SetInvTime</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a3ece970cfb6bc348b826b278eb76382c</anchor>
      <arglist>(Frequency value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dtRatio</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a457b239d0d715ceab05b1c78425633a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>minStillTimeToSleep</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a07971deda1d7a35d41eb9019721d13ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Positive&lt; Length &gt;</type>
      <name>linearSlop</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a0a8774f5c57ec70ec8b1ca0ad7073e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Positive&lt; Angle &gt;</type>
      <name>angularSlop</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a7c61d899e596d1fb07b1cc80ada0efbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>regResolutionRate</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a5d582ba59086657963565e68978f10ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>regMinSeparation</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a7b18d37a3c6cd9b55ea0d17cbda2ec11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>regMinMomentum</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a31610ef1c5216ed2bf50e5229ef05470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>toiResolutionRate</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>abbf7f5f8efc72c95dec494efcdec09e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>toiMinSeparation</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a35a04831d008075123c6c211b4ce12f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>toiMinMomentum</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a8a28be956ca4e2e4d9c0c626c9314e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>targetDepth</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a2b76a2f94caee657304bbe29cf2091ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>tolerance</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a74a6805a0aa494299d5dc1ef6f7666db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>velocityThreshold</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a1df1b4fee721cf88f35fc08879027033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxTranslation</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>ac3d3dd18627b28b89a94eb32bb0763f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxRotation</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a0ab48d76f772682e5d2d2d937eacdde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxLinearCorrection</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a24913ef211ff767753c1eb318e0514da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxAngularCorrection</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a5eb64a27f2fb8884d6dd4565ed691f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>linearSleepTolerance</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a79e5be983b4eba45d408543271083682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>angularSleepTolerance</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>afc71be34f8fdc86f38a743b939445747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>displaceMultiplier</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>adf8c8af6cc3464d9d035d58ac27e9cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>aabbExtension</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a2843eaacd8bc5a99f9764d734deb5399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>maxCirclesRatio</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a46c9f8cd3881c7f65056c485110230ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>regVelocityIterations</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a1f5ec452297bda2078479948243fa9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>regPositionIterations</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a03001af44bdce6e20979ccc98db4506b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>toiVelocityIterations</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>af40b741271dd2a22cb32603636f049c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>toiPositionIterations</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a86822faef8e85cdf0ec7e48a7a6b4721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxToiRootIters</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a8add4646cce4ae296e2e129b074bc3d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxToiIters</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a75c4fdf3872c14c4fbdb2eac5c3cace4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxDistanceIters</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a6bf667a0a634c992cbe1c3f5112f50e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxSubSteps</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>aa3a018f1176d9ab03b89d15090bdda7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doWarmStart</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a15442afc3e0dc7b585a950938440f3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doToi</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a281a00a1aea4cd4a3390b16b4d49e881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doBlocksolve</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a628dca6d25124bf34e9c3c830b691c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidIteration</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a24744a32d00d136bec5ae6b5920e819c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MovementConf</type>
      <name>GetMovementConf</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a9f5227d01d6f7c75ac2399c3da7b5572</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxRegLinearCorrection</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a396f543b42eadf60ef9e730edc77912c</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMaxTranslationWithinTolerance</name>
      <anchorfile>classplayrho_1_1StepConf.html</anchorfile>
      <anchor>a05d21c386ca6d39d5cc35cbad350a8c9</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::StepStats</name>
    <filename>structplayrho_1_1StepStats.html</filename>
    <member kind="variable">
      <type>PreStepStats</type>
      <name>pre</name>
      <anchorfile>structplayrho_1_1StepStats.html</anchorfile>
      <anchor>aaa9b52669cc1a5c973e02b0191fe3ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RegStepStats</type>
      <name>reg</name>
      <anchorfile>structplayrho_1_1StepStats.html</anchorfile>
      <anchor>aefbc7755ee10149deec23d10ab7de550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ToiStepStats</type>
      <name>toi</name>
      <anchorfile>structplayrho_1_1StepStats.html</anchorfile>
      <anchor>a0d07c4b00bc71b0dc49c15ca0e1e8177</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Sweep</name>
    <filename>classplayrho_1_1d2_1_1Sweep.html</filename>
    <member kind="function">
      <type></type>
      <name>Sweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>adb1aa8f6c8499543c3f4d3d66f41c772</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Sweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a8c6b000d91af05ba10a76cb12912fa13</anchor>
      <arglist>(const Sweep &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Sweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a97e2381a235c814d0ff3062f04e85324</anchor>
      <arglist>(const Position p0, const Position p1, const Length2 lc=Length2{0_m, 0_m}, Real a0=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Sweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a075b6416b30d6871f8dd6b680e3e0313</anchor>
      <arglist>(const Position p, const Length2 lc=Length2{0_m, 0_m})</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>abd3fb7d9c09928fe51e69a769de06de0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetAlpha0</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>abd658cc8007c20e90bbc9cf765678a40</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Advance0</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a3597bd76c2b89f3b7f217692071fde47</anchor>
      <arglist>(Real alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetAlpha0</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>ae33673e4b1eb0ef92645e37d380c4af4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>pos0</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>afd1e30ab1f1cfc33d1cef14028815fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>pos1</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>ab5e2f463dbb73884d939921442975d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sweep</type>
      <name>GetNormalized</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a09b21383c1a73afea37f11e0ba906a76</anchor>
      <arglist>(Sweep sweep) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::TargetJoint</name>
    <filename>classplayrho_1_1d2_1_1TargetJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>TargetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a94e89c60f9ba4dd4c6a613d120e1d202</anchor>
      <arglist>(const TargetJointConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a7a87a4b1a00f6115b7f67cec7c26feeb</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a5d9daba8b82dfb77a89b06264d94adbf</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>ade629e97cf830c4a149edecf274e157a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a974e7112050e7e341d4256071756123b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>adbe0102da0c4e094cca70b4ef6e96e12</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a77e4fea3ff52d7c57e4373cefcb3b3b1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a7cae06e0cfc128ccf773368c894c8956</anchor>
      <arglist>(const Length2 newOrigin) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>acfc79eb42fa5c09b09c4e2caf1de984c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>adccc0a4d534ff19819851e22011da795</anchor>
      <arglist>(const Length2 target) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a64ad9ba3912407353e242a67c0d7f557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxForce</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a5626d69267e5cce94b742201d8de0d75</anchor>
      <arglist>(NonNegative&lt; Force &gt; force) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Force &gt;</type>
      <name>GetMaxForce</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>aacd907a459441fdf54db077c2ba055bd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a9b0d889ff1d74b773f3c8a810fcf4b16</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; hz) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>GetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>ab381ebac8da7a9a1ca608d2dab3cc7c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a916afaca17919c4cbca78c5c7f65af32</anchor>
      <arglist>(NonNegative&lt; Real &gt; ratio) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Real &gt;</type>
      <name>GetDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a139423bc99a0567e433d0dba8088ad60</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsOkay</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>a344d49a15bfc2ddc9ef00643c43eed04</anchor>
      <arglist>(const TargetJointConf &amp;def) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TargetJointConf</type>
      <name>GetTargetJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1TargetJoint.html</anchorfile>
      <anchor>ad692b79cfa17d64bf31a489e91d2695c</anchor>
      <arglist>(const TargetJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::TargetJointConf</name>
    <filename>structplayrho_1_1d2_1_1TargetJointConf.html</filename>
    <base>JointBuilder&lt; TargetJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; TargetJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a6a8c5eb78f152275cb85f5663d90849a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>TargetJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a1bd7ff242c57b22fee9ba35738b680e1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>TargetJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a7ae666847e1362cc74d6c803568a9b8a</anchor>
      <arglist>(NonNull&lt; Body * &gt; b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR TargetJointConf &amp;</type>
      <name>UseTarget</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a78f753245937fa74091bde1665ce4bae</anchor>
      <arglist>(Length2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR TargetJointConf &amp;</type>
      <name>UseMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>ab66485966f1072d812aec0f9ed9eeaa4</anchor>
      <arglist>(NonNegative&lt; Force &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR TargetJointConf &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a40a21090db68891a05bdffc69169b951</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR TargetJointConf &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a608472eff6f78d37a471f924160659cd</anchor>
      <arglist>(NonNegative&lt; Real &gt; v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>target</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aa959f11ea9a7a0bb34f26bddd23ac279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Force &gt;</type>
      <name>maxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a749a955e6dc7a4e5a7ded98234247e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aec28fc57d68a4813f7ccffd86f9680de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Real &gt;</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>ad29e45c3c35828dd86d1c7d6d7c0d7c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ToiConf</name>
    <filename>structplayrho_1_1ToiConf.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiRootIters)&gt;::type</type>
      <name>root_iter_type</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a56e0a09ccf175d198fc9d666e38aeeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiIters)&gt;::type</type>
      <name>toi_iter_type</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>ac94304792ddfaa28f2694fe481fe2672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>dist_iter_type</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a4f756e01422799774afa985e0d1015d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ToiConf &amp;</type>
      <name>UseTimeMax</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a8a0c7ea837d4238e9de1bcba64068e9c</anchor>
      <arglist>(Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ToiConf &amp;</type>
      <name>UseTargetDepth</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a5edb202aa2f8c2387ab698a69e09e22e</anchor>
      <arglist>(Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ToiConf &amp;</type>
      <name>UseTolerance</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>abbb99303334d5854dac4d546dbb6eb1a</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ToiConf &amp;</type>
      <name>UseMaxRootIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a68b5ad057ab196a41103b01ad0a734f3</anchor>
      <arglist>(root_iter_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ToiConf &amp;</type>
      <name>UseMaxToiIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a085cfcfe8ac2b708d5366fe4f374efcc</anchor>
      <arglist>(toi_iter_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ToiConf &amp;</type>
      <name>UseMaxDistIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a72c463eb9759698676c12d0b1ce20886</anchor>
      <arglist>(dist_iter_type value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>tMax</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>adb4e539adcd8716874cde28d766e2c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>targetDepth</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a8b7f001e3a9ed75456e9c57a848adb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>tolerance</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>af3adc26131d9ff0ad07394050a9bed29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_iter_type</type>
      <name>maxRootIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>ae0b64b5021ec7955f14bd38a110da96d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_iter_type</type>
      <name>maxToiIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a650135a3a192ec27008d761829999a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_iter_type</type>
      <name>maxDistIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a888c7b7e3b1da157e13e5ffe3e8d2fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetDefaultToiConf</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>abb1706f5ee9f03fdec4a73d2c4d6ce6b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TOIOutput</name>
    <filename>structplayrho_1_1TOIOutput.html</filename>
    <class kind="struct">playrho::TOIOutput::Statistics</class>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unknown</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a7277831fd743eb0b202caf6a2be37690</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_touching</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991aa03eb76dce3674392a4997431bb983b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_separated</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a8f70064ad03a98b993560de73ed5fa1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_overlapped</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991ab22bfc4f78b826eb32a0079a9f0338c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxRootIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a36362566a28d97af1009889591d3c832</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_nextAfter</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991ad280465b4cd5e6dc5e5e3518d5eee177</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxToiIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a99fc075705e9cfc63a6104a677ce38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_belowMinTarget</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a1f404aa403d419b5aef650f790bc2b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxDistIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a9c9984fcc437427ff3c0f63685198980</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_targetDepthExceedsTotalRadius</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a39fcf21ed8572891aa1ba6a1613e3e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_minTargetSquaredOverflow</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991aba395b2aa5aee8b57bac8b2868942c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxTargetSquaredOverflow</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a2a40e3ca497dbf3858b46b32e5e46ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_notFinite</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a3f19664ac2aa91189f828b446891a6e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unknown</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a7277831fd743eb0b202caf6a2be37690</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_touching</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991aa03eb76dce3674392a4997431bb983b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_separated</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a8f70064ad03a98b993560de73ed5fa1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_overlapped</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991ab22bfc4f78b826eb32a0079a9f0338c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxRootIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a36362566a28d97af1009889591d3c832</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_nextAfter</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991ad280465b4cd5e6dc5e5e3518d5eee177</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxToiIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a99fc075705e9cfc63a6104a677ce38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_belowMinTarget</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a1f404aa403d419b5aef650f790bc2b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxDistIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a9c9984fcc437427ff3c0f63685198980</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_targetDepthExceedsTotalRadius</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a39fcf21ed8572891aa1ba6a1613e3e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_minTargetSquaredOverflow</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991aba395b2aa5aee8b57bac8b2868942c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxTargetSquaredOverflow</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a2a40e3ca497dbf3858b46b32e5e46ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_notFinite</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a3f19664ac2aa91189f828b446891a6e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOIOutput</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a007d6e0e69c4ea61f3533f1e1620d28a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOIOutput</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>aa48d4a57b379e3d512de15e51b6b13b7</anchor>
      <arglist>(Real t, Statistics s, State z) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>time</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>ad5cf3c441ab46997872599dd9d36b7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Statistics</type>
      <name>stats</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a8e630aad9c1b2d327262ba234eef8e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>ad85a5dcc7114b7fbcfb7b4b47e13b1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TOIOutput</type>
      <name>GetToiViaSat</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>acad38ef6ac1537641203f3eb15225235</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Sweep &amp;sweepA, const DistanceProxy &amp;proxyB, const Sweep &amp;sweepB, ToiConf conf=GetDefaultToiConf())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ToiStepStats</name>
    <filename>structplayrho_1_1ToiStepStats.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>counter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac6751bb15f4e9ac864f105551c2d6daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>dist_iter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a0e184fb1dddfe85ed0f9a4005faf520f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiIters)&gt;::type</type>
      <name>toi_iter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ad4b068c8d5c64784305225a5f0c216d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiRootIters)&gt;::type</type>
      <name>root_iter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a726b6ee05b91f66b20971afb7e89209b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>minSeparation</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a9596997026a847f921188645090d1663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>maxIncImpulse</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a3d086070f4bad6c7156e9e398092111a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>islandsFound</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ae466af8e97bb15813097cec240589f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>islandsSolved</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>aba23e37196c26b7b6afa20156e846727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsFound</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a614585faa33479c9e38f256ca8b170ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsAtMaxSubSteps</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>aed71e06c62e9d8d09d3a598d4cf82666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsUpdatedToi</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a29e709023574e867b53672010c5c9fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsUpdatedTouching</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ab0204469cd47268bd459ea7141ec26e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsSkippedTouching</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a58dfb912213be2db96c30613441e7f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsAdded</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a8a4b932412bdcac28d1442b23be55955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>proxiesMoved</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac63aa8851a42781c9150241e55aa93cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumPosIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ab7c0a5025aa30d4aa806f630b686ce70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumVelIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a3c428fa3b8f15202af3462dedb152451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>maxSimulContacts</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac93c931d7375403054aa91d54f7e2429</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_iter_type</type>
      <name>maxDistIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac02dc191dbd8b62af27ee8a8756b6950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_iter_type</type>
      <name>maxToiIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>abff84a9f2765a553fa7c015d4236a294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_iter_type</type>
      <name>maxRootIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac9684005b60da6251f1cc4add7cea2c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Transformation</name>
    <filename>structplayrho_1_1d2_1_1Transformation.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>p</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>ab2b20471f74fef015279a0bb396210e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>q</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>a1f21f610db905ad56edc7720dd8598f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>a28aa87759274515d1ad6f7daef1ac15a</anchor>
      <arglist>(const d2::Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>a65127c4ea5f121fb8f4b3f721c70db36</anchor>
      <arglist>(Transformation lhs, Transformation rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>aebe25ab06d4a4b58d0867f177a3bb1fd</anchor>
      <arglist>(Transformation lhs, Transformation rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>a8b59ee3c03a9d317cd4ff5f699a2b735</anchor>
      <arglist>(const d2::Transformation &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DynamicTree::TreeNode</name>
    <filename>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</filename>
    <member kind="function">
      <type></type>
      <name>~TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a564ff736c995940f746789732aba9273</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a1a34566db7c09c20d507567d0690e63a</anchor>
      <arglist>(const TreeNode &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a2f19b679fce85b37e875d3d7c58178fb</anchor>
      <arglist>(TreeNode &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a1944e1808d1f9aaa550a2f66a219ee54</anchor>
      <arglist>(Size other=DynamicTree::GetInvalidSize()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a63eeca915de09ea767be44d9f9a6bf60</anchor>
      <arglist>(const LeafData &amp;value, AABB aabb, Size other=DynamicTree::GetInvalidSize()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a62c84fc9f30119bea0963df18fa4e22e</anchor>
      <arglist>(const BranchData &amp;value, AABB aabb, Height height, Size other=DynamicTree::GetInvalidSize()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TreeNode &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a31bdee8b0731760ab5754a994675d309</anchor>
      <arglist>(const TreeNode &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Height</type>
      <name>GetHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>aac4e98e9a812d63464189bedfb155d89</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Size</type>
      <name>GetOther</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>af83c44a1d4f7df85733539bc61957349</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR void</type>
      <name>SetOther</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>ad2a0384a18a2eb7b19c3f750beec8950</anchor>
      <arglist>(Size other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a293b9bfd32d423af84a577d1f8a0f993</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR void</type>
      <name>SetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a7ea1ae69a3131e807baffe017d39c97b</anchor>
      <arglist>(AABB value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnusedData</type>
      <name>AsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a2dd7d714cb791f6b5cf77c62f50fd42e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LeafData</type>
      <name>AsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a5b4b43005e8db4175da49c0bd2e482c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BranchData</type>
      <name>AsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a47aabd3486e6c020e7269cd97217bd36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR void</type>
      <name>Assign</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a601758f6bd7d1d7784a6052454c789bd</anchor>
      <arglist>(const UnusedData &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR void</type>
      <name>Assign</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>aa05572d20390b89a510ee47a686ad667</anchor>
      <arglist>(const LeafData &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR void</type>
      <name>Assign</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a6b51e198ba9607290d64dd443f744e1e</anchor>
      <arglist>(const BranchData &amp;v, const AABB &amp;bb, Height h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>aeb5fd948fe808b19f94cd6c80089db9d</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>acdc646a20341e7dd6d2b2f08911c1dbd</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a5bc0102a3df9a20fe75e220cca59fe12</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>aeb5fd948fe808b19f94cd6c80089db9d</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>acdc646a20341e7dd6d2b2f08911c1dbd</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a5bc0102a3df9a20fe75e220cca59fe12</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a6d6d5df41347623cf1a1a969986ce093</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DynamicTree::Size</type>
      <name>GetNext</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a46ae39294a9b35c7c9a3f3f44fccb451</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tuple_element&lt; I, playrho::d2::UnitVec &gt;</name>
    <filename>classstd_1_1tuple__element_3_01I_00_01playrho_1_1d2_1_1UnitVec_01_4.html</filename>
    <templarg>I</templarg>
    <member kind="typedef">
      <type>playrho::Real</type>
      <name>type</name>
      <anchorfile>classstd_1_1tuple__element_3_01I_00_01playrho_1_1d2_1_1UnitVec_01_4.html</anchorfile>
      <anchor>a5bc886e515b6f24c8733d5e99d63c78d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tuple_element&lt; I, playrho::Vector&lt; T, N &gt; &gt;</name>
    <filename>classstd_1_1tuple__element_3_01I_00_01playrho_1_1Vector_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg>I</templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>classstd_1_1tuple__element_3_01I_00_01playrho_1_1Vector_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a8b0304c7b250c39300ab4ad96e299953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tuple_size&lt; playrho::ArrayList&lt; T, N, SIZE_TYPE &gt; &gt;</name>
    <filename>classstd_1_1tuple__size_3_01playrho_1_1ArrayList_3_01T_00_01N_00_01SIZE__TYPE_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>std::tuple_size&lt; playrho::d2::UnitVec &gt;</name>
    <filename>classstd_1_1tuple__size_3_01playrho_1_1d2_1_1UnitVec_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>std::tuple_size&lt; playrho::Vector&lt; T, N &gt; &gt;</name>
    <filename>classstd_1_1tuple__size_3_01playrho_1_1Vector_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="class">
    <name>playrho::d2::TypeJointVisitor</name>
    <filename>classplayrho_1_1d2_1_1TypeJointVisitor.html</filename>
    <base>playrho::d2::JointVisitor</base>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>adc6b27be67265d290abeaba5e248d4fd</anchor>
      <arglist>(const RevoluteJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>ae0a13c1a8bef1794c33fc601b9ce290e</anchor>
      <arglist>(RevoluteJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a8e7baa8ee6ef7a7769d895ee2716308c</anchor>
      <arglist>(const PrismaticJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>ad0060baf02bcb99e0fb6321b6a9c2c25</anchor>
      <arglist>(PrismaticJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>aeb3ca4fc85ec19cd5349c5dfe46c3f55</anchor>
      <arglist>(const DistanceJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>ad4bcacecace7744b41c48559ad4b682a</anchor>
      <arglist>(DistanceJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a865212fc0b64371d873b318120e2ff43</anchor>
      <arglist>(const PulleyJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>afe641b300f7d94cd21b0e9c5dc3ac6c2</anchor>
      <arglist>(PulleyJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a96a4e4e9192d5a5dcbbd0b58822a16d7</anchor>
      <arglist>(const TargetJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>ae3a28db5d67d73643ba53dc7f4846543</anchor>
      <arglist>(TargetJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a15edad2df15de0f8502207d1591f7dca</anchor>
      <arglist>(const GearJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a31806eab71f76df1e97f955c97d8ab5e</anchor>
      <arglist>(GearJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a1fd314a1feac8cb12be77dcd7b970336</anchor>
      <arglist>(const WheelJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a3ec2e930b979df13178257836490b0ef</anchor>
      <arglist>(WheelJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a56127a6d9a76462ade3097c89bd8e98f</anchor>
      <arglist>(const WeldJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a5b15311671ba0cba83625be83137a560</anchor>
      <arglist>(WeldJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a39ba6bc7e832a9ccbeaa7c512c9e2fab</anchor>
      <arglist>(const FrictionJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a6f8b1674742a4620a20f14a8839e037d</anchor>
      <arglist>(FrictionJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>ad529a293723bc49e06e6f60352ddac37</anchor>
      <arglist>(const RopeJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>ade5735b780fb2d82da165b15e78a31cb</anchor>
      <arglist>(RopeJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>aa86caf60e9ede06ff0d518b48fe7ee16</anchor>
      <arglist>(const MotorJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Visit</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a67f973c45441dd5c47eba0ae8fd6346a</anchor>
      <arglist>(MotorJoint &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Optional&lt; JointType &gt;</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a5d09b7d4530753d09a4036fac6f1f8fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetWritable</name>
      <anchorfile>classplayrho_1_1d2_1_1TypeJointVisitor.html</anchorfile>
      <anchor>a74deea37da15afc1d255cb60f8a2a412</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::UnitVec</name>
    <filename>classplayrho_1_1d2_1_1UnitVec.html</filename>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1a7a18b4800feac830d4375c39889da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a4c0ec8c437dcabe459480d31af35d31b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a3f9af7e3f3778be7c5397325fdfda6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab01e2b6172ff17d8ef644c5915ac0ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a8768204b9d09d03c772c14967a925791</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a7913b334ce42e2e6dd740254e76cec64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; IsArithmetic&lt; T &gt;::value, std::pair&lt; UnitVec, T &gt; &gt;</type>
      <name>PolarCoord</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab3503f1c480f004d65ee5562c1039140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>UnitVec</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a84833695c99da3bfa11b3fca01a433ef</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a10b7fd5b497c4514d5a3e808fcbe1edb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a7b32e5f6acbcbab685a76983f09e957d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a3202f8e8c835baa30d72d02f7c55a6d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1daed0036c85f79db339d621bd821e7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a51c92fd671c1aa855d11fc2270d27b8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a05b457eb94056a8e3b3865024d9e7597</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>aa0a3a0f53320c3e0461bee2b2c8ea30b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab22cbe6daab96aee5c3c4117834b06c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a8d44f8cbedd5f58a3a47ec217607e2cd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a2395f8349fa44e4705f22704a40b6603</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a0fc0438361d440f40960594f3c50e9d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a7d1eeb67af3657a546e373943d533e7d</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>aade88c027585cf8ef030190c62769bcc</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ace62badb710059e981d3fc034c1b6843</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetX</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>aa7784319cf40c6efba8a137d9bef1dbb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetY</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a6a1e420647398f6542f6dbe65c82a4ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>FlipXY</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a5cf65df1db69653bc9ba174938bfd706</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>FlipX</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ade94f7b4d2befdff0a53c65da4bb6162</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>FlipY</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a416c7e4b933ae610528caaf7430b86d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>Rotate</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>accb72b50ff998c369ece9e07f6ecaed7</anchor>
      <arglist>(UnitVec amount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>abc1c912c637864c15adddd08e4dc7312</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a4b58593628084cccf81c61b4db3fb21c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>acbd5b73cd5740a9cdd2456c13ee74d26</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a7d77fcdeeafba4eb94dcc205898c3caa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>Absolute</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a3a4498162c0d7ce09be1a03cf5036da3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetRight</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>aacc21d096d69c8b5dde10d7a8f9f66b0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetTop</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a877e1182a1d6031a7f852a9c20991993</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetLeft</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a10e4ce848fcf5e6ebd791c3090f32891</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetBottom</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>abd8e69590a738c2c857b2b7f3397c9a4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetZero</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a71edec77c0886514214a62327414b00f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetTopRight</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a159ff90e97e95537fee99a49a8355443</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetBottomRight</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a77506b9b17fd73a6f0815745e69442bf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetDefaultFallback</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a2da11d65aa14633059b583b5931b6fc5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PolarCoord&lt; T &gt;</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>aef1ad009c9795d9efa1ab947ff9beeaa</anchor>
      <arglist>(const T x, const T y, const UnitVec fallback=GetDefaultFallback()) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitVec</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ad9319728f9eadf0b10e667b3438e36bb</anchor>
      <arglist>(const Angle angle) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DynamicTree::UnusedData</name>
    <filename>structplayrho_1_1d2_1_1DynamicTree_1_1UnusedData.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Contact::UpdateConf</name>
    <filename>structplayrho_1_1d2_1_1Contact_1_1UpdateConf.html</filename>
    <member kind="variable">
      <type>DistanceConf</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1d2_1_1Contact_1_1UpdateConf.html</anchorfile>
      <anchor>a76c2c1974a7799d85d232d5cd1c521fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Manifold::Conf</type>
      <name>manifold</name>
      <anchorfile>structplayrho_1_1d2_1_1Contact_1_1UpdateConf.html</anchorfile>
      <anchor>ad77ca5661b69ec642c9adb9a945b2a56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ValueCheckHelper</name>
    <filename>structplayrho_1_1ValueCheckHelper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR T</type>
      <name>one</name>
      <anchorfile>structplayrho_1_1ValueCheckHelper.html</anchorfile>
      <anchor>a39c142250bd91ce62ecf6c0ae53a9b68</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>has_one</name>
      <anchorfile>structplayrho_1_1ValueCheckHelper.html</anchorfile>
      <anchor>a8a5a0cd6fc36a7cbafa915ced92c82df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ValueCheckHelper&lt; T, std::enable_if_t&lt; HasOne&lt; T &gt;::value &gt; &gt;</name>
    <filename>structplayrho_1_1ValueCheckHelper_3_01T_00_01std_1_1enable__if__t_3_01HasOne_3_01T_01_4_1_1value_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR T</type>
      <name>one</name>
      <anchorfile>structplayrho_1_1ValueCheckHelper_3_01T_00_01std_1_1enable__if__t_3_01HasOne_3_01T_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>a945a11aa489fe815ad4f0778a40bfc61</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PLAYRHO_CONSTEXPR bool</type>
      <name>has_one</name>
      <anchorfile>structplayrho_1_1ValueCheckHelper_3_01T_00_01std_1_1enable__if__t_3_01HasOne_3_01T_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>a902209cf5e4efb311b68e702041f8344</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>playrho::d2::DynamicTree::VariantData</name>
    <filename>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</filename>
    <member kind="function">
      <type></type>
      <name>VariantData</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>a8d7fdee3e9f715b2915e2cdec1330579</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>VariantData</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>aedfb7a7b60ec0d73a0db4de9dac7d78c</anchor>
      <arglist>(UnusedData value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>VariantData</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>ad9eb9417f5cf07715db3d9f7cf075651</anchor>
      <arglist>(LeafData value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>VariantData</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>a3b6cd5cd5e1044acd32f0c3ca7d8c339</anchor>
      <arglist>(BranchData value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>UnusedData</type>
      <name>unused</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>af0f6ddf4eff8e94dfcd39657d7e99184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LeafData</type>
      <name>leaf</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>af3306a67708a9a2a1ba3430bb6bd6067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BranchData</type>
      <name>branch</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>a3d88c008156bd9bffe05fd9f0cd24ddb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Vector</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af096f6eedbff15a928dae2735ee22558</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3fd6843ad90c021faca44a59ab4ff648</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, T &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a077739bf41f4a64ac51877ff143e2725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae30896451e61e6e472e71f38d39778b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9a4fb36890c56a1117bfb133c6716ff4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa9c29fc9e2eb8fbe237fbf25a1534608</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3b3643b51e4479626e0676f6580486a3</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8310df38aa46a7bf5d1dc6ca81506bd2</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aea1907481422872507cca97764947f2a</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2193922f1447fa6dc803806705b86cd0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a590d5cdd02fa3d185a2cda78383dcf9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; T, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(+T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(-T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{}+T{})&gt;::value, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{} - T{})&gt;::value, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{}+T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{} - T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; T, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; InvMass &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>InvMass</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af096f6eedbff15a928dae2735ee22558</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3fd6843ad90c021faca44a59ab4ff648</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, InvMass &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a077739bf41f4a64ac51877ff143e2725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae30896451e61e6e472e71f38d39778b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9a4fb36890c56a1117bfb133c6716ff4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa9c29fc9e2eb8fbe237fbf25a1534608</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3b3643b51e4479626e0676f6580486a3</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8310df38aa46a7bf5d1dc6ca81506bd2</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aea1907481422872507cca97764947f2a</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2193922f1447fa6dc803806705b86cd0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a590d5cdd02fa3d185a2cda78383dcf9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; InvMass, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; InvMass, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(+InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(InvMass {}+InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(-InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(InvMass {} - InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(InvMass {}+InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(InvMass {} - InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; InvMass, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Length &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Length</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af096f6eedbff15a928dae2735ee22558</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3fd6843ad90c021faca44a59ab4ff648</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Length &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a077739bf41f4a64ac51877ff143e2725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae30896451e61e6e472e71f38d39778b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9a4fb36890c56a1117bfb133c6716ff4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa9c29fc9e2eb8fbe237fbf25a1534608</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3b3643b51e4479626e0676f6580486a3</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8310df38aa46a7bf5d1dc6ca81506bd2</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aea1907481422872507cca97764947f2a</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2193922f1447fa6dc803806705b86cd0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a590d5cdd02fa3d185a2cda78383dcf9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(+Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {}+Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(-Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {} - Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {}+Length {})&gt;::value, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {} - Length {})&gt;::value, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Length, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Length, N &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Length</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af096f6eedbff15a928dae2735ee22558</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3fd6843ad90c021faca44a59ab4ff648</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Length &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a077739bf41f4a64ac51877ff143e2725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae30896451e61e6e472e71f38d39778b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9a4fb36890c56a1117bfb133c6716ff4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa9c29fc9e2eb8fbe237fbf25a1534608</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3b3643b51e4479626e0676f6580486a3</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8310df38aa46a7bf5d1dc6ca81506bd2</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aea1907481422872507cca97764947f2a</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2193922f1447fa6dc803806705b86cd0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a590d5cdd02fa3d185a2cda78383dcf9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(+Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {}+Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(-Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {} - Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {}+Length {})&gt;::value, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {} - Length {})&gt;::value, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Length, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; LinearAcceleration &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>LinearAcceleration</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af096f6eedbff15a928dae2735ee22558</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3fd6843ad90c021faca44a59ab4ff648</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LinearAcceleration &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a077739bf41f4a64ac51877ff143e2725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae30896451e61e6e472e71f38d39778b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9a4fb36890c56a1117bfb133c6716ff4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa9c29fc9e2eb8fbe237fbf25a1534608</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3b3643b51e4479626e0676f6580486a3</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8310df38aa46a7bf5d1dc6ca81506bd2</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aea1907481422872507cca97764947f2a</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2193922f1447fa6dc803806705b86cd0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a590d5cdd02fa3d185a2cda78383dcf9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; LinearAcceleration, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; LinearAcceleration, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(+LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(LinearAcceleration {}+LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(-LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(LinearAcceleration {} - LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(LinearAcceleration {}+LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(LinearAcceleration {} - LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; LinearAcceleration, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; LinearVelocity &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>LinearVelocity</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af096f6eedbff15a928dae2735ee22558</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3fd6843ad90c021faca44a59ab4ff648</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LinearVelocity &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a077739bf41f4a64ac51877ff143e2725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae30896451e61e6e472e71f38d39778b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9a4fb36890c56a1117bfb133c6716ff4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa9c29fc9e2eb8fbe237fbf25a1534608</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3b3643b51e4479626e0676f6580486a3</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8310df38aa46a7bf5d1dc6ca81506bd2</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aea1907481422872507cca97764947f2a</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2193922f1447fa6dc803806705b86cd0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a590d5cdd02fa3d185a2cda78383dcf9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; LinearVelocity, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; LinearVelocity, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(+LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(LinearVelocity {}+LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(-LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(LinearVelocity {} - LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(LinearVelocity {}+LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(LinearVelocity {} - LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; LinearVelocity, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Mass &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Mass</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af096f6eedbff15a928dae2735ee22558</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3fd6843ad90c021faca44a59ab4ff648</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Mass &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a077739bf41f4a64ac51877ff143e2725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae30896451e61e6e472e71f38d39778b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9a4fb36890c56a1117bfb133c6716ff4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa9c29fc9e2eb8fbe237fbf25a1534608</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3b3643b51e4479626e0676f6580486a3</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8310df38aa46a7bf5d1dc6ca81506bd2</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aea1907481422872507cca97764947f2a</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2193922f1447fa6dc803806705b86cd0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a590d5cdd02fa3d185a2cda78383dcf9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Mass, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; Mass, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Mass, decltype(+Mass {})&gt;::value, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; Mass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Mass, decltype(Mass {}+Mass {})&gt;::value, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; Mass, N &gt; lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Mass, decltype(-Mass {})&gt;::value, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; Mass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Mass, decltype(Mass {} - Mass {})&gt;::value, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; Mass, N &gt; lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Mass, decltype(Mass {}+Mass {})&gt;::value, Vector&lt; Mass, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Mass, decltype(Mass {} - Mass {})&gt;::value, Vector&lt; Mass, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; Mass, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Mass, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Momentum &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Momentum</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af096f6eedbff15a928dae2735ee22558</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3fd6843ad90c021faca44a59ab4ff648</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Momentum &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a077739bf41f4a64ac51877ff143e2725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae30896451e61e6e472e71f38d39778b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9a4fb36890c56a1117bfb133c6716ff4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa9c29fc9e2eb8fbe237fbf25a1534608</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3b3643b51e4479626e0676f6580486a3</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8310df38aa46a7bf5d1dc6ca81506bd2</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aea1907481422872507cca97764947f2a</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2193922f1447fa6dc803806705b86cd0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a590d5cdd02fa3d185a2cda78383dcf9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Momentum, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; Momentum, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(+Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(Momentum {}+Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(-Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(Momentum {} - Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(Momentum {}+Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(Momentum {} - Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Momentum, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Real &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af096f6eedbff15a928dae2735ee22558</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3fd6843ad90c021faca44a59ab4ff648</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Real &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a077739bf41f4a64ac51877ff143e2725</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae30896451e61e6e472e71f38d39778b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9a4fb36890c56a1117bfb133c6716ff4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa9c29fc9e2eb8fbe237fbf25a1534608</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3b3643b51e4479626e0676f6580486a3</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8310df38aa46a7bf5d1dc6ca81506bd2</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aea1907481422872507cca97764947f2a</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2193922f1447fa6dc803806705b86cd0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a590d5cdd02fa3d185a2cda78383dcf9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Real, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; Real, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Real, decltype(+Real {})&gt;::value, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; Real, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Real, decltype(Real {}+Real {})&gt;::value, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; Real, N &gt; lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Real, decltype(-Real {})&gt;::value, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; Real, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Real, decltype(Real {} - Real {})&gt;::value, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; Real, N &gt; lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Real, decltype(Real {}+Real {})&gt;::value, Vector&lt; Real, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; Real, decltype(Real {} - Real {})&gt;::value, Vector&lt; Real, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; Real, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Real, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Velocity</name>
    <filename>structplayrho_1_1d2_1_1Velocity.html</filename>
    <member kind="variable">
      <type>LinearVelocity2</type>
      <name>linear</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>afc8399d7200b4299a0e21cc184db0f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>angular</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>accc1d801801fb20a83fb5451ad8dd46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a775953540833d76c2205486ad443cb44</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>ac9bd82a296e14a104151eaf3e50d9f47</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a6aef7d1594aae1d3edc933a3e782befa</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a3458e1e85991d046c4586127dd700bbb</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a969296fe70c0ac8d3703c846c0ae4667</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a22fe8af2d6028a31014bb60831affba6</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>ac6179f48102468fef9300775dee41faa</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>aaa5eb5657f6e6906c30ad390ac9ad6aa</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a99243f7ae90f65f0ddfb78388f8f89df</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>ae06a249d054aba4bd9ade03b953275af</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a2f146d1eadc3fc3f4b8e9dfc6eb465b5</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>afacd998761adab744f3eff9f21fb6698</anchor>
      <arglist>(const Real lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a63936f67053cf2f9c89a9944fd66986f</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>ae0d079d5b6f6153f5412282050e78e10</anchor>
      <arglist>(const d2::Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>Cap</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a9d42f6f1b9cc7b4c13cb4a9b7f656f8e</anchor>
      <arglist>(Velocity velocity, Time h, MovementConf conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::VelocityConstraint</name>
    <filename>classplayrho_1_1d2_1_1VelocityConstraint.html</filename>
    <class kind="struct">playrho::d2::VelocityConstraint::Conf</class>
    <class kind="struct">playrho::d2::VelocityConstraint::Point</class>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxManifoldPoints)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a7ae0f6fbbc821ab29674ed9a8d3873c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a0c3f7e151e178001bf8bde596c4eaabd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>acbc4406b84a48b4ad550f75fcc1fe496</anchor>
      <arglist>(const VelocityConstraint &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a41f32b7118af764c0e2f4b10007b3812</anchor>
      <arglist>(const VelocityConstraint &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a4aca9c21d5dde076106d9ca1d81a3443</anchor>
      <arglist>(Real friction, Real restitution, LinearVelocity tangentSpeed, const WorldManifold &amp;worldManifold, BodyConstraint &amp;bA, BodyConstraint &amp;bB, Conf conf=GetDefaultConf())</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ad5201366b8f451d9a90878ecdbb040ff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetTangent</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a5770dc875b387fa5f557c0d49f30877b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetPointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a8328fb8755ee63d4fc286122bb9a7a5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass22</type>
      <name>GetK</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a7b7672fe3674a94c46c62b5840391286</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass22</type>
      <name>GetNormalMass</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a9606f1efd3c728bf4d0d589512034d95</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ab4aa128a02dd806edc05d3d2cbe2071a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a2cb4f41d6a645fabcf4e69b298547100</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aa68c6da65b556cc282a0ec4455eddd1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint *</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a2110b3f686b74dff6e54af024f8717bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint *</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a6e5dac8eb9c4cef57b7e0aa119e896bf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetNormalImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a6a5259904d3d85487c99a8dcf3871efb</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetTangentImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aed8f9f12932d039a598e993d6633c6ec</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetVelocityBiasAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ad644e82e53d3a176cba7feead0de3225</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetNormalMassAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a0134eed6e1ce2d374b788e60260817fe</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetTangentMassAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a5f65c818d7969342f30b4fab4c5e6f56</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosA</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a573ec1fc0c8ab0000450972a2044b177</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosB</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a589e8910a29d0e55302f149f27a43945</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aa3f9e7f3833a2b0e25873d24d651285a</anchor>
      <arglist>(size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a704bed5b7edd9bb43be3a000d13cc6ac</anchor>
      <arglist>(size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>GetPointAt</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a0522810720f80c9e976e069aaca09cf4</anchor>
      <arglist>(size_type index) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_CONSTEXPR Conf</type>
      <name>GetDefaultConf</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a63f030de16f96f6f969b17d4d0d665c4</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Version</name>
    <filename>structplayrho_1_1Version.html</filename>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>Revnum</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>a23217efbacc179609b7be472819121ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Revnum</type>
      <name>major</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>a5e92cad7b20b19f8efc5ea4801bb6f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Revnum</type>
      <name>minor</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>abb97e498445e0c35f20f37fbe82cf800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Revnum</type>
      <name>revision</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>a44abbe204a839327b55036549ef3b7eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::VertexSet</name>
    <filename>classplayrho_1_1d2_1_1VertexSet.html</filename>
    <member kind="typedef">
      <type>const Length2 *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a6975aa99493c5666ee93ba6c8a6d0d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexSet</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>add430fa9d90fffb18596d1f45a89b515</anchor>
      <arglist>(Area minSepSquared=GetDefaultMinSeparationSquared())</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>GetMinSeparationSquared</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>aab2c23f7f7344bc31409837dbd1946c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>ade7534188a8fc91d9837b3e562347a82</anchor>
      <arglist>(Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a2db75b4004bb99e8dcd5e275805d158a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>aa5e49e3b445c8dd4d78f9fd72fb50a20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>ad36911307335afc1a9b4e6ddcc33a29a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a3ab60237213bf69d476b637cd2437d57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a89f55e0a38a5a9d01c8fa5834f62919e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>find</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a1ede2f852e19cf2156350aae630944d0</anchor>
      <arglist>(Length2 value) const</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a6cd15a8277866afd8e620c0df9a2fc8d</anchor>
      <arglist>(std::size_t index) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Area</type>
      <name>GetDefaultMinSeparationSquared</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a5a33cdf5ac70599dfe9d1881b8d58484</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Voidify</name>
    <filename>structplayrho_1_1detail_1_1Voidify.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1Voidify.html</anchorfile>
      <anchor>a5d105bce2ba36bcc2c769ee7603abc66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::WeldJoint</name>
    <filename>classplayrho_1_1d2_1_1WeldJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>WeldJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a115372c85e776c85cfc4046ab43bda1c</anchor>
      <arglist>(const WeldJointConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a27f65832f34ad6540a99c6f6e2c033bb</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>ae5f750ed2fc6badd477cf5ec63473d8e</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a5ff941d52458620860472a0b10a9dcc1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>af07b67e6da9cdc8c9cad31f6a5254d00</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a031250f1c2514fccc4b64d0ce0a8e05a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a6428c06f1377243e779b0df20f9b2f18</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a5533cc1d6b6c4d5d8e47ef32dd719232</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a54f956e103352914f308271e6ba5572e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a54b8cc3e064e861c4c49fad2cba58511</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a651eeae96edbea0eb8d4c1a1d563d0c0</anchor>
      <arglist>(Frequency frequency)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a16e83686ea0330fb71eeaadbb6e1cf55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a2a8bb1a4030d4ba3eaaad95fc052bd53</anchor>
      <arglist>(Real ratio)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a69ff969ca01a6d94dd5089935642efe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1WeldJoint.html</anchorfile>
      <anchor>a8b3527a6238410941c6f6e5bae17686f</anchor>
      <arglist>(const WeldJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WeldJointConf</name>
    <filename>structplayrho_1_1d2_1_1WeldJointConf.html</filename>
    <base>JointBuilder&lt; WeldJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; WeldJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a3b7a9abbeb1afe692eea673d5fee51e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>WeldJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>aee9130daf356120241546966d760076c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeldJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>afc76a1598a2d789375955be54d3f9427</anchor>
      <arglist>(NonNull&lt; Body * &gt; bodyA, NonNull&lt; Body * &gt; bodyB, const Length2 anchor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WeldJointConf &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a777c6a70b9425796960326899e77c481</anchor>
      <arglist>(Frequency v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WeldJointConf &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>aba39922ac3582a415c76e150050dfe5b</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ab3dde206619d336dfc9c9cf97f6fc5e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a4e4abd2ed2af3a24f651acb7e5c93d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ab389da792b6a560ef3d7d2d7e6fc706a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Frequency</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>aa54796a1975ee23231b1ccb6677ed86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>afee42514df393a55d877e40e7029f272</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::WheelJoint</name>
    <filename>classplayrho_1_1d2_1_1WheelJoint.html</filename>
    <base>playrho::d2::Joint</base>
    <member kind="function">
      <type></type>
      <name>WheelJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>aa85867ae68f327b3aeabcd8cb487d090</anchor>
      <arglist>(const WheelJointConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>aa1fc52d9674348878e86e7a65d05fd33</anchor>
      <arglist>(JointVisitor &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a095501ab5400771713911a6957d0e948</anchor>
      <arglist>(JointVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a241e763b4954d38b7d06b4e8ae50fc10</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a5277f20017191a29342c038d96ac1f83</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a2ee3cdf3bf3215e818d97246c8f835d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a0f05b5e350d645b45b249fa5ff8b4217</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a95d6acfb3aec32871f0decf8f4d18ae9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a95d32e9b8ec919346f3fbc74141f322f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalAxisA</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a366b6e2b157ea5b9b6ccf2f1a2184878</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a41fb8139d6666a660760c6f6d575b739</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>ae8a1fe215575dcf2aea2e030b7ce7459</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetMotorMass</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a475c23bb731015198badb7784da4eac8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a3810687352d9fe1fd3a8f34a7b7a8412</anchor>
      <arglist>(AngularVelocity speed)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a455b2bf926892057366544ac728f968e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>ad4908ad73af8a45298db094b9f7e7cf9</anchor>
      <arglist>(Torque torque)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>abc761c963c3f432eaf2ff588d0aa7bdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpringFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>aa3ed73acc92c48733e3ff47c3c2a8c43</anchor>
      <arglist>(Frequency frequency)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetSpringFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>aada4afbc38bbbdf17dc091fe05f415c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpringDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a3ac192c344f786f0dc9ef78456d88463</anchor>
      <arglist>(Real ratio)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetSpringDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>adf5b455e94ec0b7789db8daf6c021991</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a9c4508d7e8e6bef6a676b0bc63200273</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>ac300fea7a4528e80285ab4b49109ef41</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1WheelJoint.html</anchorfile>
      <anchor>a8a58ab4da29b2f9b4144dbbdd66328b2</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WheelJointConf</name>
    <filename>structplayrho_1_1d2_1_1WheelJointConf.html</filename>
    <base>JointBuilder&lt; WheelJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; WheelJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a240852c6cb7436e2c7e53cc4573b1be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>WheelJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae26069bc384afbda24c251091604157b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WheelJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a8a3b4963974a68345e585b8f28a3e788</anchor>
      <arglist>(NonNull&lt; Body * &gt; bodyA, NonNull&lt; Body * &gt; bodyB, const Length2 anchor, const UnitVec axis) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WheelJointConf &amp;</type>
      <name>UseEnableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a63aaf504500f8876b4bccc88a6c0573a</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WheelJointConf &amp;</type>
      <name>UseMaxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ac0443b91e65161cdcee12fb729ca7e48</anchor>
      <arglist>(Torque v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WheelJointConf &amp;</type>
      <name>UseMotorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a3ffc7d46b01d8a4574479c04249733a6</anchor>
      <arglist>(AngularVelocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WheelJointConf &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ab5ca6253d1b68bd128cbfcea4c91bb1f</anchor>
      <arglist>(Frequency v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WheelJointConf &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ab8cf99646426eebad4cc4532d3680b4a</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a4dc88db92528abe99f69a29a8eb8f827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a8bcbb0908f80409feaa1ee94834f0204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localAxisA</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae33b769077d6dfe40ab792cae5b4cec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a5c928a9b40a91ca1b6f9a65ee7981f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Torque</type>
      <name>maxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aaccd1864d05cc579ec3d01e7a9172334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>motorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a754cc95814f79f32891079314488da37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Frequency</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aca7425f46b961a0ea7e82a5cc26b6562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a5f4a94799d991dc1c2de5697be080a77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider</name>
    <filename>structplayrho_1_1Wider.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Wider&lt; BodyCounter &gt;</name>
    <filename>structplayrho_1_1Wider.html</filename>
  </compound>
  <compound kind="class">
    <name>Wider&lt; dist_iter_type &gt;</name>
    <filename>structplayrho_1_1Wider.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; double &gt;</name>
    <filename>structplayrho_1_1Wider_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01double_01_4.html</anchorfile>
      <anchor>a3abf6b48f56ed82b5bdfb24ac4e7cfd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; float &gt;</name>
    <filename>structplayrho_1_1Wider_3_01float_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01float_01_4.html</anchorfile>
      <anchor>afd3c6d296462b7ee1b2c4348cd0ff150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Wider&lt; root_iter_type &gt;</name>
    <filename>structplayrho_1_1Wider.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::int16_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1int16__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1int16__t_01_4.html</anchorfile>
      <anchor>a83fee8f34915725135a16533e757806b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::int32_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1int32__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::int64_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1int32__t_01_4.html</anchorfile>
      <anchor>a52190261934276cac51509b61d29398c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::int8_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1int8__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::int16_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1int8__t_01_4.html</anchorfile>
      <anchor>ac05b0ceb1dbf3c4a493e2048bb1c4d8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::uint16_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1uint16__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1uint16__t_01_4.html</anchorfile>
      <anchor>ac01d08dda495229e948ebe61ebadaac6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::uint32_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1uint32__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1uint32__t_01_4.html</anchorfile>
      <anchor>ab20ea4ae63c1e07e92be233bf7dfdf0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::uint8_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1uint8__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1uint8__t_01_4.html</anchorfile>
      <anchor>a16de7d2e1f85b0a6dbbcc1b960725d01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Wider&lt; toi_iter_type &gt;</name>
    <filename>structplayrho_1_1Wider.html</filename>
  </compound>
  <compound kind="class">
    <name>playrho::d2::World</name>
    <filename>classplayrho_1_1d2_1_1World.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Body * &gt;</type>
      <name>Bodies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa870e22432755fa01d0c36ee44b6188f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; KeyedContactPtr &gt;</type>
      <name>Contacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a58a45af85423cfe2472ded2960f9b526</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Joint * &gt;</type>
      <name>Joints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3f6e4c9c69426cb0c0573eab7a27c6d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Fixture * &gt;</type>
      <name>Fixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3df9860a2d2c08485fd79a52f686c705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa89b7fd6debfc04e3f41018deab88d29</anchor>
      <arglist>(const WorldConf &amp;def=GetDefaultWorldConf())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae0dbefcd9b9d640f7013360f040c392f</anchor>
      <arglist>(const World &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>World &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4b2d37998661b12ac6ef32c46b59d81e</anchor>
      <arglist>(const World &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acd12237b5cc3cdbaa791c6bf4730b48b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5f7ba5f781b2d795f06aaa5d0e7b5ca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3f0652770c49d942111e84c231c6175d</anchor>
      <arglist>(DestructionListener *listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1d1fe0d0841ecd8b7576d6027464efa2</anchor>
      <arglist>(ContactListener *listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a66716e8c9020509c9891d9223a58be93</anchor>
      <arglist>(const BodyConf &amp;def=GetDefaultBodyConf())</arglist>
    </member>
    <member kind="function">
      <type>Joint *</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8b2dbd2e42ecedf2d877875c62a9a2a4</anchor>
      <arglist>(const JointConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8fce75bd4075681b56a758ccb9d950ba</anchor>
      <arglist>(Body *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1c40412270fa00c2ca844af8843a715b</anchor>
      <arglist>(Joint *joint)</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af65a576b04537b18bcddf5636b0d3386</anchor>
      <arglist>(const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::iterator &gt;</type>
      <name>GetBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a675f077db481c69746da36e738ff78f3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::const_iterator &gt;</type>
      <name>GetBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5cd6d79f7ae9523cc0a5f93cd9279751</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::const_iterator &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acdf003251b1066d6fc06a86c34664ba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Fixtures::const_iterator &gt;</type>
      <name>GetFixturesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a382c3cc9eac5a1561a2a67d7ae6d6086</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Joints::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adc190d1e8bda83cecad0c88a8543f3fa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Joints::iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a44f41c6c937481f794147cdb9b14691f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Contacts::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a599c3903feb0a48673d9dc38758ae2bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae11b95986545392904cfa45cdef13478</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8799d82838efa9277f588dc0819c51dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6eb2e6c5d518c12dcbcc26979f46a5ae</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9e88ff1fed5897d1f35bdca45b0d3769</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aabf20551c381368b2019b832b7c98119</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a810c702555c946c686e4062c7966008c</anchor>
      <arglist>(Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMinVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a95453e9c6c17e66fbb7e96256b2ca071</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a887bfd8eb8cbe735a9830c8a5aec2bce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae9a06df8bd96d7d7ade817dffff67351</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldAtty</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ade270704e975314f3f8ca88abfad14ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a54933e742508cac5c0b219c653c67674</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8902de592d92cefc72d2e984d591a27d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac7b6c00fbd4fc40a4957bd082c9437b4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetTouchingCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af8aabfb6390fed1c549e81700b0cd80e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a035ee60a3274619546a2cee7b982b894</anchor>
      <arglist>(World &amp;world, Time delta, TimestepIters velocityIterations=8, TimestepIters positionIterations=3)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetFixtureCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad07495876f7627e4c0b347fd08ce5346</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetShapeCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a16741ddd7414c860451f4b6ba92d7bf4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetAwakeCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0812de1607b6656927bc2ad724f1d7c3</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>Awaken</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1539463268cf6db572823eb1a195dc70</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5c6e8e38d0d92d2c59fb4235bda2c2b3</anchor>
      <arglist>(World &amp;world, F fn) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad85bb4dfbf060d7d28668e4bc2d73a10</anchor>
      <arglist>(World &amp;world, Acceleration acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab9dc75916d003478c7004172110b58e2</anchor>
      <arglist>(World &amp;world, LinearAcceleration2 acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearForces</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa8a757a3ee66fa157cbf1ffafdf556d4</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>FindClosestBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afd5009f0701e56be66936edcd9308111</anchor>
      <arglist>(const World &amp;world, Length2 location) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::WorldAtty</name>
    <filename>classplayrho_1_1d2_1_1WorldAtty.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Body</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldAtty.html</anchorfile>
      <anchor>a8858f397a273114ddc1443880bb5540e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Fixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldAtty.html</anchorfile>
      <anchor>a7cc19ccd29f90e77e5332f42ab062038</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldConf</name>
    <filename>structplayrho_1_1d2_1_1WorldConf.html</filename>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WorldConf &amp;</type>
      <name>UseMinVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a8940712fdf40b4e07c6d30723f708323</anchor>
      <arglist>(Positive&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WorldConf &amp;</type>
      <name>UseMaxVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a7dc6ccf68dc16bec3b09497afbd05dc0</anchor>
      <arglist>(Positive&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WorldConf &amp;</type>
      <name>UseInitialTreeSize</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a644cfe973e64986935d1933381bd7962</anchor>
      <arglist>(ContactCounter value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Positive&lt; Length &gt;</type>
      <name>minVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>ac263a75e94581a0b37d4ff1f08984ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Positive&lt; Length &gt;</type>
      <name>maxVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a3630c7407747eda7c5d97c43d771d815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>initialTreeSize</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>aa40a06645a5a4104e518d44c9716c2f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WorldConf</type>
      <name>GetDefaultWorldConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>ad1b49affcbf8a783155380873e8398a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::WorldManifold</name>
    <filename>classplayrho_1_1d2_1_1WorldManifold.html</filename>
    <class kind="struct">playrho::d2::WorldManifold::PointData</class>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxManifoldPoints)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>afdc1a8297a445dfd8192a71dc816ed5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a82f1ad79d18712eb0a8ad4692c063083</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a4c1dcda784537d670bd0e56d521353ff</anchor>
      <arglist>(UnitVec normal) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a60d0596178ab601b2245c72086d7410e</anchor>
      <arglist>(UnitVec normal, PointData ps0) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR</type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a580709ef695ac742f154f6d213bae285</anchor>
      <arglist>(UnitVec normal, PointData ps0, PointData ps1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetPointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>ae1cb8e651628460be908ba768c7d3883</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a2ce12d689aa54e581abdc238fe95d2cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a4872f3b8f5ec291a4e2d8324829f82b6</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetSeparation</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a0e20bfa57459aa27c74c57043b822bd0</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a82d672d8bf598bf27a746423392b72b3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::WrongState</name>
    <filename>classplayrho_1_1WrongState.html</filename>
  </compound>
  <compound kind="namespace">
    <name>playrho</name>
    <filename>namespaceplayrho.html</filename>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::detail</namespace>
    <namespace>playrho::GaussSeidel</namespace>
    <class kind="class">playrho::AllocatedArray</class>
    <class kind="class">playrho::ArrayList</class>
    <class kind="class">playrho::BlockAllocator</class>
    <class kind="struct">playrho::BlockDeallocator</class>
    <class kind="class">playrho::BoundedValue</class>
    <class kind="struct">playrho::ConstraintSolverConf</class>
    <class kind="struct">playrho::ContactFeature</class>
    <class kind="class">playrho::ContactKey</class>
    <class kind="struct">playrho::Filter</class>
    <class kind="class">playrho::Fixed</class>
    <class kind="struct">playrho::FixtureProxy</class>
    <class kind="class">playrho::FlagGuard</class>
    <class kind="class">playrho::GrowableStack</class>
    <class kind="struct">playrho::HasOne</class>
    <class kind="struct">playrho::HasOne&lt; T, detail::VoidT&lt; decltype(T{1}) &gt; &gt;</class>
    <class kind="struct">playrho::HasType</class>
    <class kind="struct">playrho::HasType&lt; T, std::tuple&lt; T, Ts... &gt; &gt;</class>
    <class kind="struct">playrho::HasType&lt; T, std::tuple&lt; U, Ts... &gt; &gt;</class>
    <class kind="struct">playrho::HasType&lt; T, std::tuple&lt;&gt; &gt;</class>
    <class kind="class">playrho::Interval</class>
    <class kind="class">playrho::InvalidArgument</class>
    <class kind="struct">playrho::IsAddable</class>
    <class kind="struct">playrho::IsAddable&lt; T1, T2, detail::VoidT&lt; decltype(T1{}+T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsArithmetic</class>
    <class kind="struct">playrho::IsArithmetic&lt; T, detail::VoidT&lt; decltype(T{}+T{}), decltype(T{} - T{}), decltype(T{} *T{}), decltype(T{}/T{}) &gt; &gt;</class>
    <class kind="struct">playrho::IsDivisable</class>
    <class kind="struct">playrho::IsDivisable&lt; T1, T2, detail::VoidT&lt; decltype(T1{}/T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsEqualityComparable</class>
    <class kind="struct">playrho::IsEqualityComparable&lt; T1, T2, detail::VoidT&lt; decltype(T1{}==T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsInequalityComparable</class>
    <class kind="struct">playrho::IsInequalityComparable&lt; T1, T2, detail::VoidT&lt; decltype(T1{} !=T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IslandStats</class>
    <class kind="struct">playrho::IsMatrix</class>
    <class kind="struct">playrho::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::IsMultipliable</class>
    <class kind="struct">playrho::IsMultipliable&lt; T1, T2, detail::VoidT&lt; decltype(T1{} *T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsSquareMatrix</class>
    <class kind="struct">playrho::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::IsVector</class>
    <class kind="struct">playrho::IsVector&lt; Vector&lt; T, N &gt; &gt;</class>
    <class kind="class">playrho::LengthError</class>
    <class kind="struct">playrho::LengthIndexPair</class>
    <class kind="struct">playrho::LexicographicalGreater</class>
    <class kind="struct">playrho::LexicographicalGreaterEqual</class>
    <class kind="struct">playrho::LexicographicalLess</class>
    <class kind="struct">playrho::LexicographicalLessEqual</class>
    <class kind="struct">playrho::MovementConf</class>
    <class kind="class">playrho::OptionalValue</class>
    <class kind="struct">playrho::PointStates</class>
    <class kind="struct">playrho::PreStepStats</class>
    <class kind="class">playrho::Range</class>
    <class kind="struct">playrho::RegStepStats</class>
    <class kind="class">playrho::SizedRange</class>
    <class kind="class">playrho::Span</class>
    <class kind="class">playrho::StackAllocator</class>
    <class kind="class">playrho::StepConf</class>
    <class kind="struct">playrho::StepStats</class>
    <class kind="struct">playrho::ToiConf</class>
    <class kind="struct">playrho::TOIOutput</class>
    <class kind="struct">playrho::ToiStepStats</class>
    <class kind="struct">playrho::ValueCheckHelper</class>
    <class kind="struct">playrho::ValueCheckHelper&lt; T, std::enable_if_t&lt; HasOne&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">playrho::Vector</class>
    <class kind="struct">playrho::Version</class>
    <class kind="struct">playrho::Wider</class>
    <class kind="struct">playrho::Wider&lt; double &gt;</class>
    <class kind="struct">playrho::Wider&lt; float &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::int16_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::int32_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::int8_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::uint16_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::uint32_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::uint8_t &gt;</class>
    <class kind="class">playrho::WrongState</class>
    <member kind="typedef">
      <type>std::pair&lt; Length2, Length2 &gt;</type>
      <name>PairLength2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae444a62491fcb2b10f0f06a41b1ac406</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexCounter, VertexCounter &gt;</type>
      <name>IndexPair</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7d449e0a1528c10ae0f241713fb69b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; IndexPair, MaxSimplexEdges &gt;</type>
      <name>IndexPair3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a704da3b24d9b1f9135e140dcd5420518</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; VertexCounter, N &gt;</type>
      <name>VertexCounterArray</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0a8c8047429035c030e233c9503cbec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexCounterArray&lt; 2 &gt;</type>
      <name>VertexCounter2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae2ea03f9c65d074dfd1aa21b6352f293</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer&lt; T &gt;::value, BoundedValue&lt; T, LoValueCheck::ZeroOrMore, HiValueCheck::Any &gt; &gt;</type>
      <name>NonNegative</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>gae872dc540686eb8e626643117f8cb62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::Any, HiValueCheck::ZeroOrLess &gt;</type>
      <name>NonPositive</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga68b6bab2cd78b32dbd643d341f37b8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::AboveZero, HiValueCheck::Any &gt;</type>
      <name>Positive</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>gae492ff78381a7dc66d271d0ee3b1189d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::Any, HiValueCheck::BelowZero &gt;</type>
      <name>Negative</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga0a15a03f8bd917575a6ae1cc06dff112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::AboveNegInf, HiValueCheck::BelowPosInf &gt;</type>
      <name>Finite</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga9cf75a03c4b0afaaba95d65ec8ce54b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer&lt; T &gt;::value, BoundedValue&lt; T, LoValueCheck::NonZero, HiValueCheck::Any &gt; &gt;</type>
      <name>NonZero</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga6d3eb15a067eb31352543486e8f10f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer&lt; T &gt;::value, BoundedValue&lt; T, LoValueCheck::NonZero, HiValueCheck::Any &gt; &gt;</type>
      <name>NonNull</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>gab64c2bdfe3d8c1c0815013d817b4aa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::ZeroOrMore, HiValueCheck::OneOrLess &gt;</type>
      <name>UnitInterval</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga434227c634b0a1b975979d4dbc242346</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Fixed&lt; std::int32_t, 9 &gt;</type>
      <name>Fixed32</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a51e61fee8a0be399ed24773ebc3135f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; Vector&lt; T, N &gt;, M &gt;</type>
      <name>Matrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acbf97bd8e3f0f2ce4588735388f4089a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, 2, 2 &gt;</type>
      <name>Matrix22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a26aabbb6723402cb9e12cf32e17beebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, 3, 3 &gt;</type>
      <name>Matrix33</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a92e228aada1d7ca23d9f6c2c9ce3b415</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; Real &gt;</type>
      <name>Mat22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a02c09bb6556e3168c0085871358d2f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; Mass &gt;</type>
      <name>Mass22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a358c8036b278316ab41b3f35b56342a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; InvMass &gt;</type>
      <name>InvMass22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a507cf0b47bd41371f90aa8f78f1d7c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix33&lt; Real &gt;</type>
      <name>Mat33</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aabd44d74c5bc530c9b6676c6a61e6b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptionalValue&lt; T &gt;</type>
      <name>Optional</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acbc56513bd325732410bc4dbb3261299</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Real</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1fc125070a08100d083a1360f7167f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxChildCount)&gt;::type</type>
      <name>ChildCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aed352724e203ca09595faf0dc6a76e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>TimestepIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3898807006fd29cd5c4fc2e1a9cf5536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxShapeVertices)&gt;::type</type>
      <name>VertexCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a16da705f1b3c51c7fd1b9b1162c258b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxBodies)&gt;::type</type>
      <name>BodyCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4106d8a0e998a2485196534514527a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Wider&lt; BodyCounter &gt;::type</type>
      <name>ContactCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2bf0674233f83e8b83b30db98332e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxJoints)&gt;::type</type>
      <name>JointCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aeb8ea60dc388d1e92e2e6fa277a32495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::IsIterableImpl&lt; T &gt;</type>
      <name>IsIterable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4708d38a866c6ebc70da3939d5edc8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename HasType&lt; T, Tuple &gt;::type</type>
      <name>TupleContainsType</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a592a9fb888eae63605b73b61c61ccd17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::time)</type>
      <name>Time</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga250898c9929b0e6eaf56a1967c568888</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::frequency)</type>
      <name>Frequency</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad39135cf298be76964c70829ec84a51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::length)</type>
      <name>Length</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga7361ef2e10e7853a05b64aa433651014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::velocity)</type>
      <name>LinearVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga6e944c18ed210626b5829b8ad2813fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::acceleration)</type>
      <name>LinearAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gadf7de472e7f4a6fa26bff6a655f100e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::mass)</type>
      <name>Mass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga5edfc295416b7690b4f949223b551bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::inverse_mass)</type>
      <name>InvMass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga370c2a37515b6a8e79468113554f8ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::area)</type>
      <name>Area</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga3ea2a7de91fdafccb2e49c3a84117ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::surface_density)</type>
      <name>AreaDensity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga534c92a63631b49d1e80119a68af8a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::plane_angle)</type>
      <name>Angle</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gab999341c050df340ff56a65816a63da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_velocity)</type>
      <name>AngularVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gac33f92018f7e8821550296aece465028</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_acceleration)</type>
      <name>AngularAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gafcce543a0d59f313adb801e2e18ede86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::force)</type>
      <name>Force</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gabdbf955ed1cafec5062f074511ee4829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::torque)</type>
      <name>Torque</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaa13e620479b6e4a34fae5a90bcaf9355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::second_moment_of_area)</type>
      <name>SecondMomentOfArea</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga84a494e0a8763db409c32bde53324b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::moment_of_inertia)</type>
      <name>RotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga67bbb3e4938321efec8d939636bf988e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::inverse_moment_of_inertia)</type>
      <name>InvRotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gafa6edf71110d3eef58f39dcbb8067ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::momentum)</type>
      <name>Momentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga1d281ffd7cf8e2c8897d03a1cae9f1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_momentum)</type>
      <name>AngularMomentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga3537d441743bb2f96c612296424f1e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, 2 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a97243f194a9406d0fdcf5f6f833851ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Real &gt;</type>
      <name>Vec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad93c0cd83df090aba6593ffac4b628ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Length &gt;</type>
      <name>Length2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7dc68cd0ce177e175ae0bb6c39db158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; LinearVelocity &gt;</type>
      <name>LinearVelocity2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2faa31bff8794a0c4191d8b042f7deeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; LinearAcceleration &gt;</type>
      <name>LinearAcceleration2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5822921028100052d4c6dfb43c7f6c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Force &gt;</type>
      <name>Force2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2d09dc7b51321c052b071485357ca1f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Mass &gt;</type>
      <name>Mass2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acfba2b26f22dcc026361ed5a0ccf3966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; InvMass &gt;</type>
      <name>InvMass2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab4f2424eab18780894e83bbc4127fe67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Momentum &gt;</type>
      <name>Momentum2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1fa6ffb2e67c2e2f620eed088412b146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, 3 &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad07b44f811ac4c7551067fb1d3554ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; Real &gt;</type>
      <name>Vec3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a63f6dcdf3763052ea25099973c7c00ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; Mass &gt;</type>
      <name>Mass3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a996c0271f83c70e94b485ff59bb468a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; InvMass &gt;</type>
      <name>InvMass3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d3b57b56d804cd09ae743e670e866d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PointState</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a06f67e158a928ef59e4263facac8fb0b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba5ac8cf2fb7a90ff2d0829f5fca4db5b8">NullState</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba494a3e62657370358107e2edf3fca5a0">AddState</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba60a7f32dd91e5f33a4ca2bc7b7255343">PersistState</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba3500ff358c0521359118fe519bd8f605">RemoveState</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RayCastOpcode</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66189f1fe36ac717e284ab1099171106</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a056fa3d840f48b7bfbbd68c19a4797b3">Terminate</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106aaf8767ee039cdc51717435bb815da593">IgnoreFixture</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a8dcfe18b6245b17c9cd69d5af7ef1847">ClipRay</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a4592f28dc9d11de3ce507bebafd9de16">ResetRay</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LoValueCheck</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a57593cac21168ed673c77a11d18a35ec</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a57593cac21168ed673c77a11d18a35ecaed36a1ef76a59ee3f15180e0441188ad">Any</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a57593cac21168ed673c77a11d18a35eca08d0300b85ba14410a36f26242cdf296">AboveZero</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a57593cac21168ed673c77a11d18a35eca841be1f7bfc87798da5daeaf319a201c">ZeroOrMore</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a57593cac21168ed673c77a11d18a35ecaa7afdf5ead2f4915d42dd23e67cda977">AboveNegInf</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a57593cac21168ed673c77a11d18a35eca3d0365a27a39c0af183445fc4d932a8a">NonZero</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>HiValueCheck</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1f31f7e3449c760decd7f664e16b0390</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a1f31f7e3449c760decd7f664e16b0390aed36a1ef76a59ee3f15180e0441188ad">Any</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a1f31f7e3449c760decd7f664e16b0390aa0b070c9fcba92b81efd9133622cab5a">BelowZero</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a1f31f7e3449c760decd7f664e16b0390a690d9aa6dec6cccd97930a57f6b163c6">ZeroOrLess</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a1f31f7e3449c760decd7f664e16b0390a077d8b16f44fc9a68c5c3c7d3eedc1aa">OneOrLess</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a1f31f7e3449c760decd7f664e16b0390ad921987a0929f408ce3d9c1f5297f60e">BelowPosInf</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BodyType</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a098b0ef528e3b728af8e3e17873963f7</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a84a8921b25f505d0d2077aeb5db4bc16">Static</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a40c78b58b86002ee38fad2d3c9dd787e">Kinematic</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a971fd8cc345d8bd9f92e9f7d88fdf20c">Dynamic</enumvalue>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54d5fa1d077fbec64800d99ce2775aae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetVertexVertexContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a10ad4cc19ec75313b99288e91950a47d</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetVertexFaceContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad6e8b575033edcfa889ffbf46c59d3cf</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetFaceVertexContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acba99e7b6830147b661bafaa0dea6e57</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>GetFaceFaceContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab8801413b54ba7e1db710717c18020d7</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ContactFeature</type>
      <name>Flip</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac6715d6c6303a8e57025977ca0b079eb</anchor>
      <arglist>(ContactFeature val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a197cce644da40356103fcdebd7911dba</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9469d42ec9781ca037c112ae05ebe9ae</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6cc5c3f8bdf0fe8001ba1d2e3f7b2eea</anchor>
      <arglist>(ContactFeature::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad3ec58bed15fb00ea00af6a52e5a7e3e</anchor>
      <arglist>(::std::ostream &amp;os, const ContactFeature &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::size_t</type>
      <name>GetNumValidIndices</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adaa1d36f29e78ecf1d24460013b56560</anchor>
      <arglist>(IndexPair3 pairs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab933259b6cadcc9f98417d3ec9dbc99e</anchor>
      <arglist>(IndexPair3 pairs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>size</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a357d9cd48bb5d4b1aef8c87f599dd45f</anchor>
      <arglist>(IndexPair3 pairs) -&gt; decltype(GetNumValidIndices(pairs))</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>max_size</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9e122c83e49e5d6649067d944ed176b3</anchor>
      <arglist>(IndexPair3 pairs) -&gt; decltype(pairs.max_size())</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetFirstShapeVertexIdx</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a24de24fa4d8c10dea7826ce11c81ff36</anchor>
      <arglist>(const detail::SeparationInfo&lt; N &gt; &amp;info) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSecondShapeVertexIdx</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a435b2e5c84e285bf7f0ac9486c2512d3</anchor>
      <arglist>(const detail::SeparationInfo&lt; N &gt; &amp;info) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad596c747e4643415e312ad69bef2a03b</anchor>
      <arglist>(const d2::Manifold &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Visit&lt; d2::Shape &gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5088fa473b382571a89d042e8a310bee</anchor>
      <arglist>(const d2::Shape &amp;shape, void *userData)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acb29c9575dd4eeac1ff13136d9a56494</anchor>
      <arglist>(TOIOutput::State state) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ToiConf</type>
      <name>GetToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9864179cb9a35cb6665d429656ad0e9b</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetDefaultToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abb1706f5ee9f03fdec4a73d2c4d6ce6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a75eaa3e476bb7117d67e6df9fbfef61b</anchor>
      <arglist>(const d2::Acceleration &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ArrayList&lt; T, S &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afe9da6ff11f4a2c1b7d0df8f513bc217</anchor>
      <arglist>(ArrayList&lt; T, S &gt; &amp;lhs, const typename ArrayList&lt; T, S &gt;::data_type &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ArrayList&lt; T, S &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2410eb16decdbb7ed8ce34c06327161b</anchor>
      <arglist>(ArrayList&lt; T, S &gt; lhs, const typename ArrayList&lt; T, S &gt;::data_type &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Delete</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a02f6b57cf0f7bc53f9339381007d9b84</anchor>
      <arglist>(const T *p, BlockAllocator &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab5692e54289c87c156bd7455763082a9</anchor>
      <arglist>(const BlockAllocator &amp;a, const BlockAllocator &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a425d26025dffe3901caa095b9fa19682</anchor>
      <arglist>(const BlockAllocator &amp;a, const BlockAllocator &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::numeric_limits&lt; T &gt;::has_infinity, void &gt;</type>
      <name>CheckIfAboveNegInf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a59f286859b30722528653b8b22db575e</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt;!std::numeric_limits&lt; T &gt;::has_infinity, void &gt;</type>
      <name>CheckIfAboveNegInf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abac2f26ff2e83bc367d654ce25f39545</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::numeric_limits&lt; T &gt;::has_infinity, void &gt;</type>
      <name>CheckIfBelowPosInf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac8bcfd8fa121db2e504c73c636acb4a6</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt;!std::numeric_limits&lt; T &gt;::has_infinity, void &gt;</type>
      <name>CheckIfBelowPosInf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa3801ac5010eb98e69e1e71bb330ba0f</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af7617d2de4e77e6b2ae6c4a23bf08ea6</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a19598ae45019edea9cd9566e3966e25c</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2fda4ed95b3e8aef674cc4f40ac9c256</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2ad5ec0fcfae4c6e9d9a1d59cab77432</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afaf5366fdd561f2d9ffe61167ae0f5a6</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a90f7cafaa85a495bde8282dc0b0dfc98</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a88516702484ce225186e4388cab8c007</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5faa7d6df2c73d412476a7c8d672c8a8</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a41c2f56046c1900b352bc349647bf441</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a521ae1143f57ad3f714134091f4b7a9d</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5052f98c2db895a8d4dabc53294527da</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6cc632c2d1a08a96e780aaa4adf2a0cf</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a16e6e8dde024e9eb1bfe98b1ec668744</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a914075b95e5d39a01c90919525ad5b73</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af48ed42bbd3e7e3c3648c1644cb79937</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afdda5158c5d97cf1ffec82b1b1126482</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const T rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4b99468da69970a941511d91342e118d</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const U rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a793c2dc0c6bfa88930594d2aba8fb4a4</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const U rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a33dd627f695adb3a66dc7c64b21de2f4</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const U rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adeb4a07f5177eca7d807775b49731306</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; lhs, const U rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa787954e38e6fa624566e4da935d3ab6</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9130a5578df059499441c31cd4e47b69</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4d693411bafbcd96aea4f64034bbc40f</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afba8c9e06f41677c6870d31118741a4e</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac082e37a15d431ff58945c87094a2992</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a68c97bd4484daac3a451c3a3a1a63e84</anchor>
      <arglist>(const T lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a457c28512e2318ba0380d132189078c5</anchor>
      <arglist>(const U lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa711ab829adfffa0eddc4426e4c93861</anchor>
      <arglist>(const U lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a132b4c12e412947f9abdf7cb7f344b0e</anchor>
      <arglist>(const U lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac22322127c812c51fbec45b54396c1d1</anchor>
      <arglist>(const U lhs, const BoundedValue&lt; T, lo, hi &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a64d8be6e505673dbdb72539076885ec7</anchor>
      <arglist>(::std::ostream &amp;os, const BoundedValue&lt; T, lo, hi &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Alloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a516a3bbb73371cdc53f348b67f43bb1f</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Realloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1e5b2682a491fff8510bbcfea1929e59</anchor>
      <arglist>(void *ptr, std::size_t new_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a62c138018c11ab3c255b410f2dedd7d2</anchor>
      <arglist>(void *mem)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>Realloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3a103da67690df019db5811cec069c61</anchor>
      <arglist>(T *ptr, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a08e1246afa016452ab43ef1ae5906973</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4a4b4e933d0de3e22d7f9ed67d974313</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a17761c9feb89d061621d793a88fff411</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a84a631162f6aa6d3d6f13705d7267079</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac19575018f5f3101db273c2b33f1ab4f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9de9b93007ae1f89be08c9ee4d261c9a</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed&lt; BT, FB &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abf7155a910eaa0ec008e2bebaa4f0de3</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed&lt; BT, FB &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a896ed085d4832befdc4523c9a8a48f62</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed&lt; BT, FB &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8249194da52af6a68cfc7fc3dc6b45f5</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed&lt; BT, FB &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae64b946db27c3256a149851f379d539f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed&lt; BT, FB &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4c96799706ca991351ede533bd5e9aa9</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>AlmostZero</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af449f3dac7aed6e35a519ad0b9ebc540</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>AlmostEqual</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac18b19d457199ee49770d262dfdef98c</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; x, Fixed&lt; BT, FB &gt; y, int ulp=2)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a598d4f1182411b5db1d2c445b16fc5fd</anchor>
      <arglist>(::std::ostream &amp;os, const Fixed&lt; BT, FB &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed32</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6685eb90d858afe3e745f22a73749138</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed32</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afb30dbb75f77b1ec2c053970ad92f6c1</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed32</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af44208cebfbf016b0b8f51c4b21dd460</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed32</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aee7d1405232ab84b037748fa77252d0e</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Fixed32</type>
      <name>operator%</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8a8b3398ca80d67cef0b95f38c173adf</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a334fab8c8d4da9f26fb91c5ac62d42da</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1cbbdc36c6a8f0611d0b71f1acd637b8</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4b8ccaf67f4d8fe3bd448030093d289c</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab30f3accd26968cebb92fb0722a66bd6</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2ee33c3f1ad5437131fc92673ab519d6</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d54c9e6d7a5cc86806af0f16d718286</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTypeName&lt; Fixed32 &gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2557f9e67a6520f3539c9ab282823c70</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>abs</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gad5766364e4f6e29b62f20216a25a678f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>pow</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gae62c436656c3c2a2e0d46d83fe1ea3ae</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value, int n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>trunc</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga55adeaba7e08eb415e6437f709b62c0f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>nextafter</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga935fa93a69f58baf20b00e14461d51e7</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; from, Fixed&lt; BT, FB &gt; to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>fmod</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaae59d507ab3b0f722d4d22b3e4969f4a</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; dividend, Fixed&lt; BT, FB &gt; divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sqrt</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7a9d7e9855b45a3b4103632a47ccd6f4</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isnormal</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga4ab479ab854291e9d03a25cc0986deca</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>sin</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga0daabd6eacf8702561639d394e3efe6e</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>cos</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaf6191f040980675d9a5c71bd53c79060</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>atan</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaa5670d26d229424278268189beb541f5</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>atan2</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaad3e4450a30d08eceda4225bd26c312b</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; y, Fixed&lt; BT, FB &gt; x)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>log</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga661c3590b9b618ac14194bf25a70f1d6</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>exp</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7ddb9c067c645bded41aafe75cfecd02</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>pow</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga85dfc7d7d071b22f80179a86e5544237</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; base, Fixed&lt; BT, FB &gt; exponent)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>hypot</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gafff5f9018a9088992be3c922926aee56</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; x, Fixed&lt; BT, FB &gt; y)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>round</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga1e3ca7fb2626886c5920bbc5f570a525</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signbit</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga8445167791eb53f1e8eb0dbf318293a1</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>isnan</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7c8088b287bc76ea58ccb572e3e14012</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isfinite</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gab8fa73692143466ca4d584aacf5749f1</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetSize</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a27cd843c0cfe341550f2f4e5f91bf894</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetCenter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abd40c765c799140cbe2b9e1ce4e82bb7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsIntersecting</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6337a4ffbf1fbfb13eece2bb55b93435</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Interval&lt; T &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae1f28075bffede36f3b4c48a477edfda</anchor>
      <arglist>(Interval&lt; T &gt; a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsEntirelyBefore</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2b4597a31b2b04189ef75e8d72dbeb51</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsEntirelyAfter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6a567a96ebb2a72b1046573bb4f13a4c</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsEntirelyEnclosing</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a29272f4a3694c4725faa56e6c4c1d2a2</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abebf2ea3be7831ecd4559b2bc0d739c1</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a56e28e7223ba1dc78278773b81130c19</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab24ce9e9d1f928ef3e60c6bede948966</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54f2a9ebae8216d14665a627b78c81a8</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4d1061544f64556d9c7d77ae547a60b8</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6f7ace6468a69a7f600ff05d01598ffd</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acd5053c1cb8807f6296852e4a8c657d2</anchor>
      <arglist>(::std::ostream &amp;os, const Interval&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetDelta</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8c036532db1260373b97c1d85360894c</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>ComputeCentroid</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae769785f0540a4b8960b282f6b105c14</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetCircleVertices</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3b8e8abc999b0c63cf1921b0edcf0b36</anchor>
      <arglist>(Length radius, unsigned slices, Angle start=0_deg, Real turns=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfCircle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0eb57dabfe8d3db9e509a6b493173358</anchor>
      <arglist>(Length radius)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfPolygon</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga118f8284073d2638e48ef8f13177e1d9</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>SecondMomentOfArea</type>
      <name>GetPolarMoment</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga760adfdd1cb30bdae8cd37c1ae5da485</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac40645d0127c8fd699610de821aebb57</anchor>
      <arglist>(T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac8e87b921726f7c140ea35db1913ac6c</anchor>
      <arglist>(T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>GetZ</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8be31a2325d99319d9cb505057ab44cb</anchor>
      <arglist>(T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a99a4aa54b7951fcfd31d080a6faa47c0</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5c1daa991d7fcea58ab2063a5fb94df8</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetZ</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a90e5ac1606ff0591033cfd2f7f99cce4</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_signed&lt; T &gt;::value, std::make_unsigned_t&lt; T &gt; &gt;</type>
      <name>MakeUnsigned</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab84205bd8956258eea02a5cb0d829042</anchor>
      <arglist>(const T &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>StripUnit</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a874b78de5f6a519116cca5fc0e3d0ce2</anchor>
      <arglist>(const BoundedValue&lt; T, lo, hi &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR U</type>
      <name>Secant</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gafbb2415d17dfe0130be9799f945dbc5e</anchor>
      <arglist>(T target, U a1, T s1, U a2, T s2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>Bisect</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga53d729355fcef6f1d5d1e5e8a31f08cd</anchor>
      <arglist>(T a1, T a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsOdd</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga7d0999f6415f56dc56b97da946c23129</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Square</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga9163760181cfb59593537b444defe6cf</anchor>
      <arglist>(TYPE t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Atan2</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab870a9188fcc77c905807fa718a8268d</anchor>
      <arglist>(T y, T x)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Average</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8b2133f1c2e5299035bb059d2d2706cd</anchor>
      <arglist>(const T &amp;span)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; IsArithmetic&lt; T &gt;::value, T &gt;</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab8f24574b8a0ca458ec2fe9d691364ff</anchor>
      <arglist>(T value, unsigned precision=100000)</arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga812ea5eaf66fb9d1bffa799886b2eee3</anchor>
      <arglist>(Vec2 value, std::uint32_t precision=100000)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; T, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>d2::UnitVec</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac862a8609b82126d0683ecb38a498087</anchor>
      <arglist>(const d2::UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, bool &gt;</type>
      <name>AlmostZero</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga4e8eade67bf49fee09cd743895113ebb</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value, bool &gt;</type>
      <name>AlmostEqual</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga035c5294391f9652e8966092b5caca58</anchor>
      <arglist>(T x, T y, int ulp=2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaFmod</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga25b52facf9e28f05e5e41f4e7b7ff54e</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaTrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga84e7cb2a415fcb956202c8d7e1b1d200</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetNormalized</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga156a2abff11f978a8df25efbf0c10147</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga56785e4c60180ef416fe29f68ccf525a</anchor>
      <arglist>(const Vector2&lt; T &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetMagnitudeSquared</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac5292dcebbf79916913d2a8c3cc0f821</anchor>
      <arglist>(T value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMagnitude</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga85c114f129eeee63e60ec7d4703bbd65</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Dot</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga76a104de7c7a8d482209827d8b26dfa6</anchor>
      <arglist>(const T1 a, const T2 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Cross</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaf5853b82d4317a3c002b5aae800caf44</anchor>
      <arglist>(T1 a, T2 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Solve</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga48e5d966eb9e5d6b126f7fbe10d3b697</anchor>
      <arglist>(const Matrix22&lt; U &gt; mat, const Vector2&lt; T &gt; b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Invert</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaa93fcc5a3b89a2c26ebeb2ba69e31a6d</anchor>
      <arglist>(const Matrix22&lt; IN_TYPE &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec3</type>
      <name>Solve33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga5971f12d70f44aaa1659523dd79bad56</anchor>
      <arglist>(const Mat33 &amp;mat, const Vec3 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>Solve22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga307196931b0b067cacfb6b690547554c</anchor>
      <arglist>(const Mat33 &amp;mat, const T b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mat33</type>
      <name>GetInverse22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga929129f73956d318af97ba018147d673</anchor>
      <arglist>(const Mat33 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mat33</type>
      <name>GetSymInverse33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac05611bc6ee4ca8ba6b60074ca969568</anchor>
      <arglist>(const Mat33 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga7db75e579c251d11bbb7da89184bcbc5</anchor>
      <arglist>(const T vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga00b2d4eb2cee9e0e14f8e9eea46df5e5</anchor>
      <arglist>(const T vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaab12e9930e01cf5596b23e2e63d83f2a</anchor>
      <arglist>(const Vector&lt; T1, M &gt; v, const Matrix&lt; T2, M, N &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac24b2130cf7cb682b1f9d2ce2f701f29</anchor>
      <arglist>(const Vec2 v, const Mat33 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>InverseTransform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga05c5113af7bc4a93fb0df5e812a5bf7d</anchor>
      <arglist>(const Vec2 v, const Mat22 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mat22</type>
      <name>MulT</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga827e59c08791e02964cd63d4382a4549</anchor>
      <arglist>(const Mat22 &amp;A, const Mat22 &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mat22</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga94fee43efb2fa412b816e9e0a7df87f8</anchor>
      <arglist>(const Mat22 &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>NextPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0ad2d1e2b11362e91193d313ee00e78c</anchor>
      <arglist>(std::uint64_t x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>Normalize</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0c7d2525a406c1f83c0574e46a2cee32</anchor>
      <arglist>(Vec2 &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetModuloNext</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab5218fea988cf8865a55252d7c282442</anchor>
      <arglist>(T value, T count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetModuloPrev</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga9de9ef40d734a89581bcd6b0804e9b02</anchor>
      <arglist>(T value, T count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>GetRevRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaa23479fc2522d30b5faf88d4a343d264</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt;!IsVector&lt; T &gt;::value, Matrix&lt; T, N, N &gt; &gt;</type>
      <name>GetIdentityMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4a4f43ebaadcd88f829efb082cebec9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsSquareMatrix&lt; T &gt;::value, T &gt;</type>
      <name>GetIdentity</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a43c7cbea13790b72a4bb3aa4af99091c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt;!IsVector&lt; T &gt;::value, Vector&lt; Vector&lt; T, N &gt;, 1 &gt; &gt;</type>
      <name>GetRowMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a63a1715447f7dce79bb09f4bf50745d4</anchor>
      <arglist>(Vector&lt; T, N &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt;!IsVector&lt; T &gt;::value, Vector&lt; Vector&lt; T, 1 &gt;, N &gt; &gt;</type>
      <name>GetColumnMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5fdbbbb834c3389a6efef355718e98b8</anchor>
      <arglist>(Vector&lt; T, N &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae0ab91ce9948b28251bd5f7010ea56f8</anchor>
      <arglist>(const Matrix&lt; T, M, N &gt; &amp;lhs, const Matrix&lt; T, M, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abf301cca25ae9324372e0d266601be2e</anchor>
      <arglist>(const Matrix&lt; T, M, N &gt; &amp;lhs, const Matrix&lt; T, M, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aec0b8dab819e96f993cfdb8c5852ea3e</anchor>
      <arglist>(const Mat22 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aed18ca9774b8ac513ee9c21153395b8e</anchor>
      <arglist>(const d2::Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa51995ca843108552f24b8ccf3c7bcee</anchor>
      <arglist>(const d2::Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NOT_USED</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a465a2b892f4effbc98c1b2468d6eb56a</anchor>
      <arglist>(T &amp;&amp;...)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aebca9d65a7fe1b13d2153365ea5c38df</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac426fb8460298ceef49047f0d8d30a78</anchor>
      <arglist>(const std::size_t &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T *</type>
      <name>GetPtr</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a612ad3b1fb6e9bcda1c02c3d0c06a09d</anchor>
      <arglist>(const T *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T *</type>
      <name>GetPtr</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a46e04f144e783ab9e0ddbdbdec18b54f</anchor>
      <arglist>(T *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T *</type>
      <name>GetPtr</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad9a4c5121046b0f7aeb29da31297b692</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T *</type>
      <name>GetPtr</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a12088eebdc95c1928618bfecf50b75bd</anchor>
      <arglist>(T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T &amp;</type>
      <name>GetRef</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a040cdcbf0532b5393471f61506fefc17</anchor>
      <arglist>(const T *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T &amp;</type>
      <name>GetRef</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3d64e2849426d3384a5f4bac7a6616b6</anchor>
      <arglist>(T *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PLAYRHO_CONSTEXPR T &amp;</type>
      <name>GetRef</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5639883faf1638153c8305ee996da3e1</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T &amp;</type>
      <name>GetRef</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a740409a73c321d59d72dae06bd0ae890</anchor>
      <arglist>(T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Visit</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4d72a91d98ac22b6b7603f9747bca314</anchor>
      <arglist>(const T &amp;, void *)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTypeName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a09121345512aa02387efe31575450d6c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTypeName&lt; float &gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa6d64e8a9e599a8d64e38376b391d62e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTypeName&lt; double &gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aff06bebc8d932908c6cda3738a8be297</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTypeName&lt; long double &gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab607914db71f28acb7e60624f6a419a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a85222e60032cfff157b66b69d86a7941</anchor>
      <arglist>(const d2::Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga14c0aa09892ed4a7b2d46b3fbf41bfc8</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gacf31640481edb2605a7abb68dbdaf749</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae97549d71b0341bc39377700041663f9</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga701e40d1d20e11cdef24fcedf7c23b88</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga684d17076a89433963dc8e1323aa5b55</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac4d843d8faf24294eb520463d9a37813</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9d2018b8764488f776c5a3cf07788b8e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga997e24502fe2452cd289354419781e71</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6de070923e9b463e7c81a87d1486261c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad6fb5c91db30dff44a1a09a8eedea94f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8be5d2aa84e48a3d3c6316332d5a348f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga42755ce0521b8b0130a1c5f11d48964b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaba6b25cf776642ff97185030d0698ac8</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab0b725da10240de2333918963dfde2e5</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0a34b5dc7cac2a5f4112f6893ce06a21</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga2ddca2bb76abdff1a08c35f6988aad1b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gacdef8bf77ff852cab1b11c1c9dc24a32</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaec8d2f9b019cf0833f66b419fa504740</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga639e3760e3331ce0cfb975de496ca975</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6b08394fea8387ac6d9640e5776f844e</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3a3d9e6dddd0021d4bc764cef0eceff0</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8b243cccc73096f470b3f52d7f493ef3</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac0ca071c9d0bf32bd6a4d01aca84ae19</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga30e7212db29d5b6312041200f97633a3</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga97e61bae1e497b896f8e2d98a9779b43</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1a2e6ad4afb3e627981b9e81fc012e4b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad176a2eee3702f7711da245adf07977e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad1231c56d18101cfb0d53a2c42003df7</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab48e985c0b61b4d300c06583893122f1</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8da02678f5590ad991b35b119a7b4c78</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafff606ad84df032356f03e4a7c01eea3</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4f77d9e9c3c2126840001ad39156e0f1</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga391b73d904fce3e5e60a87be78df42b2</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gabb1ded7fb7d02c97a2e54c4f69fb33bb</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac58036a13cae7f8bf437fd6df69706f5</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga464241e9522977097670618359508ca3</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga530568919aee1293441ba7ce0013ccfb</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gada2bbc07689e2dc7f455c190959bbbe1</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6b4a222a228271faa401087192dfd288</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0859831e09cd8275197d6e5d9677fb3e</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga44cbe62a4d856f5aef4224991b3c438f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8f8b7e2debef3864068b820a18e01d9f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9cb6303514b6449fbbc6fca048434837</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga65dba2a7bff526eba56cb0d4cc0b4aa1</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1df36c5d034a211ceb900c726f87a213</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3789883207d17ad417511da46636b927</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga26e8f246fc834b5fea3dec6374941c97</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3c18a1c1e53a34383096fbf514c09e45</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga71a22bf7dab76d4ae75cc162c0d03968</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga311a47d7f3f32758949d319710a4bec0</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga5a455c63651e942e227e38d50dd30daa</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf2ee434b5de8221e4e2238f4ea1dc7bd</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Real</type>
      <name>StripUnit</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adb7953adf3060305d984bce50ab31398</anchor>
      <arglist>(const Real value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a490b25838c4ed7c8eaed66bd354ce11b</anchor>
      <arglist>(const d2::UnitVec &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac57dd3d609c236bf471a84526d8dfe4e</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afb0b5a548efed2357cfdfa38c746f00f</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(+T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a32698762d0d37c394a55cdd167cd4948</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(-T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4b14eb31c39cb09ab1e073c98b575de4</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{}+T{})&gt;::value, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9ac37e361c264eb820a4fcd0957b6659</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{} - T{})&gt;::value, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a17db72d9d3cf57a3dcde299003091925</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{}+T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a26f12e932cc3ae8a52a46acb6a759018</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T, decltype(T{} - T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae4498290f800bb77a09ca6e181f4d200</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3867e38d81818a352ab8e6f527a5dafa</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a33ef497cc5b8197cec1fb5bf7fcdb546</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a916ffd1ead44fed6c0296cd1eb152de8</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, B &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a65669d8b8c23c5569bfcf6a5262a6cdb</anchor>
      <arglist>(const Vector&lt; T1, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, B &gt;, A &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, B &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9a493b2f768fa07b50356b4ba142ad11</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, A &gt;, B &gt; &amp;lhs, const Vector&lt; T2, A &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a49704e8fc8a2eb2e95e3a429ad638f50</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a329a09aded9f2ef0d9f599153feebc63</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7adc6d6a43f882bafb2b88a4e7091e57</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto &amp;</type>
      <name>get</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a062f260761557abf874bd085298df373</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>get</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a50cf2f8c5da833ca93c63f4a9f4bf0bb</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6bda91572806860fa512fff0f01a001b</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; T, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a92e902077bbcd4070f04162092c8fb1d</anchor>
      <arglist>(const Vector2&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac84d7ab7f222264a61b3894b2eefe883</anchor>
      <arglist>(const Vector2&lt; TYPE &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2b6887c8070394826911cddf7c29be82</anchor>
      <arglist>(const d2::Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Version</type>
      <name>GetVersion</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af43ad5413c876b34dcf8430c045986cc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetBuildDetails</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66e36c723d641ea2e8dad6e8653f6ffd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad58823f4cba966f2ddf371bf48656a74</anchor>
      <arglist>(Version lhs, Version rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afe456353b547ab70b3050be04644b974</anchor>
      <arglist>(Version lhs, Version rhs)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>MixFriction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a50d46e6e45df1f7049decee120ce9922</anchor>
      <arglist>(Real friction1, Real friction2)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>MixRestitution</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abdd2574637d4c8869ae345d3975829cc</anchor>
      <arglist>(Real restitution1, Real restitution2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5dd8c9bd6313579a5b5bc194b62847cc</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a73b7e8f86343cf046ccfe30c5b0920dd</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1c3ad5b08a3971eebd78d95866df2278</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a048a0945c99fc7012e010f1892d0d2f5</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac5a5f2b320e151ec9c0b63815685f7f4</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af78b58a8a5896dc5d9dfbe4cd83265eb</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetRegConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aacaf6573afe5f3fb0803faa353dc9c65</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetToiConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afdb8daa84d36ac948934ee05eb4cb242</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetDefaultPositionSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0c5bfe19319bd53279df8e97a75c1aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetDefaultToiPositionSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0ede85de958ca0b1409f86e95843b578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af48fe223cf379b5534ebf571d5f83164</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab177f652a925ae4e4a236a597dbe6d07</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a223329721a8138f316898ed9a4877250</anchor>
      <arglist>(const Filter filterA, const Filter filterB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7fa7929a7c9cfd63177dcf77c3116bf1</anchor>
      <arglist>(const FixtureProxy &amp;lhs, const FixtureProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a11952027f7e2cabb36d03c2677219a4a</anchor>
      <arglist>(const FixtureProxy &amp;lhs, const FixtureProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MovementConf</type>
      <name>GetMovementConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9f5227d01d6f7c75ac2399c3da7b5572</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMaxTranslationWithinTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a05d21c386ca6d39d5cc35cbad350a8c9</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxRegLinearCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a396f543b42eadf60ef9e730edc77912c</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RegStepStats &amp;</type>
      <name>Update</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9b942aee8449be45b89aea3b870ad76b</anchor>
      <arglist>(RegStepStats &amp;lhs, const IslandStats &amp;rhs) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidIndexPair</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abe17ec27918a584c8831da8cfdd6eb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidIndexPair3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a955adb3a886fdcb44924532c63fb8c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR std::size_t</type>
      <name>AllocatorBlockSizes</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2d9a2d6bbb6e2209e18702d0ac74b4f3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Pi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa8dcd3825d084229bf7118773002c5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareRootTwo</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a28cb7169814fcb6ea8712355f14b141d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Centi</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga7c839382b9503cfe43bd06e107a806cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Deci</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gae1d6e7c9295e5e7cfdacaa4febb24139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Kilo</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga0a001b98cd872f8fc63e2d31566af000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Mega</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga1a1a6b12afd793bd8c39969a0bb2872a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Giga</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga6b71d63054d20481d38c3611900fb48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Tera</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaff2c76d168969252f3f97a070280ec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Peta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaeb56a156700337bb4b68015af2f13b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Yotta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga56411037d9972d2a50d51dfd8e9f3f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxSimplexEdges</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abbe2fee565fa11a79349603c8135617e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxChildCount</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a50e1163e0feff1c68c1b7df518ed02b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxFloat</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2986572411d033ce6b8a33df82a237da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxManifoldPoints</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a35a66ab12515f64920e3e8ecc42ed9e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxShapeVertices</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4d84fa7aa09c071f5d8f75abd7685fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidVertex</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a820aae86aaa2dc8f311aadaee9772a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultLinearSlop</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a568fbd661a4685938f836be092d44927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMinVertexRadius</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4ac65522d29592fd0f5b2eafc15b0b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxVertexRadius</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2765972cd1e3f79c255665e6c2b89484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultAabbExtension</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac2858867fffd4f7f51d1de56b8489d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultDistanceMultiplier</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afdf220729199b5cd46d59801f87b4500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultAngularSlop</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abc565eee4ec57d8533f8b8256fffd389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxLinearCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aac8b97b4370e58775f1abe2d1437ef36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxAngularCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad2d67e2cb405b4b8194f40e73d2c418f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxTranslation</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad09456b1bbf35e4809f19fe5b8c4bde5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxRotation</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a68038766d54f9747ae64daf7b9ee5ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxToiIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9a9c270c891e006cead0bccd34b34932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxToiRootIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a11d30547ffe3d8558066c9ec79a7b6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxDistanceIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7d9d9054bfa791162bf4026334c0fe81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMaxSubSteps</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aaf0fc052d22dc199fa1f0684d6ab9460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultVelocityThreshold</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a94c6e09c15266f14deaf2ed162a8f225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultRegMinMomentum</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7f82fe11e161b9b9fabe63f173640a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultToiMinMomentum</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a79281b3ee717f5ade1fbd80b89af2df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxBodies</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a529cddcc302f05e841d0435c13ad3d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>InvalidContactIndex</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad341643867cf31914c5d7944fc10ae24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxContacts</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7221357729f66012bc69f05f971080cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MaxJoints</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abb6104815f148c8630e8f5649769772b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultStepTime</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae7509400cc4b50f2955db41a9bfba8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultStepFrequency</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa1f795108af5c1a6d7ae130682090955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultMinStillTimeToSleep</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4160ba82b3a7a09e82506ab1950bab42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultLinearSleepTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2c4f8e2fc39644a2f8d9cb04a667981a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultAngularSleepTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a52ce93117d18f6ce667d5968f8566c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DefaultCirclesRatio</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4ecccff942a43c1a9b58b4abb45a8e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Second</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga1f79d239836061a3770b2565e3ac6aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga404f488baa0aec3be5470c2ad0fbab0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Hertz</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga28835cec93243fdfdc7dfd6b748897b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Meter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga039507266050de7ca9bf46650d01b4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MeterPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga3117a15a55f2de2a644818c9763bfbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MeterPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64258443b898058acb500d7dfea6496e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Kilogram</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga43c75e28cac1383ca11aa451c3cdf6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga792f8d6a2eee322ba078add7973269d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>CubicMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga6cfa4f3cdb6b8204ddfec254ba710e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>KilogramPerSquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gae092bb04a4177b10d5cb78e3c04dd32d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Radian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga3fac05ddd105ca78084a80980522f335</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Degree</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7959b7bdc0a05e0e941c5b8113943815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareRadian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga996993e261ccad01eaa44912815b5abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>RadianPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gac4dab714461907cd0799b009f9bd4b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DegreePerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaf68266347e2f5a4b7bc34fe204586d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>RadianPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga43cebf5299254ff0938517f6e441506f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DegreePerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga736a26fdbc90821f50f471bfff5109df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Newton</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0d8d974c67aaae9881a8f432b865b15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>NewtonMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga9b045c5c2d080dcff4bd1bb7085903c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>NewtonSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7a6d64e6bec68fe9e063a08f530a6763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>NewtonMeterSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga4f806270648ade122f45580dea2130b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>RevolutionsPerMinute</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga5a7fa98fcb12786039f6edef405cc48a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>EarthlyLinearAcceleration</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>gabf0c6abc7c1d4718b4c2e21b2a866780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>BigG</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga561c9c679c7d47c671ccfb8fbe13375f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho::d2</name>
    <filename>namespaceplayrho_1_1d2.html</filename>
    <class kind="struct">playrho::d2::Acceleration</class>
    <class kind="struct">playrho::d2::BaseShapeConf</class>
    <class kind="class">playrho::d2::Body</class>
    <class kind="class">playrho::d2::BodyAtty</class>
    <class kind="struct">playrho::d2::BodyConf</class>
    <class kind="class">playrho::d2::BodyConstraint</class>
    <class kind="class">playrho::d2::ChainShapeConf</class>
    <class kind="struct">playrho::d2::ClipVertex</class>
    <class kind="class">playrho::d2::ConstJointVisitor</class>
    <class kind="class">playrho::d2::Contact</class>
    <class kind="class">playrho::d2::ContactAtty</class>
    <class kind="class">playrho::d2::ContactImpulsesList</class>
    <class kind="class">playrho::d2::ContactListener</class>
    <class kind="class">playrho::d2::ConvexHull</class>
    <class kind="class">playrho::d2::DestructionListener</class>
    <class kind="struct">playrho::d2::DiskShapeConf</class>
    <class kind="struct">playrho::d2::DistanceConf</class>
    <class kind="class">playrho::d2::DistanceJoint</class>
    <class kind="struct">playrho::d2::DistanceJointConf</class>
    <class kind="struct">playrho::d2::DistanceOutput</class>
    <class kind="class">playrho::d2::DistanceProxy</class>
    <class kind="class">playrho::d2::DynamicTree</class>
    <class kind="class">playrho::d2::EdgeShapeConf</class>
    <class kind="class">playrho::d2::Fixture</class>
    <class kind="class">playrho::d2::FixtureAtty</class>
    <class kind="struct">playrho::d2::FixtureConf</class>
    <class kind="class">playrho::d2::FrictionJoint</class>
    <class kind="struct">playrho::d2::FrictionJointConf</class>
    <class kind="class">playrho::d2::FunctionalJointVisitor</class>
    <class kind="class">playrho::d2::GearJoint</class>
    <class kind="struct">playrho::d2::GearJointConf</class>
    <class kind="struct">playrho::d2::Island</class>
    <class kind="class">playrho::d2::Joint</class>
    <class kind="class">playrho::d2::JointAtty</class>
    <class kind="struct">playrho::d2::JointBuilder</class>
    <class kind="struct">playrho::d2::JointConf</class>
    <class kind="class">playrho::d2::JointKey</class>
    <class kind="class">playrho::d2::JointVisitor</class>
    <class kind="class">playrho::d2::Manifold</class>
    <class kind="class">playrho::d2::MotorJoint</class>
    <class kind="struct">playrho::d2::MotorJointConf</class>
    <class kind="struct">playrho::d2::MultiShapeConf</class>
    <class kind="class">playrho::d2::PolygonShapeConf</class>
    <class kind="struct">playrho::d2::Position</class>
    <class kind="class">playrho::d2::PositionConstraint</class>
    <class kind="struct">playrho::d2::PositionSolution</class>
    <class kind="struct">playrho::d2::PositionSolverManifold</class>
    <class kind="class">playrho::d2::PrismaticJoint</class>
    <class kind="struct">playrho::d2::PrismaticJointConf</class>
    <class kind="class">playrho::d2::PulleyJoint</class>
    <class kind="struct">playrho::d2::PulleyJointConf</class>
    <class kind="struct">playrho::d2::RayCastHit</class>
    <class kind="class">playrho::d2::RevoluteJoint</class>
    <class kind="struct">playrho::d2::RevoluteJointConf</class>
    <class kind="class">playrho::d2::RopeJoint</class>
    <class kind="struct">playrho::d2::RopeJointConf</class>
    <class kind="struct">playrho::d2::SeparationScenario</class>
    <class kind="class">playrho::d2::Shape</class>
    <class kind="struct">playrho::d2::ShapeBuilder</class>
    <class kind="struct">playrho::d2::ShapeConf</class>
    <class kind="class">playrho::d2::Simplex</class>
    <class kind="class">playrho::d2::SimplexEdge</class>
    <class kind="class">playrho::d2::Sweep</class>
    <class kind="class">playrho::d2::TargetJoint</class>
    <class kind="struct">playrho::d2::TargetJointConf</class>
    <class kind="struct">playrho::d2::Transformation</class>
    <class kind="class">playrho::d2::TypeJointVisitor</class>
    <class kind="class">playrho::d2::UnitVec</class>
    <class kind="struct">playrho::d2::Velocity</class>
    <class kind="class">playrho::d2::VelocityConstraint</class>
    <class kind="class">playrho::d2::VertexSet</class>
    <class kind="class">playrho::d2::WeldJoint</class>
    <class kind="struct">playrho::d2::WeldJointConf</class>
    <class kind="class">playrho::d2::WheelJoint</class>
    <class kind="struct">playrho::d2::WheelJointConf</class>
    <class kind="class">playrho::d2::World</class>
    <class kind="class">playrho::d2::WorldAtty</class>
    <class kind="struct">playrho::d2::WorldConf</class>
    <class kind="class">playrho::d2::WorldManifold</class>
    <member kind="typedef">
      <type>detail::AABB&lt; 2 &gt;</type>
      <name>AABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a03a4588e961b6a369745c9c5b68b9868</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; ClipVertex, MaxManifoldPoints &gt;</type>
      <name>ClipList</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab02c685f9b6933b73418fb3223e2e433</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; DynamicTreeOpcode(DynamicTree::Size)&gt;</type>
      <name>DynamicTreeSizeCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50dec3f5f2b2d5add65db48633593967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(Fixture *fixture, ChildCounter child)&gt;</type>
      <name>QueryFixtureCallback</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a460d74691acde93bae75b80d51cbde68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::LengthIndices&lt; 2 &gt;</type>
      <name>LengthIndices</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9c0b82fe1a1d0add572e3829a4c9f61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::SeparationInfo&lt; 2 &gt;</type>
      <name>SeparationInfo</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af40ce5c2de24f7a8612c7d00a487724e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::MassData&lt; 2 &gt;</type>
      <name>MassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a412a6773b79a31e621b01c04c3d2645e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>playrho::detail::RayCastInput&lt; 2 &gt;</type>
      <name>RayCastInput</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf053dc4cae3fabb24f6e3c8b8697ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Optional&lt; RayCastHit &gt;</type>
      <name>RayCastOutput</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e8717982c2c73b571dfe16d45a38ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Real(Fixture *fixture, ChildCounter child, const RayCastInput &amp;input)&gt;</type>
      <name>DynamicTreeRayCastCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d0ca374db33a2f69d7d6203738a628f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; RayCastOpcode(Fixture *fixture, ChildCounter child, Length2 point, UnitVec normal)&gt;</type>
      <name>FixtureRayCastCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af1eddb1954fc3176fbed9279d90ac4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const std::type_info &amp;ti, const void *data)&gt;</type>
      <name>TypeInfoVisitor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94f51c74b2c4c62a80ecb70414ac71f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; SimplexEdge, MaxSimplexEdges, std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type &gt;</type>
      <name>SimplexEdges</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a364eb782cd9cf5659e0a8bfcd63faa63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Velocity, Velocity &gt;</type>
      <name>VelocityPair</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa577189e0996ba8d7897fa12b80726c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Contact *</type>
      <name>ContactPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a61cf9e6007e1705c873d64fe34ce43db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ContactKey, Contact * &gt;</type>
      <name>KeyedContactPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8eae02222196560a76ed5cfdeb967760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BodyConstraint *</type>
      <name>BodyConstraintPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50e80db928f35a37c5b1aee4ec1979d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const Body *, BodyConstraintPtr &gt;</type>
      <name>BodyConstraintPair</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14769e91979b69b60ba8736e0199707c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; const Body *, BodyConstraint * &gt;</type>
      <name>BodyConstraintsMap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1b9d3ad35dbb5bc7c6be00a55c88e220</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Body *</type>
      <name>BodyPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab744691d00ccc49ae8c4c6e54e826eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const Body *const, BodyConstraint * &gt;</type>
      <name>BodyConstraintsPair</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7e60d08c428f194dbc76152a4617d9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; BodyConstraint &gt;</type>
      <name>BodyConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a58893cfe2113f284d5b33f56ab16b9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PositionConstraint &gt;</type>
      <name>PositionConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5b277cfe94a59545766adb762e7c10d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; VelocityConstraint &gt;</type>
      <name>VelocityConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a675cd1218b4df675b34193bd55a6fd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DynamicTreeOpcode</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c475376564975c7ff4c357e88bdf16</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a04c475376564975c7ff4c357e88bdf16a87557f11575c0ad78e4e28abedc13b6e">End</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a04c475376564975c7ff4c357e88bdf16aa0bfb8e59e6c13fc8d990781f77694fe">Continue</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>JointType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a821ab41a0261229ecaa65eb297ebb5c7</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a358561ac4d41f41d479b7c54b19b639e">Revolute</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a35fa8acd1b8b1beb23e6c2e24313570c">Prismatic</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a0aa6f4210bf373c95eda00232e93cd98">Distance</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7aba41903d01ed39b1b98768512c8e65f5">Pulley</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7ac41a31890959544c6523af684561abe5">Target</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7afb845762a66c26782f477febab5344dc">Gear</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7aa5df60ef4fc4447353769d66661d2229">Wheel</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a768bf199aed2d6ea5cd5d27017978530">Weld</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7a6513892a7d1f1a327b2d4de2b8f69b89">Friction</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7aa3a77296cc85eb0c3175a09c0f7c3e60">Rope</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a821ab41a0261229ecaa65eb297ebb5c7ab33538179f5661a86cbe327a1793e199">Motor</enumvalue>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44cc65808fd89570707b3af1bc87eb36</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa67cf0c4b074e5c10a793cb2f16a0860</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xfm0, const Transformation &amp;xfm1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74afc15ef58efc35461a1580887e5363</anchor>
      <arglist>(const Shape &amp;shape, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a197397d1fa4c56a0498efea2026dba7f</anchor>
      <arglist>(const Fixture &amp;fixture) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c86a617058eada4a474b501f0844b76</anchor>
      <arglist>(const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab511a5fe02bf36ca289ea10e7a8fbb07</anchor>
      <arglist>(const Fixture &amp;fA, ChildCounter iA, const Fixture &amp;fB, ChildCounter iB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acb0615b385c30fd7ca0b7b562f5ba8bf</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>add2ef460cb524b34a3ad4feea71dc41f</anchor>
      <arglist>(const playrho::detail::RayCastInput&lt; 2 &gt; &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>GetPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4f671c547cf8f5deecfa5bbf08899f14</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PointStates</type>
      <name>GetPointStates</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae48de2e5ef109c667912e5db7b170d94</anchor>
      <arglist>(const Manifold &amp;manifold1, const Manifold &amp;manifold2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ClipList</type>
      <name>ClipSegmentToLine</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a073a93c54a20aa68f2c56e759b7976ab</anchor>
      <arglist>(const ClipList &amp;vIn, const UnitVec &amp;normal, Length offset, ContactFeature::Index indexA)</arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39c11c9e373870e29e2f5cf69f817b5e</anchor>
      <arglist>(const ToiConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PairLength2</type>
      <name>GetWitnessPoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af23dfb97190555d582956bfe1b7624fb</anchor>
      <arglist>(const Simplex &amp;simplex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceOutput</type>
      <name>Distance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad01443fd4ea346d550ece90f7f92b1f4</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;transformA, const DistanceProxy &amp;proxyB, const Transformation &amp;transformB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad5a1ff6589dc30ed3f9f7ee881f17bb2</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>GetDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b44a6a5336bc2b25cd92fdc5e344b4e</anchor>
      <arglist>(PairLength2 arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1311c8979a6d955fa240491cbf239e99</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>FindLowestRightMostVertex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a76c0389e1d7343fb8ad93543d3138f</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetConvexHullAsVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1538594ce2f0d86da70bf832c0327bb</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gac9da7b3dd9e1dc5532a0f3c47f31f22e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1c65d94d98dea8f68c3dd32e90b888bb</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8d29a87b8865a1e42c35360ddc2bb6bf</anchor>
      <arglist>(const DistanceProxy &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSupportIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6cfc27f1644f9c4d6da229b5eba07e51</anchor>
      <arglist>(const DistanceProxy &amp;proxy, T dir) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69bff32e0251d31f1ab3613f2f8f4459</anchor>
      <arglist>(DynamicTree &amp;lhs, DynamicTree &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a52ca8acb99e3c3591d13ca912282470e</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, const DynamicTreeSizeCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a387361206b47016fdadec182c37852a1</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, QueryFixtureCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>ComputeTotalPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaab37fd533a1ec17e12c6798e42a21b3</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ComputePerimeterRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7daf9650f36f8d172678d1398034a516</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0e796616b3e92f4b7b34ffdc73e4942</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetMaxImbalance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2389e08997d0d0e0ba03697eec17936</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateStructure</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ababba0a1b926e9aa793afe44044f204b</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateMetrics</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22c9cd17bd9080414ab77b1d3e433dca</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab63957a6534ce7385503337c9a9119c6</anchor>
      <arglist>(const DynamicTree::LeafData &amp;lhs, const DynamicTree::LeafData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22c2b474f92927440fb4845ca9a77e75</anchor>
      <arglist>(const DynamicTree::LeafData &amp;lhs, const DynamicTree::LeafData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsUnused</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeb5fd948fe808b19f94cd6c80089db9d</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsLeaf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acdc646a20341e7dd6d2b2f08911c1dbd</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsBranch</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5bc0102a3df9a20fe75e220cca59fe12</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DynamicTree::BranchData</type>
      <name>ReplaceChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70c30461d2a4011f3a4c6f5168df2751</anchor>
      <arglist>(DynamicTree::BranchData bd, DynamicTree::Size oldChild, DynamicTree::Size newChild)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6d6d5df41347623cf1a1a969986ce093</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR DynamicTree::Size</type>
      <name>GetNext</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a46ae39294a9b35c7c9a3f3f44fccb451</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72265a3c2d4511e74df6ab4d13112f6d</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adebb4dfdc038631f8b24ee19a0b29713</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a905424c61ac9933179b91eb12ac0d537</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size leafIdA, DynamicTree::Size leafIdB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9130244ba8964592f654cf473e4979ed</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f207924edd9511c1d56c03933928fa8</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a01cc67c9aa01c505ed34fe9cdf0f6242</anchor>
      <arglist>(bool flipped, const DistanceProxy &amp;shape0, const Transformation &amp;xf0, const VertexCounter idx0, const DistanceProxy &amp;shape1, const Transformation &amp;xf1, const VertexCounter2 indices1, const Manifold::Conf conf)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abea23b69385cc004b20710a775130a98</anchor>
      <arglist>(bool flipped, Length totalRadius, const DistanceProxy &amp;shape, const Transformation &amp;sxf, Length2 point, const Transformation &amp;xfm)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4f5f297912760f73d6135f46ba2c355</anchor>
      <arglist>(Length2 locationA, const Transformation &amp;xfA, Length2 locationB, const Transformation &amp;xfB, Length totalRadius) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>CollideShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a05380ac6609b4f7b27e4c1ae9e9e7535</anchor>
      <arglist>(const DistanceProxy &amp;shapeA, const Transformation &amp;xfA, const DistanceProxy &amp;shapeB, const Transformation &amp;xfB, Manifold::Conf conf=GetDefaultManifoldConf())</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe0be704277b108db26e28108c610174</anchor>
      <arglist>(Manifold::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a30d3152820c6a35af37c2139d316d1da</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72a1cdedaec111016d79f96aa4970cef</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18bbc8e12d21c4ae260d0bb333e0eed5</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7261adb2e0ccb0b3db58fc194d50614</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Manifold::Conf</type>
      <name>GetDefaultManifoldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f8ea55e1366f819b3683f0896bcce37</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9b3b93dcaddc83a77e35b87b54960d5e</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, Length2 location)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4dab8e154250f9c2698059b6d28f75eb</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, Length2 v0, Length2 v1)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7304da106cfaa394b4d0179ded468aa6</anchor>
      <arglist>(Length vertexRadius, NonNegative&lt; AreaDensity &gt; density, Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adfdaf5afb737a4eb88daa57a82819c0c</anchor>
      <arglist>(const Fixture &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e9574d95e6dfa6f32a405cf40ebbf79</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcf7fe1ea0d3ef041d4f7847ef5871e4</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gad7a1b955a57a2bb043750bf32cde2549</anchor>
      <arglist>(Length radius, Length2 location, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga4ad7d3ebcceb46993d721c836ba13ae2</anchor>
      <arglist>(const detail::AABB&lt; 2 &gt; &amp;aabb, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gadf0ec62e1852e3bc9b017eae4a5616b4</anchor>
      <arglist>(const DynamicTree &amp;tree, RayCastInput input, const DynamicTreeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga9616b36d2baba2023d1a5fcf10a5126a</anchor>
      <arglist>(const DynamicTree &amp;tree, const RayCastInput &amp;input, FixtureRayCastCB callback)</arglist>
    </member>
    <member kind="function">
      <type>SeparationScenario</type>
      <name>GetSeparationScenario</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ae59f7bcf03f75dd6aa405683e455b9</anchor>
      <arglist>(IndexPair3 indices, const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>LengthIndexPair</type>
      <name>FindMinSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aecc08eba57f4b6facb11ebf84d1403b4</anchor>
      <arglist>(const SeparationScenario &amp;scenario, const Transformation &amp;xfA, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>Evaluate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf52c893075c61a92f299f872b0d3c9e</anchor>
      <arglist>(const SeparationScenario &amp;scenario, const Transformation &amp;xfA, const Transformation &amp;xfB, IndexPair indexPair)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3eb20e81c294774bd8f9fd0ccc136943</anchor>
      <arglist>(Length2 dimensions)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab25320e8b45be5e1730e39c9fc26a103</anchor>
      <arglist>(const AABB &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afeeb64f8bbd439af0e350288e16da2e7</anchor>
      <arglist>(const ChainShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8cdbec96d1a3f30b8c5705b602aeb8df</anchor>
      <arglist>(const ChainShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abbe831388c11e3234692938bb354fe9f</anchor>
      <arglist>(const ChainShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLooped</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a435d2dc5439f69826450d3bac84b35c5</anchor>
      <arglist>(const ChainShapeConf &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetNextIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7d699f052c62efd80ce28f0190d70af</anchor>
      <arglist>(const ChainShapeConf &amp;shape, ChildCounter index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac418033043025956949e012aaf112b86</anchor>
      <arglist>(const ChainShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeeb7245d0354a4222600d611f3ddb16d</anchor>
      <arglist>(const ChainShapeConf &amp;arg, ChildCounter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad440be3d207e29e72aaa75b72054c610</anchor>
      <arglist>(ChainShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade70545e6c2bf848f87657114a111d11</anchor>
      <arglist>(Length dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a85d3074f854445b9ec458b0d6ba6aa80</anchor>
      <arglist>(const DiskShapeConf &amp;lhs, const DiskShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae54dffb8788232936ee10689ab0296cd</anchor>
      <arglist>(const DiskShapeConf &amp;lhs, const DiskShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f8a364d3d371905369c9053117c7680</anchor>
      <arglist>(const DiskShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2edb0ada2177d0b9f078f49069f4810</anchor>
      <arglist>(const DiskShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a271f378396e3bf82dd4d75503bb2644d</anchor>
      <arglist>(const DiskShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69ae06167b3a8f92cb4b23c559785dd2</anchor>
      <arglist>(const DiskShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93562fbd5d63e2fbcf34b87065834c6a</anchor>
      <arglist>(const DiskShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab84a4599861cbdaa32fcf6b7fed6f156</anchor>
      <arglist>(DiskShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af86100a70f9250d51c3c76a103edb8e4</anchor>
      <arglist>(const EdgeShapeConf &amp;lhs, const EdgeShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6db183fd84981136da63e62d3a767d9c</anchor>
      <arglist>(const EdgeShapeConf &amp;lhs, const EdgeShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae17b7ca2cd405050d057105e6fd1f78a</anchor>
      <arglist>(const EdgeShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a65056ce7e0d413a4beeb818ad0ab9f4b</anchor>
      <arglist>(const EdgeShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a179e4a68b183074106cc54a88b46a68f</anchor>
      <arglist>(const EdgeShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c3bbe42dd7c5fd9e5c758ed67ddab2</anchor>
      <arglist>(const EdgeShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a075e981c13e3f9a9eb9648a701263e62</anchor>
      <arglist>(const EdgeShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a45cb9635e70a5139b52d7def2ec4eeed</anchor>
      <arglist>(EdgeShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8de782378ec5fefb3f1087a76a7721eb</anchor>
      <arglist>(const MultiShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada69d48759a92fa8273e98b7e0bb69c5</anchor>
      <arglist>(const MultiShapeConf &amp;lhs, const MultiShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abad1906bf9f008e1519d6e2ce95c792b</anchor>
      <arglist>(const MultiShapeConf &amp;lhs, const MultiShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6da28327ee2857e706b89789d56a3598</anchor>
      <arglist>(const MultiShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20acfdc5ce307d90cfef42908be8720b</anchor>
      <arglist>(const MultiShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a520079de7cf100a20a169fc57b77b5c0</anchor>
      <arglist>(const MultiShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74a1971e9d0c04da5f9cb9645a872b07</anchor>
      <arglist>(MultiShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetEdge</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a066828295fc1238756f5adf1f3502343</anchor>
      <arglist>(const PolygonShapeConf &amp;shape, VertexCounter index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Validate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>addc5596ccd04947074f583cc62146991</anchor>
      <arglist>(const Span&lt; const Length2 &gt; verts)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac3029e0bbd22a713fa59524059dc6927</anchor>
      <arglist>(const PolygonShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8724a7f055248bd5f3ba5103fdcc6901</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d3ad2448351d19b6acd69d6c46b05ae</anchor>
      <arglist>(const PolygonShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9bfa558aa89b2c7c747545ac4d5fb44</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5971604948898d23c918c7430bf9da3e</anchor>
      <arglist>(const PolygonShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8bc20d0b7d315340914bfde7f538bdcc</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gafcfbf811dc989043838f0a4c7c64b59b</anchor>
      <arglist>(const Shape &amp;shape, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a84eab47d880f50ed7b191c2bce198d00</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3e0b1a42f4c103d313a46942536b2ba</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8fb5dbe67d6d7ab8ee34e98e114d1df5</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9280854f98c5d8557ca57847171de630</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73fdd9b13d08d04db4ad170afac115b7</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e3ed738b9082f9bfd3358a19d9aa97d</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b940ecf05bfbf8ae3910cacbc7e2264</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae30c4c3496122b9bc6087d44d1db9ec5</anchor>
      <arglist>(Shape &amp;shape, const Mat22 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Visit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4d85fab1bbce63d5fc4832a9c89aed5a</anchor>
      <arglist>(const Shape &amp;shape, void *userData)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d716987feab31bac7d07bb19cb89599</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>GetUseTypeInfo</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e33be916868982aea9162c3b9b50523</anchor>
      <arglist>(const Shape &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a493e74d1d0e4f235df61dbf9f7d7849d</anchor>
      <arglist>(const Shape &amp;shape, const TypeInfoVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a511146553469b7cac8c01113002718e6</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a531eec1b236203c64a6618a44c94eb59</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1964839d80d44970853856fca0060c33</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Finite&lt; Real &gt;</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4f578ed3fad33fd6d2f740a79f5ccb9</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR NonNegative&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8e2d2b3123156246d44cc9e8db5c9411</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation4x4</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaceaa2cf5095365ef74c07ccdb0c78ae</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60080a2f269e3c48461f3a9ec0883a3b</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3486ba5050c32c4a72fbaf0bcf6a17de</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2, Length stop)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a34f0c915ede8384f426009fe246d2db4</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const DistanceProxy &amp;proxy2, Length stop=MaxFloat *Meter)</arglist>
    </member>
    <member kind="function">
      <type>IndexPair3</type>
      <name>GetIndexPairs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70613779e152f647af4f80dce352d83c</anchor>
      <arglist>(const SimplexEdges &amp;collection) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>CalcSearchDirection</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8eafa8c052954d863e81d00251d51194</anchor>
      <arglist>(const SimplexEdges &amp;simplexEdges) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetScaledDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9695b1513472b0c245d4f98b97090efd</anchor>
      <arglist>(const Simplex &amp;simplex, Simplex::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>GetClosestPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09c16d449aa487690b1297e368b68063</anchor>
      <arglist>(const Simplex &amp;simplex)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>GetPointDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04cd12978acc8f96dd60b6139ab7cc36</anchor>
      <arglist>(const SimplexEdge &amp;sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaa6c8aa8b0eebcb08f9b6205686b4229</anchor>
      <arglist>(const SimplexEdge &amp;lhs, const SimplexEdge &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a80618c35cf8fe887f8bbaba841da4c93</anchor>
      <arglist>(const SimplexEdge &amp;lhs, const SimplexEdge &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOIOutput</type>
      <name>GetToiViaSat</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad3851d0c3b764c9fe4dbaad8268ea201</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Sweep &amp;sweepA, const DistanceProxy &amp;proxyB, const Sweep &amp;sweepB, ToiConf conf=GetDefaultToiConf())</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54c453e054f0b9692dc3300e5861f42c</anchor>
      <arglist>(const Manifold &amp;manifold, Transformation xfA, Length radiusA, Transformation xfB, Length radiusB)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a160a129552c387fc8462398d95b5d39b</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab580741d7e177657016617999174a607</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7cbfc9f4cf79c8462a0f0ec5d24ee469</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab39ce1afbec15c12a32b4ab3c5f95685</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa071c183885a1e8082e73eaa1ec522c8</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04fa1505a85f9ff5e51889c8c50d3172</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a951dfdd3b5b6bb8e4bfd734f7b79fd29</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef44fe8198db0e5fe1e1780a028b998f</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aabbaa5056b3fec727549265878b31eca</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd4693f700ab51ed9d9a6de06a805bf7</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae551c31cd14b89323453a7f04ffa53ab</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1228567dca4d7060046130510e068348</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae0ffb2e2d00a5bca13ac9acaf15682c8</anchor>
      <arglist>(const Real lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Acceleration</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a16ff5a957beb5aec86d2c8a668fe5279</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3e54c1c3ec6046814745a707a6ab5c20</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adaf7c703a4ec7a32807da277c8b57a63</anchor>
      <arglist>(const Body &amp;body, std::size_t bodyIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2bb179bdc12683c99a6bfd7b095c328</anchor>
      <arglist>(const Joint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af26a4091d87146921b05bfdd000f09de</anchor>
      <arglist>(const Fixture &amp;fixture, std::size_t bodyIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20b11754781d03cb9a8a122b96c2eb54</anchor>
      <arglist>(const DistanceJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c33c55ebcbf54516ed4861c75d7c9a6</anchor>
      <arglist>(const FrictionJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a67352f3e83eb5c8978348961a9326b5e</anchor>
      <arglist>(const GearJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72b4f700f17d037094e2bef483375cec</anchor>
      <arglist>(const MotorJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4598eafe60ddf9a79d0cd616acae0b0a</anchor>
      <arglist>(const TargetJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0cf1d5ef527392e85f1253dfd65968a1</anchor>
      <arglist>(const PrismaticJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a251fc2dba7e1a090937369a4b3ecda6b</anchor>
      <arglist>(const PulleyJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70f4a8721a9e7f093cf33ac15ed6045a</anchor>
      <arglist>(const RevoluteJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af892db39d9d9f7a9acf209130864ce2e</anchor>
      <arglist>(const RopeJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a101a48f52d70950a7753814db63dde52</anchor>
      <arglist>(const WeldJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dump</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4579a9219fdf6e1adc2fcc35483db83e</anchor>
      <arglist>(const WheelJoint &amp;joint, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetContactRelVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ec0d91d72476f3b381c5a3aee92ec21</anchor>
      <arglist>(const Velocity velA, const Length2 relA, const Velocity velB, const Length2 relB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0846d15948227e392cacde27c1ac53f4</anchor>
      <arglist>(const UnitVec value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade290c2d810216ce9b13924b10e748cd</anchor>
      <arglist>(const UnitVec value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a16d85dd548af55daa2d524621aa4d8e8</anchor>
      <arglist>(BoundedValue&lt; T, lo, hi &gt; s, UnitVec u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac2a0980dcd253c27078c6f3c4832b238</anchor>
      <arglist>(const T s, const UnitVec u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b8998ebdaa059a95c36666bb04ab691</anchor>
      <arglist>(UnitVec u, BoundedValue&lt; T, lo, hi &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a415163cc5a5f7a94f3aa13eb42321e43</anchor>
      <arglist>(const UnitVec u, const T s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6bb69c418848650de0ba031cddc9b9af</anchor>
      <arglist>(const UnitVec u, const UnitVec::value_type s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a36015211e47cb33a623c80bf6ebb63a2</anchor>
      <arglist>(const Vector2&lt; T &gt; vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>InverseRotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf42cb44ccb30747c95cc35bc4779e24</anchor>
      <arglist>(const Vector2&lt; T &gt; vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetUnitVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8286b06c48b4fc12a5addb7cc3528b07</anchor>
      <arglist>(Vector2&lt; T &gt; value, UnitVec fallback=UnitVec::GetDefaultFallback())</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetNormalized</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5955bf7b1c0cdfa36d11adea236d9af4</anchor>
      <arglist>(const Position &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Sweep</type>
      <name>GetNormalized</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09b21383c1a73afea37f11e0ba906a76</anchor>
      <arglist>(Sweep sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac92cb8cde6b741c31262c4218cccf775</anchor>
      <arglist>(const Length2 v, const Transformation xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length2</type>
      <name>InverseTransform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4b973c8b02dc4f7ed0bb86486fbfda2a</anchor>
      <arglist>(const Length2 v, const Transformation T) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Transformation</type>
      <name>Mul</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1ed2b21beb0ea976884212d8e1560305</anchor>
      <arglist>(const Transformation &amp;A, const Transformation &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Transformation</type>
      <name>MulT</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a31ba599a09a590cdde545cb29b6ecf1a</anchor>
      <arglist>(const Transformation &amp;A, const Transformation &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a41583becf8482b534e9ce54ecd5601f7</anchor>
      <arglist>(const Length2 ctr, const UnitVec rot, const Length2 localCtr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfafb2a85ece528e8bf2a7a46a9c1612</anchor>
      <arglist>(const Position pos, const Length2 local_ctr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42dd24b646d220e52b8cb79f0d8cd50d</anchor>
      <arglist>(const Sweep &amp;sweep, const Real beta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransform0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8128f59808ffb8ab56cc4d9528422b16</anchor>
      <arglist>(const Sweep &amp;sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransform1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3047f53ab4e594f414832db427f03d6c</anchor>
      <arglist>(const Sweep &amp;sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUnderActive</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9be9a0a2f7a01c1e06d84cd092778883</anchor>
      <arglist>(Velocity velocity, LinearVelocity linSleepTol, AngularVelocity angSleepTol) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetReflectionMatrix</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afdd35f5855b7cfb23f0d0c138bec5dec</anchor>
      <arglist>(UnitVec axis)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b325984ddf275be8575ac041401cdc2</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8db523eb206a1723feb68fc11183edd7</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a801c517fa59ec5a2c9027662c6f4cd97</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae02afd1c287e2db64fa85a1b6542c075</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a807afcdc1b971f4688ec64bc0643c3f8</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14cd1db8f0ef39b121f8f4f704561277</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab64d27801b571b2ed1c331d983868fa0</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d9083b02a7ce6a77e29b85e091640e5</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5bb3ce07d3b52604efbc70170da9c80a</anchor>
      <arglist>(const Position &amp;pos, const Real scalar)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afbd759adf86eff9713875869bef74e16</anchor>
      <arglist>(const Real scalar, const Position &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa791f769d7311d093e53b09c772b78d6</anchor>
      <arglist>(const Position pos0, const Position pos1, const Real beta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a65127c4ea5f121fb8f4b3f721c70db36</anchor>
      <arglist>(Transformation lhs, Transformation rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aebe25ab06d4a4b58d0867f177a3bb1fd</anchor>
      <arglist>(Transformation lhs, Transformation rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetXAxis</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab14c4fee230025f384ea44d09aebe440</anchor>
      <arglist>(UnitVec rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetYAxis</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0a6aa52e1520c096abd176500e941617</anchor>
      <arglist>(UnitVec rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a99044b280368970c02b9996ee9b622a1</anchor>
      <arglist>(const UnitVec a, const UnitVec b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa540d718a0183a6a9ad0c22db2e6e7fb</anchor>
      <arglist>(const UnitVec a, const UnitVec b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad985bbe66d8b334c65c9eb53e36fae7d</anchor>
      <arglist>(const UnitVec vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aed9bb70a182d7676d4c438b70bb4a5de</anchor>
      <arglist>(const UnitVec vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afcdb159b4b79e5a03bedfc1a0727cf0b</anchor>
      <arglist>(const UnitVec vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec</type>
      <name>InverseRotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f8fb4b2327abd0f81665f92e4b4b31c</anchor>
      <arglist>(const UnitVec vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec::value_type</type>
      <name>get</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7505645d8a4e2867d5607d3f3c62edc</anchor>
      <arglist>(UnitVec v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec::value_type</type>
      <name>get&lt; 0 &gt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a604924520b0b1f689dfc71b75016761b</anchor>
      <arglist>(UnitVec v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR UnitVec::value_type</type>
      <name>get&lt; 1 &gt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a480ee53be45631be78a9488771d80a</anchor>
      <arglist>(UnitVec v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4f49bd881fdc6418565529a072b91d54</anchor>
      <arglist>(::std::ostream &amp;os, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>VelocityPair</type>
      <name>CalcWarmStartVelocityDeltas</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab3163942ed703060f3d647328b5e3770</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a775953540833d76c2205486ad443cb44</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac9bd82a296e14a104151eaf3e50d9f47</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6aef7d1594aae1d3edc933a3e782befa</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3458e1e85991d046c4586127dd700bbb</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a969296fe70c0ac8d3703c846c0ae4667</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22fe8af2d6028a31014bb60831affba6</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6179f48102468fef9300775dee41faa</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaa5eb5657f6e6906c30ad390ac9ad6aa</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a99243f7ae90f65f0ddfb78388f8f89df</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae06a249d054aba4bd9ade03b953275af</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2f146d1eadc3fc3f4b8e9dfc6eb465b5</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afacd998761adab744f3eff9f21fb6698</anchor>
      <arglist>(const Real lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Velocity</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a63936f67053cf2f9c89a9944fd66986f</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ec1591eb8ee2f1951d9e8d8e51494f9</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c6a1ec2274053b6d4cdece776faaad4</anchor>
      <arglist>(const Body *body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab873f18f1e540da43881e7f2dadeb7b1</anchor>
      <arglist>(const Body &amp;body, Time h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>Cap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d42f6f1b9cc7b4c13cb4a9b7f656f8e</anchor>
      <arglist>(Velocity velocity, Time h, MovementConf conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetFixtureCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b995406bae81c78866c12b59432a931</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af35644c450c12c8dcbd6cf1a0aa7b75c</anchor>
      <arglist>(Body &amp;body, Angle amount, Length2 worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad233f2c24d1fa985bd80eaa0050d659e</anchor>
      <arglist>(Body &amp;body, Angle amount, Length2 localPoint)</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetCentripetalForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6970aff5f3ad80147b55f36902039b4e</anchor>
      <arglist>(const Body &amp;body, Length2 axis)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>CalcGravitationalAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a532a2a6530a34432d28f6089193b2260</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acafaac4ef15f7416f464dff9b19780fa</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a438e172db303ae0ab53263bc6af419ad</anchor>
      <arglist>(Body &amp;body, Acceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4834708af29bcc9ae39ebfc2b9f580f6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unawaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdfbff06306e4ecb71f6d4b2136eea7c</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a77de45b3fab735d0f87a0978a622a9c0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c355eb58981b97e5901fa7d04052507</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20ea58563885aec5eeab46943e526f6a</anchor>
      <arglist>(Body &amp;body, LinearAcceleration2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9897119656ab5cb35c4babd0a4f9b3a5</anchor>
      <arglist>(Body &amp;body, AngularAcceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7e2df131b907494df3b33f2ca8751529</anchor>
      <arglist>(Body &amp;body, LinearAcceleration2 amount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a2c515bee211ab828b8d36ba80dc149</anchor>
      <arglist>(Body &amp;body, Force2 force, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b21a34b270ecd1ad966a293ba681bc5</anchor>
      <arglist>(Body &amp;body, Force2 force, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForceToCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a88d1ffd34c57bb9737f51f0dc918ea0d</anchor>
      <arglist>(Body &amp;body, Force2 force) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0c8061050b56df681bde8a6bf28aefa2</anchor>
      <arglist>(Body &amp;body, Torque torque) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f848e079efd1b4e7d7a926cdb146d0b</anchor>
      <arglist>(Body &amp;body, Torque torque) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07f50b8133debf454d50f491d196dc24</anchor>
      <arglist>(Body &amp;body, Momentum2 impulse, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5d1467095e23488ca1344a26336aae8f</anchor>
      <arglist>(Body &amp;body, AngularMomentum impulse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c4c855f042444d0122919f8c1559ccb</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>accc0736257251f381353661320af972e</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3802163b90f631b001eaa0201be419c9</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a306635dbd11f92ad1020a386fce7b7c2</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7c0e7bb0c146372c16ee44661798c473</anchor>
      <arglist>(Body &amp;body, const LinearVelocity2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfac2d00a05141d4bcfdd0a3dd443765</anchor>
      <arglist>(Body &amp;body, AngularVelocity omega) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdbcfc8a43696b1e7136db073fbe09ad</anchor>
      <arglist>(const Body &amp;body, const Length2 localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ccc8fe53ed54beba80db7046ab8ddf0</anchor>
      <arglist>(const Body &amp;body, const Length2 localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7544d24c890820e7f5a6d355c0ad4406</anchor>
      <arglist>(const Body &amp;body, const UnitVec localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab029ce2fdf891e9d4a5705e2c4e0564a</anchor>
      <arglist>(const Body &amp;body, const Length2 worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a560083bf40b9f3936b549e841d8338ba</anchor>
      <arglist>(const Body &amp;body, const UnitVec uv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7217cc5275bc5d8c2f2407ee20fb958</anchor>
      <arglist>(const Body &amp;body, const Length2 worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a47196aab3f4386da954b565a6a0fce7c</anchor>
      <arglist>(const Body &amp;body, const Length2 localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82eaa61b6bddf682fe315f09830e2bfc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18e2ece8e057b22c240cf681aca400b5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a6f694cab71d0db91049dc0908de63f</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93f21ae0c92245d912cb91a99e756946</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a23265c6b8ce7bfd11da5f78d296dd4cb</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44001c717f2a41d1ba1c02fec4a9c5a9</anchor>
      <arglist>(Body &amp;body, const Transformation &amp;xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4b2825c7e1effdbf7bbf4a8c894a2350</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18d4f68807190fdf745e1b7a6eeeeefc</anchor>
      <arglist>(Body &amp;body, Length2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a200799e930f62a238b7e82bf59d18cdb</anchor>
      <arglist>(Body &amp;body, Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConf</type>
      <name>GetBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e940544a56fe840424f880106fcd842</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR BodyConf</type>
      <name>GetDefaultBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a778e88e326f8711cefea4333cef640</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactImpulsesList</type>
      <name>GetContactImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3952e6392470f39a6236a5d144df88fe</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetMaxNormalImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07f0d8f5fce9556590d8e7e40289ae33</anchor>
      <arglist>(const ContactImpulsesList &amp;impulses) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint</type>
      <name>GetBodyConstraint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9ef1dfe4410cde28beb3f03e2ef368f4</anchor>
      <arglist>(const Body &amp;body, Time time, MovementConf conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a83c524153440dfeb072b8479b3f3ace3</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1eecaff8b7fee485cf11687a362299ab</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73cfb2e1e624b31d5f37fb3e2018e901</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae0a081f37037b2a2efb245676ace55b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a679c4d673a6ea2890e0d39a7b6fdb0f7</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9b5dc1f3ca395793a68fcc5b87fb34e9</anchor>
      <arglist>(const Contact &amp;c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6364ce32adb82c7dd45b80e8b0c9bfd5</anchor>
      <arglist>(Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7c83e82f89844199f5c06c5cda3749d</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOIOutput</type>
      <name>CalcToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a68f3d6b8ed4709b6b99bd8e096a9960e</anchor>
      <arglist>(const Contact &amp;contact, ToiConf conf)</arglist>
    </member>
    <member kind="function">
      <type>Fixture *</type>
      <name>GetFixtureA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae95687c935176a9f12867b3f4e455238</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixture *</type>
      <name>GetFixtureB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8f0ba59067e83279bcdd83817732701b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb78a950ed55c8058f6beffd7b26a180</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf62df2b59a399644e24938289aa3dd1</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactKey</type>
      <name>GetContactKey</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39fb4ceda025b54499ed96746084406d</anchor>
      <arglist>(const Fixture &amp;fixtureA, ChildCounter childIndexA, const Fixture &amp;fixtureB, ChildCounter childIndexB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactKey</type>
      <name>GetContactKey</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ced2de66d940bf19f7def17d982ab5e</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Contact *</type>
      <name>GetContactPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a036fd17edd4f18cf0112859c2daa70e9</anchor>
      <arglist>(KeyedContactPtr value)</arglist>
    </member>
    <member kind="function">
      <type>PositionSolution</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd873bc71022ae60b8dc92a2a4ab74db</anchor>
      <arglist>(PositionSolution lhs, PositionSolution rhs)</arglist>
    </member>
    <member kind="function">
      <type>PositionSolution</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad2efb6e040dc5597f0bd9c7deb1761ea</anchor>
      <arglist>(PositionSolution lhs, PositionSolution rhs)</arglist>
    </member>
    <member kind="function">
      <type>PositionSolverManifold</type>
      <name>GetPSM</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa9987f7f8471dbe26d486e2602661e78</anchor>
      <arglist>(const Manifold &amp;manifold, Manifold::size_type index, const Transformation &amp;xfA, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetRegVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3be2a456143f7f1db48944c54ece5f7d</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetToiVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad85899bcfb7e549fe5739759da490fad</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a505e0ba1aa4e4cdef90f4726d8f8c866</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetTangent</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a12eb87f33057fe3f442b0ec676377957</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af73eb5649a2cf524f0a144d10eaab015</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a68cc03f13897094111403a1ac4a049c8</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6ee37ce310f1b1c648d9839a484c029a</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetVelocityBiasAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad29f5f0f1292fa56396d8ed8cbbd1817</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetNormalMassAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf5dd1d8868baa0e0cea2cf19b39cb95</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetTangentMassAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4e72bcca6e5c6a3f0386f9fa2127f41d</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetNormalImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a238cff049e361d27dcb889d50ea67613</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetTangentImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b3e102432766123da35ec35f806d6f8</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetNormalImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4145b0ae4d099402770893bffc3ed4aa</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetTangentImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a998e3c3312725cd900878cf71f2cf6e5</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7f7d7dbe5e33cfbb08cdb9190ea8f8b</anchor>
      <arglist>(VelocityConstraint &amp;vc, VelocityConstraint::size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3736992d15f28f25f8e02fc17e5e3e27</anchor>
      <arglist>(VelocityConstraint &amp;vc, VelocityConstraint::size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfa6dcc6594d84f26af4630c98f010eb</anchor>
      <arglist>(VelocityConstraint &amp;vc, const Momentum2 impulses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a98c5ded56d446e057ba2fcb92760358a</anchor>
      <arglist>(VelocityConstraint &amp;vc, const Momentum2 impulses)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gab8a45f5746faae097776c2dcd5d8c9d4</anchor>
      <arglist>(const Fixture &amp;f, Length2 p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a881653bbb1f1064662695770738c3dfc</anchor>
      <arglist>(const Fixture &amp;f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0daaf455abb76a6e73564741eedee365</anchor>
      <arglist>(const Fixture &amp;f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a83e0703de7a5f33d9a17c36f1aa43615</anchor>
      <arglist>(const Fixture &amp;fixtureA, const Fixture &amp;fixtureB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureConf</type>
      <name>GetFixtureConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8db5cea675ddb8590ba6787a048a58b2</anchor>
      <arglist>(const Fixture &amp;fixture) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR FixtureConf</type>
      <name>GetDefaultFixtureConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a717b9c7d89e14f4f0e7f893075b3a8a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1b38c605da457526f62c63035cb0affe</anchor>
      <arglist>(const Island &amp;island, const Body *entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae256b2876b134f9f6eaa583ee990e486</anchor>
      <arglist>(const Island &amp;island, const Contact *entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af70534dab51f6fa6a15dd0399d8d8ff7</anchor>
      <arglist>(const Island &amp;island, const Joint *entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad81cfb61a8aae11d28836a542584dd7f</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0613fe306ae99ce5ca98798c757a3dc2</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae65a21864cd706cbd0f239ed4497841d</anchor>
      <arglist>(const DistanceJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c68ff176bff91fd36b87f183341d713</anchor>
      <arglist>(const FrictionJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a47a8832ceb780632a61883551107187a</anchor>
      <arglist>(const GearJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e526de13d058239de088ab752f62c21</anchor>
      <arglist>(const Joint &amp;j) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab9bed9fa175445dc6ef21428cb2ee4af</anchor>
      <arglist>(Joint &amp;j) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a06956449699a714a65070ea4f4e497c7</anchor>
      <arglist>(const Joint *joint)</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraintPtr &amp;</type>
      <name>At</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab34b64fa235fd3c272070cc1a302c05a</anchor>
      <arglist>(std::unordered_map&lt; const Body *, BodyConstraint * &gt; &amp;container, const Body *key)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ToString</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2c3c85ebcd0be387ec9fea9294e9737</anchor>
      <arglist>(Joint::LimitState val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IncMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac5b23de94ed67d327fbbb3908d3235fb</anchor>
      <arglist>(T &amp;j, AngularVelocity delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaae24e0e3eadefda8d4145490e1c49ab</anchor>
      <arglist>(JointConf &amp;def, const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointKey</type>
      <name>GetJointKey</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad650bf705b17c0eea9396299f6ec4dc6</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR int</type>
      <name>Compare</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c91ee07f0908892b58f5c1240ca8756</anchor>
      <arglist>(const JointKey &amp;lhs, const JointKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsFor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a050555233768cc04b61249789df08fd9</anchor>
      <arglist>(const JointKey key, const Body *body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Joint *</type>
      <name>GetJointPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac09a4035f44e4510a2e1e8b2c3b23014</anchor>
      <arglist>(std::pair&lt; JointKey, Joint * &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>JointType</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab274cbc54f178cbd8236401727296dcf</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ToString</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af84e52fdf9a9b10e6363886f26235828</anchor>
      <arglist>(JointType type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3d3e840a6937715846380ef07fcf7b68</anchor>
      <arglist>(const MotorJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5a7670d3ce160acd59649d8fa877ae85</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcd27abba8be9fe2f9c2e02fa2bbcd86</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00adda0f4423a7889aa94e49ed5b561a</anchor>
      <arglist>(const PrismaticJoint &amp;joint, Frequency inv_dt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef2b20cbcd83c2314aae9974da396826</anchor>
      <arglist>(const PrismaticJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14a941545584e7cdd988f35be8cc0524</anchor>
      <arglist>(const PulleyJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5523513c7bf6104e006be40abd13289</anchor>
      <arglist>(const PulleyJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73d8424fa90990867932b237da9006b9</anchor>
      <arglist>(const PulleyJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetJointAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1a4aed49a820640ab3902fcad07bb14f</anchor>
      <arglist>(const RevoluteJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a90728baa90a0569f4e7a0b218905d39f</anchor>
      <arglist>(const RevoluteJoint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a595b857943513c1b14ed528dbd05a094</anchor>
      <arglist>(const RevoluteJoint &amp;joint, Frequency inv_dt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada7cb792bed88f18a0225923262d5268</anchor>
      <arglist>(const RevoluteJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RopeJointConf</type>
      <name>GetRopeJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32c2f5ba2c9becb7db0c7264d96822e1</anchor>
      <arglist>(const RopeJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TargetJointConf</type>
      <name>GetTargetJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad692b79cfa17d64bf31a489e91d2695c</anchor>
      <arglist>(const TargetJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8b3527a6238410941c6f6e5bae17686f</anchor>
      <arglist>(const WeldJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9c4508d7e8e6bef6a676b0bc63200273</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac300fea7a4528e80285ab4b49109ef41</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4a7bf291d119394a37dcccae915a2d20</anchor>
      <arglist>(const WheelJoint &amp;joint, Frequency inv_dt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a58ab4da29b2f9b4144dbbdd66328b2</anchor>
      <arglist>(const WheelJoint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a035ee60a3274619546a2cee7b982b894</anchor>
      <arglist>(World &amp;world, Time delta, TimestepIters velocityIterations=8, TimestepIters positionIterations=3)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetTouchingCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af8aabfb6390fed1c549e81700b0cd80e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetFixtureCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad07495876f7627e4c0b347fd08ce5346</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetShapeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a16741ddd7414c860451f4b6ba92d7bf4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetAwakeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0812de1607b6656927bc2ad724f1d7c3</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1539463268cf6db572823eb1a195dc70</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad85bb4dfbf060d7d28668e4bc2d73a10</anchor>
      <arglist>(World &amp;world, Acceleration acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab9dc75916d003478c7004172110b58e2</anchor>
      <arglist>(World &amp;world, LinearAcceleration2 acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body *</type>
      <name>FindClosestBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd5009f0701e56be66936edcd9308111</anchor>
      <arglist>(const World &amp;world, Length2 location) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54933e742508cac5c0b219c653c67674</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8902de592d92cefc72d2e984d591a27d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7b6c00fbd4fc40a4957bd082c9437b4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5c6e8e38d0d92d2c59fb4235bda2c2b3</anchor>
      <arglist>(World &amp;world, F fn) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearForces</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa8a757a3ee66fa157cbf1ffafdf556d4</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR WorldConf</type>
      <name>GetDefaultWorldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad1b49affcbf8a783155380873e8398a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Transform_identity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae26bda35ac3559a9b32703c8b8e56a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>EarthlyGravity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a143ebb178c627ab4836140ba1611171c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho::detail</name>
    <filename>namespaceplayrho_1_1detail.html</filename>
    <class kind="struct">playrho::detail::AABB</class>
    <class kind="struct">playrho::detail::Defaults</class>
    <class kind="struct">playrho::detail::Defaults&lt; Fixed&lt; std::int32_t, FRACTION_BITS &gt; &gt;</class>
    <class kind="struct">playrho::detail::IsIterableImpl</class>
    <class kind="struct">playrho::detail::IsIterableImpl&lt; T, VoidT&lt; decltype(begin(std::declval&lt; T &gt;())), decltype(end(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(begin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*begin(std::declval&lt; T &gt;())) &gt; &gt;</class>
    <class kind="struct">playrho::detail::LengthIndices</class>
    <class kind="struct">playrho::detail::MassData</class>
    <class kind="struct">playrho::detail::RayCastInput</class>
    <class kind="struct">playrho::detail::SeparationInfo</class>
    <class kind="struct">playrho::detail::Voidify</class>
    <member kind="typedef">
      <type>typename Voidify&lt; Ts... &gt;::type</type>
      <name>VoidT</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac796d93526955086be33030a4dac3ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a90ccf5a25dfba2e91603cb02d94b2301</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ad3afe379aece13ee20c7581aafcdfaeb</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a5accaf2fe5186e02ddb93f8c07887c54</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa2188c52c7ed607cf89168e29307e468</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae45568c5386eb61b893e75f791c79d8d</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a69db919dd0fd89175d3e6386508e0d87</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa8268e1d1322b4a65a62f9638e11fb04</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>Contains</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a939e3a96029dde080735ecb4da9260aa</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4ab5887876bf8379833a7ddc5901a207</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7858f1f9664f0c2512cf00969b081217</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Move</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7f944a0ead01e7370509f9231bfb9fa2</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a48a0c68e2b2f594072cf52c26ccdabdc</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a416c483d73eaf2c586ed185aeaff8af9</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ada22d3291107cc2aaa670309628fa11f</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aaeea3789c48130a588c67d49aa8f6a3a</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0f52be70dfa911205c593eb82dc69a66</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3903c09198eb0937977d3e8037e04f0a</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4cdb6dbe09a816784ce7c171e69cb5e7</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aeedbbe27963b9396e1e566a97a03097a</anchor>
      <arglist>(::std::ostream &amp;os, const AABB&lt; N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae5836a818477a066a253a0fa6fd8f2c6</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0e76b1db2bbc00a66397e207279070f3</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>factorial</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9f8231d1d9f61cb1b262cd79c62951fb</anchor>
      <arglist>(std::int64_t n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>exp</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4237a1a9c35033e7f2d44fcba79b5c53</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>log</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a2133e6bdaa781faf55ab21c618328445</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>sin</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa3f589528f56370c3aff73cea9c043b8</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>cos</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a85d24ce8b375444d38c8c0b154c5fca3</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>atan</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a70e6d2d2422ff5e4331fa12d63591192</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ComputeSqrt</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a841f7c8e6ad559c469948f3e26e7835d</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>AngularNormalize</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a027dccab6934b3c157ef2dc01ef3ccc0</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; angleInRadians)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>max_size</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ad0a6aee5cd6409fe17ee8268dc830591</anchor>
      <arglist>(const T &amp;arg) -&gt; decltype(arg.max_size())</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>IsFull</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1334316c111a4be3cc69bc370474624b</anchor>
      <arglist>(const T &amp;arg) -&gt; decltype(size(arg)==max_size(arg))</arglist>
    </member>
    <member kind="variable">
      <type>constexpr const auto</type>
      <name>FixedPi</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af37290279495b86b0864f95948899b42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho::GaussSeidel</name>
    <filename>namespaceplayrho_1_1GaussSeidel.html</filename>
    <member kind="function">
      <type>Momentum</type>
      <name>SolveVelocityConstraint</name>
      <anchorfile>namespaceplayrho_1_1GaussSeidel.html</anchorfile>
      <anchor>a270ba118399c9419880ab9893ef479e5</anchor>
      <arglist>(d2::VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>d2::PositionSolution</type>
      <name>SolvePositionConstraint</name>
      <anchorfile>namespaceplayrho_1_1GaussSeidel.html</anchorfile>
      <anchor>a20cf1f9d2f1ac6b85e0d4171b523d3a7</anchor>
      <arglist>(const d2::PositionConstraint &amp;pc, const bool moveA, const bool moveB, ConstraintSolverConf conf)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RayCastGroup</name>
    <title>Ray Casting Functions</title>
    <filename>group__RayCastGroup.html</filename>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gad7a1b955a57a2bb043750bf32cde2549</anchor>
      <arglist>(Length radius, Length2 location, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga4ad7d3ebcceb46993d721c836ba13ae2</anchor>
      <arglist>(const detail::AABB&lt; 2 &gt; &amp;aabb, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gadf0ec62e1852e3bc9b017eae4a5616b4</anchor>
      <arglist>(const DynamicTree &amp;tree, RayCastInput input, const DynamicTreeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga9616b36d2baba2023d1a5fcf10a5126a</anchor>
      <arglist>(const DynamicTree &amp;tree, const RayCastInput &amp;input, FixtureRayCastCB callback)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PartsGroup</name>
    <title>Shape Classes</title>
    <filename>group__PartsGroup.html</filename>
    <class kind="class">playrho::d2::ChainShapeConf</class>
    <class kind="struct">playrho::d2::DiskShapeConf</class>
    <class kind="class">playrho::d2::EdgeShapeConf</class>
    <class kind="struct">playrho::d2::MultiShapeConf</class>
    <class kind="class">playrho::d2::PolygonShapeConf</class>
    <class kind="class">playrho::d2::Shape</class>
  </compound>
  <compound kind="group">
    <name>BoundedAliases</name>
    <title>Bounded Value Types</title>
    <filename>group__BoundedAliases.html</filename>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer&lt; T &gt;::value, BoundedValue&lt; T, LoValueCheck::ZeroOrMore, HiValueCheck::Any &gt; &gt;</type>
      <name>NonNegative</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>gae872dc540686eb8e626643117f8cb62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::Any, HiValueCheck::ZeroOrLess &gt;</type>
      <name>NonPositive</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga68b6bab2cd78b32dbd643d341f37b8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::AboveZero, HiValueCheck::Any &gt;</type>
      <name>Positive</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>gae492ff78381a7dc66d271d0ee3b1189d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::Any, HiValueCheck::BelowZero &gt;</type>
      <name>Negative</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga0a15a03f8bd917575a6ae1cc06dff112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::AboveNegInf, HiValueCheck::BelowPosInf &gt;</type>
      <name>Finite</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga9cf75a03c4b0afaaba95d65ec8ce54b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer&lt; T &gt;::value, BoundedValue&lt; T, LoValueCheck::NonZero, HiValueCheck::Any &gt; &gt;</type>
      <name>NonZero</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga6d3eb15a067eb31352543486e8f10f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer&lt; T &gt;::value, BoundedValue&lt; T, LoValueCheck::NonZero, HiValueCheck::Any &gt; &gt;</type>
      <name>NonNull</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>gab64c2bdfe3d8c1c0815013d817b4aa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedValue&lt; T, LoValueCheck::ZeroOrMore, HiValueCheck::OneOrLess &gt;</type>
      <name>UnitInterval</name>
      <anchorfile>group__BoundedAliases.html</anchorfile>
      <anchor>ga434227c634b0a1b975979d4dbc242346</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>FixedMath</name>
    <title>Math Functions For Fixed Types</title>
    <filename>group__FixedMath.html</filename>
    <namespace>playrho::detail</namespace>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>abs</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gad5766364e4f6e29b62f20216a25a678f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>pow</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gae62c436656c3c2a2e0d46d83fe1ea3ae</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value, int n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>trunc</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga55adeaba7e08eb415e6437f709b62c0f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>nextafter</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga935fa93a69f58baf20b00e14461d51e7</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; from, Fixed&lt; BT, FB &gt; to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>fmod</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaae59d507ab3b0f722d4d22b3e4969f4a</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; dividend, Fixed&lt; BT, FB &gt; divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sqrt</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7a9d7e9855b45a3b4103632a47ccd6f4</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isnormal</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga4ab479ab854291e9d03a25cc0986deca</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>sin</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga0daabd6eacf8702561639d394e3efe6e</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>cos</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaf6191f040980675d9a5c71bd53c79060</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>atan</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaa5670d26d229424278268189beb541f5</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>atan2</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaad3e4450a30d08eceda4225bd26c312b</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; y, Fixed&lt; BT, FB &gt; x)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>log</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga661c3590b9b618ac14194bf25a70f1d6</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>exp</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7ddb9c067c645bded41aafe75cfecd02</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>pow</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga85dfc7d7d071b22f80179a86e5544237</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; base, Fixed&lt; BT, FB &gt; exponent)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>hypot</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gafff5f9018a9088992be3c922926aee56</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; x, Fixed&lt; BT, FB &gt; y)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>round</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga1e3ca7fb2626886c5920bbc5f570a525</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signbit</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga8445167791eb53f1e8eb0dbf318293a1</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>isnan</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7c8088b287bc76ea58ccb572e3e14012</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isfinite</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gab8fa73692143466ca4d584aacf5749f1</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Math</name>
    <title>Additional Math Functions</title>
    <filename>group__Math.html</filename>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR U</type>
      <name>Secant</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gafbb2415d17dfe0130be9799f945dbc5e</anchor>
      <arglist>(T target, U a1, T s1, U a2, T s2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>Bisect</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga53d729355fcef6f1d5d1e5e8a31f08cd</anchor>
      <arglist>(T a1, T a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR bool</type>
      <name>IsOdd</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga7d0999f6415f56dc56b97da946c23129</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Square</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga9163760181cfb59593537b444defe6cf</anchor>
      <arglist>(TYPE t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Atan2</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab870a9188fcc77c905807fa718a8268d</anchor>
      <arglist>(T y, T x)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Average</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8b2133f1c2e5299035bb059d2d2706cd</anchor>
      <arglist>(const T &amp;span)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; IsArithmetic&lt; T &gt;::value, T &gt;</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab8f24574b8a0ca458ec2fe9d691364ff</anchor>
      <arglist>(T value, unsigned precision=100000)</arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga812ea5eaf66fb9d1bffa799886b2eee3</anchor>
      <arglist>(Vec2 value, std::uint32_t precision=100000)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; T, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>d2::UnitVec</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac862a8609b82126d0683ecb38a498087</anchor>
      <arglist>(const d2::UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, bool &gt;</type>
      <name>AlmostZero</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga4e8eade67bf49fee09cd743895113ebb</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR std::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value, bool &gt;</type>
      <name>AlmostEqual</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga035c5294391f9652e8966092b5caca58</anchor>
      <arglist>(T x, T y, int ulp=2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaFmod</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga25b52facf9e28f05e5e41f4e7b7ff54e</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaTrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga84e7cb2a415fcb956202c8d7e1b1d200</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetNormalized</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga156a2abff11f978a8df25efbf0c10147</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga56785e4c60180ef416fe29f68ccf525a</anchor>
      <arglist>(const Vector2&lt; T &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetMagnitudeSquared</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac5292dcebbf79916913d2a8c3cc0f821</anchor>
      <arglist>(T value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMagnitude</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga85c114f129eeee63e60ec7d4703bbd65</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Dot</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga76a104de7c7a8d482209827d8b26dfa6</anchor>
      <arglist>(const T1 a, const T2 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Cross</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaf5853b82d4317a3c002b5aae800caf44</anchor>
      <arglist>(T1 a, T2 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Solve</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga48e5d966eb9e5d6b126f7fbe10d3b697</anchor>
      <arglist>(const Matrix22&lt; U &gt; mat, const Vector2&lt; T &gt; b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Invert</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaa93fcc5a3b89a2c26ebeb2ba69e31a6d</anchor>
      <arglist>(const Matrix22&lt; IN_TYPE &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec3</type>
      <name>Solve33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga5971f12d70f44aaa1659523dd79bad56</anchor>
      <arglist>(const Mat33 &amp;mat, const Vec3 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>Solve22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga307196931b0b067cacfb6b690547554c</anchor>
      <arglist>(const Mat33 &amp;mat, const T b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mat33</type>
      <name>GetInverse22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga929129f73956d318af97ba018147d673</anchor>
      <arglist>(const Mat33 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mat33</type>
      <name>GetSymInverse33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac05611bc6ee4ca8ba6b60074ca969568</anchor>
      <arglist>(const Mat33 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga7db75e579c251d11bbb7da89184bcbc5</anchor>
      <arglist>(const T vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga00b2d4eb2cee9e0e14f8e9eea46df5e5</anchor>
      <arglist>(const T vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR auto</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaab12e9930e01cf5596b23e2e63d83f2a</anchor>
      <arglist>(const Vector&lt; T1, M &gt; v, const Matrix&lt; T2, M, N &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac24b2130cf7cb682b1f9d2ce2f701f29</anchor>
      <arglist>(const Vec2 v, const Mat33 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vec2</type>
      <name>InverseTransform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga05c5113af7bc4a93fb0df5e812a5bf7d</anchor>
      <arglist>(const Vec2 v, const Mat22 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mat22</type>
      <name>MulT</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga827e59c08791e02964cd63d4382a4549</anchor>
      <arglist>(const Mat22 &amp;A, const Mat22 &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mat22</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga94fee43efb2fa412b816e9e0a7df87f8</anchor>
      <arglist>(const Mat22 &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>NextPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0ad2d1e2b11362e91193d313ee00e78c</anchor>
      <arglist>(std::uint64_t x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>Normalize</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0c7d2525a406c1f83c0574e46a2cee32</anchor>
      <arglist>(Vec2 &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>ComputeCentroid</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae769785f0540a4b8960b282f6b105c14</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetModuloNext</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab5218fea988cf8865a55252d7c282442</anchor>
      <arglist>(T value, T count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR T</type>
      <name>GetModuloPrev</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga9de9ef40d734a89581bcd6b0804e9b02</anchor>
      <arglist>(T value, T count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetDelta</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8c036532db1260373b97c1d85360894c</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>GetRevRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaa23479fc2522d30b5faf88d4a343d264</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetCircleVertices</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3b8e8abc999b0c63cf1921b0edcf0b36</anchor>
      <arglist>(Length radius, unsigned slices, Angle start=0_deg, Real turns=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfCircle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0eb57dabfe8d3db9e509a6b493173358</anchor>
      <arglist>(Length radius)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfPolygon</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga118f8284073d2638e48ef8f13177e1d9</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>SecondMomentOfArea</type>
      <name>GetPolarMoment</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga760adfdd1cb30bdae8cd37c1ae5da485</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Vector&lt; T, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1edf82929653421afe0d62d0e2e4fe43</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixTraitsGroup</name>
    <title>Matrix Traits</title>
    <filename>group__MatrixTraitsGroup.html</filename>
    <class kind="struct">playrho::IsMatrix</class>
    <class kind="struct">playrho::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::IsSquareMatrix</class>
    <class kind="struct">playrho::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>DecimalUnitPrefices</name>
    <title>Decimal Unit Prefices</title>
    <filename>group__DecimalUnitPrefices.html</filename>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Centi</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga7c839382b9503cfe43bd06e107a806cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Deci</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gae1d6e7c9295e5e7cfdacaa4febb24139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Kilo</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga0a001b98cd872f8fc63e2d31566af000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Mega</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga1a1a6b12afd793bd8c39969a0bb2872a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Giga</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga6b71d63054d20481d38c3611900fb48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Tera</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaff2c76d168969252f3f97a070280ec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Peta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaeb56a156700337bb4b68015af2f13b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Yotta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga56411037d9972d2a50d51dfd8e9f3f45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PhysicalQuantities</name>
    <title>Physical Quantity Types</title>
    <filename>group__PhysicalQuantities.html</filename>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::time)</type>
      <name>Time</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga250898c9929b0e6eaf56a1967c568888</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::frequency)</type>
      <name>Frequency</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad39135cf298be76964c70829ec84a51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::length)</type>
      <name>Length</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga7361ef2e10e7853a05b64aa433651014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::velocity)</type>
      <name>LinearVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga6e944c18ed210626b5829b8ad2813fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::acceleration)</type>
      <name>LinearAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gadf7de472e7f4a6fa26bff6a655f100e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::mass)</type>
      <name>Mass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga5edfc295416b7690b4f949223b551bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::inverse_mass)</type>
      <name>InvMass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga370c2a37515b6a8e79468113554f8ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::area)</type>
      <name>Area</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga3ea2a7de91fdafccb2e49c3a84117ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::surface_density)</type>
      <name>AreaDensity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga534c92a63631b49d1e80119a68af8a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::plane_angle)</type>
      <name>Angle</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gab999341c050df340ff56a65816a63da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_velocity)</type>
      <name>AngularVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gac33f92018f7e8821550296aece465028</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_acceleration)</type>
      <name>AngularAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gafcce543a0d59f313adb801e2e18ede86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::force)</type>
      <name>Force</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gabdbf955ed1cafec5062f074511ee4829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::torque)</type>
      <name>Torque</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaa13e620479b6e4a34fae5a90bcaf9355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::second_moment_of_area)</type>
      <name>SecondMomentOfArea</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga84a494e0a8763db409c32bde53324b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::moment_of_inertia)</type>
      <name>RotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga67bbb3e4938321efec8d939636bf988e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::inverse_moment_of_inertia)</type>
      <name>InvRotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gafa6edf71110d3eef58f39dcbb8067ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::momentum)</type>
      <name>Momentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga1d281ffd7cf8e2c8897d03a1cae9f1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_momentum)</type>
      <name>AngularMomentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga3537d441743bb2f96c612296424f1e43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PhysicalUnits</name>
    <title>Units For Physical Quantities</title>
    <filename>group__PhysicalUnits.html</filename>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Second</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga1f79d239836061a3770b2565e3ac6aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga404f488baa0aec3be5470c2ad0fbab0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Hertz</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga28835cec93243fdfdc7dfd6b748897b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Meter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga039507266050de7ca9bf46650d01b4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MeterPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga3117a15a55f2de2a644818c9763bfbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>MeterPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64258443b898058acb500d7dfea6496e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Kilogram</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga43c75e28cac1383ca11aa451c3cdf6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga792f8d6a2eee322ba078add7973269d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>CubicMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga6cfa4f3cdb6b8204ddfec254ba710e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>KilogramPerSquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gae092bb04a4177b10d5cb78e3c04dd32d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Radian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga3fac05ddd105ca78084a80980522f335</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Degree</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7959b7bdc0a05e0e941c5b8113943815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>SquareRadian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga996993e261ccad01eaa44912815b5abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>RadianPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gac4dab714461907cd0799b009f9bd4b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DegreePerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaf68266347e2f5a4b7bc34fe204586d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>RadianPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga43cebf5299254ff0938517f6e441506f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>DegreePerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga736a26fdbc90821f50f471bfff5109df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>Newton</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0d8d974c67aaae9881a8f432b865b15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>NewtonMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga9b045c5c2d080dcff4bd1bb7085903c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>NewtonSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7a6d64e6bec68fe9e063a08f530a6763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>NewtonMeterSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga4f806270648ade122f45580dea2130b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>RevolutionsPerMinute</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga5a7fa98fcb12786039f6edef405cc48a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Unitsymbols</name>
    <title>Literals For Unit Symbols</title>
    <filename>group__Unitsymbols.html</filename>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga14c0aa09892ed4a7b2d46b3fbf41bfc8</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gacf31640481edb2605a7abb68dbdaf749</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae97549d71b0341bc39377700041663f9</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga701e40d1d20e11cdef24fcedf7c23b88</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga684d17076a89433963dc8e1323aa5b55</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac4d843d8faf24294eb520463d9a37813</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9d2018b8764488f776c5a3cf07788b8e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga997e24502fe2452cd289354419781e71</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6de070923e9b463e7c81a87d1486261c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad6fb5c91db30dff44a1a09a8eedea94f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8be5d2aa84e48a3d3c6316332d5a348f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga42755ce0521b8b0130a1c5f11d48964b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaba6b25cf776642ff97185030d0698ac8</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab0b725da10240de2333918963dfde2e5</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0a34b5dc7cac2a5f4112f6893ce06a21</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga2ddca2bb76abdff1a08c35f6988aad1b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gacdef8bf77ff852cab1b11c1c9dc24a32</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaec8d2f9b019cf0833f66b419fa504740</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga639e3760e3331ce0cfb975de496ca975</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6b08394fea8387ac6d9640e5776f844e</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3a3d9e6dddd0021d4bc764cef0eceff0</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8b243cccc73096f470b3f52d7f493ef3</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac0ca071c9d0bf32bd6a4d01aca84ae19</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga30e7212db29d5b6312041200f97633a3</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga97e61bae1e497b896f8e2d98a9779b43</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1a2e6ad4afb3e627981b9e81fc012e4b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad176a2eee3702f7711da245adf07977e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad1231c56d18101cfb0d53a2c42003df7</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab48e985c0b61b4d300c06583893122f1</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8da02678f5590ad991b35b119a7b4c78</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafff606ad84df032356f03e4a7c01eea3</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4f77d9e9c3c2126840001ad39156e0f1</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga391b73d904fce3e5e60a87be78df42b2</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gabb1ded7fb7d02c97a2e54c4f69fb33bb</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac58036a13cae7f8bf437fd6df69706f5</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga464241e9522977097670618359508ca3</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga530568919aee1293441ba7ce0013ccfb</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gada2bbc07689e2dc7f455c190959bbbe1</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6b4a222a228271faa401087192dfd288</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0859831e09cd8275197d6e5d9677fb3e</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga44cbe62a4d856f5aef4224991b3c438f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8f8b7e2debef3864068b820a18e01d9f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9cb6303514b6449fbbc6fca048434837</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga65dba2a7bff526eba56cb0d4cc0b4aa1</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1df36c5d034a211ceb900c726f87a213</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3789883207d17ad417511da46636b927</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga26e8f246fc834b5fea3dec6374941c97</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3c18a1c1e53a34383096fbf514c09e45</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga71a22bf7dab76d4ae75cc162c0d03968</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga311a47d7f3f32758949d319710a4bec0</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga5a455c63651e942e227e38d50dd30daa</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PLAYRHO_CONSTEXPR AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf2ee434b5de8221e4e2238f4ea1dc7bd</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>UnitConstants</name>
    <title>Physical Constants</title>
    <filename>group__UnitConstants.html</filename>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>EarthlyLinearAcceleration</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>gabf0c6abc7c1d4718b4c2e21b2a866780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PLAYRHO_CONSTEXPR auto</type>
      <name>BigG</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga561c9c679c7d47c671ccfb8fbe13375f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>VectorTraitsGroup</name>
    <title>Vector Traits</title>
    <filename>group__VectorTraitsGroup.html</filename>
    <class kind="struct">playrho::IsVector</class>
    <class kind="struct">playrho::IsVector&lt; Vector&lt; T, N &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>JointsGroup</name>
    <title>Joint Classes</title>
    <filename>group__JointsGroup.html</filename>
    <class kind="class">playrho::d2::DistanceJoint</class>
    <class kind="class">playrho::d2::FrictionJoint</class>
    <class kind="class">playrho::d2::GearJoint</class>
    <class kind="class">playrho::d2::Joint</class>
    <class kind="class">playrho::d2::MotorJoint</class>
    <class kind="class">playrho::d2::PrismaticJoint</class>
    <class kind="class">playrho::d2::PulleyJoint</class>
    <class kind="class">playrho::d2::RevoluteJoint</class>
    <class kind="class">playrho::d2::RopeJoint</class>
    <class kind="class">playrho::d2::TargetJoint</class>
    <class kind="class">playrho::d2::WeldJoint</class>
    <class kind="class">playrho::d2::WheelJoint</class>
  </compound>
  <compound kind="group">
    <name>PhysicalEntities</name>
    <title>Physical Entity Classes</title>
    <filename>group__PhysicalEntities.html</filename>
    <class kind="class">playrho::d2::Body</class>
    <class kind="class">playrho::d2::Contact</class>
    <class kind="class">playrho::d2::Fixture</class>
    <class kind="class">playrho::d2::Joint</class>
  </compound>
  <compound kind="group">
    <name>TestPointGroup</name>
    <title>Point Containment Test Functions</title>
    <filename>group__TestPointGroup.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gac9da7b3dd9e1dc5532a0f3c47f31f22e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gafcfbf811dc989043838f0a4c7c64b59b</anchor>
      <arglist>(const Shape &amp;shape, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gab8a45f5746faae097776c2dcd5d8c9d4</anchor>
      <arglist>(const Fixture &amp;f, Length2 p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gac9da7b3dd9e1dc5532a0f3c47f31f22e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gafcfbf811dc989043838f0a4c7c64b59b</anchor>
      <arglist>(const Shape &amp;shape, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gab8a45f5746faae097776c2dcd5d8c9d4</anchor>
      <arglist>(const Fixture &amp;f, Length2 p) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ExceptionsGroup</name>
    <title>Library Defined Exceptions</title>
    <filename>group__ExceptionsGroup.html</filename>
    <class kind="class">playrho::InvalidArgument</class>
    <class kind="class">playrho::LengthError</class>
    <class kind="class">playrho::WrongState</class>
  </compound>
  <compound kind="group">
    <name>ConstraintsGroup</name>
    <title>Library Defined Constraints</title>
    <filename>group__ConstraintsGroup.html</filename>
    <subgroup>JointsGroup</subgroup>
    <class kind="class">playrho::d2::Contact</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>PlayRho API Documentation</title>
    <filename>index</filename>
    <docanchor file="index.html" title="Overview">intro_sec</docanchor>
    <docanchor file="index.html" title="Getting Started">coding_sec</docanchor>
  </compound>
</tagfile>
