<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>ivorium.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/</path>
    <filename>ivorium_8cpp.html</filename>
    <includes id="ivorium_8hpp" name="ivorium.hpp" local="yes" imported="no">ivorium.hpp</includes>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
    <member kind="function">
      <type>void</type>
      <name>ivorium_init</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aa913cfda2bfbe801466d79bcdc08c924</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ivorium_destroy</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a20ccaeff347c1163c780ccb546f04d5d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ivorium.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/</path>
    <filename>ivorium_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="yes" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="ivorium__game_8hpp" name="ivorium_game.hpp" local="yes" imported="no">ivorium_game/ivorium_game.hpp</includes>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="yes" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="yes" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <includes id="ivorium__UI_8hpp" name="ivorium_UI.hpp" local="yes" imported="no">ivorium_UI/ivorium_UI.hpp</includes>
    <namespace>iv</namespace>
    <member kind="function">
      <type>void</type>
      <name>ivorium_init</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aa913cfda2bfbe801466d79bcdc08c924</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ivorium_destroy</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a20ccaeff347c1163c780ccb546f04d5d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Attribute.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/</path>
    <filename>Attribute_8cpp.html</filename>
    <includes id="Attribute_8hpp" name="Attribute.hpp" local="yes" imported="no">Attribute.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Attribute.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/</path>
    <filename>Attribute_8hpp.html</filename>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">../Instancing/Instance.hpp</includes>
    <includes id="volatile__set_8hpp" name="volatile_set.hpp" local="yes" imported="no">../Basics/volatile_set.hpp</includes>
    <includes id="StringIO__Table_8hpp" name="StringIO_Table.hpp" local="yes" imported="no">../Basics/StringIO_Table.hpp</includes>
    <includes id="valgrind_8hpp" name="valgrind.hpp" local="yes" imported="no">../Basics/valgrind.hpp</includes>
    <includes id="Attribute_8inl" name="Attribute.inl" local="yes" imported="no">Attribute.inl</includes>
    <class kind="class">iv::AttributeListener</class>
    <class kind="class">iv::AttributeEventProcessor</class>
    <class kind="class">iv::Attribute</class>
    <class kind="class">iv::Attr</class>
    <class kind="struct">iv::StringIO&lt; Attribute::ValueMode &gt;</class>
    <class kind="struct">iv::StringIO&lt; AttributeEventProcessor::Event &gt;</class>
    <class kind="struct">iv::StringIO&lt; Attr&lt; T &gt; &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Attribute.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/</path>
    <filename>Attribute_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DirtyAttr.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>DirtyAttr_8hpp.html</filename>
    <includes id="Local__AEP_8hpp" name="Local_AEP.hpp" local="yes" imported="no">Local_AEP.hpp</includes>
    <includes id="Attribute_8hpp" name="Attribute.hpp" local="yes" imported="no">../Attribute.hpp</includes>
    <includes id="DirtyAttr_8inl" name="DirtyAttr.inl" local="yes" imported="no">DirtyAttr.inl</includes>
    <class kind="class">iv::DirtyAttr_I</class>
    <class kind="class">iv::DirtyAttr</class>
    <class kind="struct">iv::StringIO&lt; DirtyAttr_I&lt; T &gt; &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DirtyAttr.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>DirtyAttr_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FunctorActivatorAttribute.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>FunctorActivatorAttribute_8cpp.html</filename>
    <includes id="FunctorActivatorAttribute_8hpp" name="FunctorActivatorAttribute.hpp" local="yes" imported="no">FunctorActivatorAttribute.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FunctorActivatorAttribute.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>FunctorActivatorAttribute_8hpp.html</filename>
    <includes id="Local__AEP_8hpp" name="Local_AEP.hpp" local="yes" imported="no">Local_AEP.hpp</includes>
    <includes id="Activator_8hpp" name="Activator.hpp" local="yes" imported="no">../Types/Activator.hpp</includes>
    <class kind="class">iv::FunctorActivatorAttribute</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Local_AEP.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>Local__AEP_8cpp.html</filename>
    <includes id="Local__AEP_8hpp" name="Local_AEP.hpp" local="yes" imported="no">Local_AEP.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Local_AEP.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>Local__AEP_8hpp.html</filename>
    <includes id="Attribute_8hpp" name="Attribute.hpp" local="yes" imported="no">../Attribute.hpp</includes>
    <includes id="volatile__set_8hpp" name="volatile_set.hpp" local="yes" imported="no">../../Basics/volatile_set.hpp</includes>
    <class kind="class">iv::Local_AEP</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>PrivAttr.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>PrivAttr_8hpp.html</filename>
    <includes id="Local__AEP_8hpp" name="Local_AEP.hpp" local="yes" imported="no">Local_AEP.hpp</includes>
    <includes id="Attribute_8hpp" name="Attribute.hpp" local="yes" imported="no">../Attribute.hpp</includes>
    <includes id="PrivAttr_8inl" name="PrivAttr.inl" local="yes" imported="no">PrivAttr.inl</includes>
    <class kind="class">iv::PrivAttr_I</class>
    <class kind="class">iv::PrivAttr_Owner</class>
    <class kind="class">iv::PrivAttr_I</class>
    <class kind="class">iv::PrivAttr</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>PrivAttr.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>PrivAttr_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>PrivValAttr.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>PrivValAttr_8hpp.html</filename>
    <includes id="Attribute_8hpp" name="Attribute.hpp" local="yes" imported="no">../Attribute.hpp</includes>
    <includes id="PrivValAttr_8inl" name="PrivValAttr.inl" local="yes" imported="no">PrivValAttr.inl</includes>
    <class kind="class">iv::PrivValAttr_I</class>
    <class kind="class">iv::PrivValAttr_Owner</class>
    <class kind="class">iv::PrivValAttr_I</class>
    <class kind="class">iv::PrivValAttr</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>PrivValAttr.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>PrivValAttr_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SharedAttr.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>SharedAttr_8hpp.html</filename>
    <includes id="Attribute_8hpp" name="Attribute.hpp" local="yes" imported="no">../Attribute.hpp</includes>
    <includes id="SharedAttr_8inl" name="SharedAttr.inl" local="yes" imported="no">SharedAttr.inl</includes>
    <class kind="class">iv::SharedAttr_I</class>
    <class kind="class">iv::SharedAttr</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SharedAttr.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Attributes/</path>
    <filename>SharedAttr_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Field.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/</path>
    <filename>Field_8cpp.html</filename>
    <includes id="Field_8hpp" name="Field.hpp" local="yes" imported="no">Field.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Field.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/</path>
    <filename>Field_8hpp.html</filename>
    <includes id="Attribute_8hpp" name="Attribute.hpp" local="yes" imported="no">Attribute.hpp</includes>
    <includes id="valgrind_8hpp" name="valgrind.hpp" local="yes" imported="no">../Basics/valgrind.hpp</includes>
    <includes id="Field_8inl" name="Field.inl" local="yes" imported="no">Field.inl</includes>
    <class kind="class">iv::FieldI</class>
    <class kind="class">iv::Field</class>
    <class kind="struct">iv::StringIO&lt; FieldI::Assignment &gt;</class>
    <class kind="struct">iv::StringIO&lt; Field&lt; T &gt; &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Field.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/</path>
    <filename>Field_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FunctorActivatorField.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Fields/</path>
    <filename>FunctorActivatorField_8cpp.html</filename>
    <includes id="FunctorActivatorField_8hpp" name="FunctorActivatorField.hpp" local="yes" imported="no">FunctorActivatorField.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FunctorActivatorField.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Fields/</path>
    <filename>FunctorActivatorField_8hpp.html</filename>
    <includes id="Activator_8hpp" name="Activator.hpp" local="yes" imported="no">../Types/Activator.hpp</includes>
    <includes id="Field_8hpp" name="Field.hpp" local="yes" imported="no">../Field.hpp</includes>
    <class kind="class">iv::FunctorActivatorField</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FunctorField.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Fields/</path>
    <filename>FunctorField_8hpp.html</filename>
    <includes id="Field_8hpp" name="Field.hpp" local="yes" imported="no">../Field.hpp</includes>
    <includes id="FunctorField_8inl" name="FunctorField.inl" local="yes" imported="no">FunctorField.inl</includes>
    <class kind="class">iv::FunctorField</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FunctorField.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Fields/</path>
    <filename>FunctorField_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>PrivField.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Fields/</path>
    <filename>PrivField_8hpp.html</filename>
    <includes id="Field_8hpp" name="Field.hpp" local="yes" imported="no">../Field.hpp</includes>
    <includes id="PrivField_8inl" name="PrivField.inl" local="yes" imported="no">PrivField.inl</includes>
    <class kind="class">iv::PrivField</class>
    <class kind="class">iv::PrivField_Owner</class>
    <class kind="class">iv::PrivField</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>PrivField.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Fields/</path>
    <filename>PrivField_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Activator.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Types/</path>
    <filename>Activator_8cpp.html</filename>
    <includes id="Activator_8hpp" name="Activator.hpp" local="yes" imported="no">Activator.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Activator.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Types/</path>
    <filename>Activator_8hpp.html</filename>
    <includes id="StringIO_8hpp" name="StringIO.hpp" local="yes" imported="no">../../Basics/StringIO.hpp</includes>
    <includes id="StringIO__defs_8hpp" name="StringIO_defs.hpp" local="yes" imported="no">../../Basics/StringIO_defs.hpp</includes>
    <class kind="struct">iv::Activator</class>
    <class kind="struct">iv::StringIO&lt; Activator &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>MulAgg.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Types/</path>
    <filename>MulAgg_8hpp.html</filename>
    <includes id="MulAgg_8inl" name="MulAgg.inl" local="yes" imported="no">MulAgg.inl</includes>
    <class kind="class">iv::MulAgg</class>
    <class kind="struct">iv::StringIO&lt; MulAgg&lt; Float &gt; &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>MulAgg.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Types/</path>
    <filename>MulAgg_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SumAgg.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Types/</path>
    <filename>SumAgg_8hpp.html</filename>
    <includes id="SumAgg_8inl" name="SumAgg.inl" local="yes" imported="no">SumAgg.inl</includes>
    <class kind="class">iv::SumAgg</class>
    <class kind="struct">iv::StringIO&lt; SumAgg&lt; Int &gt; &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SumAgg.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Attribute/Types/</path>
    <filename>SumAgg_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Context.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>Context_8cpp.html</filename>
    <includes id="Context_8hpp" name="Context.hpp" local="yes" imported="no">Context.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Context.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>Context_8hpp.html</filename>
    <includes id="multiline__ostream_8hpp" name="multiline_ostream.hpp" local="yes" imported="no">multiline_ostream.hpp</includes>
    <includes id="ivorium__core_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <includes id="StringIO_8hpp" name="StringIO.hpp" local="yes" imported="no">StringIO.hpp</includes>
    <includes id="Context_8inl" name="Context.inl" local="yes" imported="no">Context.inl</includes>
    <class kind="class">iv::Context</class>
    <class kind="class">iv::Context::Endl</class>
    <class kind="class">iv::Context::Begin</class>
    <class kind="class">iv::Context::End</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Context.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>Context_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>glm_alias.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>glm__alias_8hpp.html</filename>
    <includes id="StringIO_8hpp" name="StringIO.hpp" local="yes" imported="no">StringIO.hpp</includes>
    <includes id="SS_8hpp" name="SS.hpp" local="yes" imported="no">SS.hpp</includes>
    <includes id="Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">Interpolator.hpp</includes>
    <class kind="struct">iv::StringIO&lt; glm::tvec2&lt; Type &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; glm::tvec3&lt; Type &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; glm::tvec4&lt; Type &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; floatQuat &gt;</class>
    <class kind="struct">iv::StringIO&lt; float4x4 &gt;</class>
    <class kind="struct">iv::Interpolator&lt; float3 &gt;</class>
    <class kind="struct">iv::Interpolator&lt; float4x4 &gt;</class>
    <class kind="struct">iv::int2_CompareByX</class>
    <class kind="struct">iv::int2_CompareByY</class>
    <namespace>iv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GLM_ENABLE_EXPERIMENTAL</name>
      <anchorfile>glm__alias_8hpp.html</anchorfile>
      <anchor>abd75661fe7969e19439052a5f69ba5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec2&lt; int &gt;</type>
      <name>int2</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a0974e051990cbde8148d81bd221e7b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec3&lt; int &gt;</type>
      <name>int3</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ab3c5eada162747b1dccf83d9de24fa6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec2&lt; float &gt;</type>
      <name>float2</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ade95aaafb3a54caec767b15aecfd8fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::vec3</type>
      <name>float3</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a1ca131f798b89f132314abe84baae4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec4&lt; float &gt;</type>
      <name>float4</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a6187d0d48969a80681d8475cbda86609</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec2&lt; bool &gt;</type>
      <name>bool2</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a42b04dc0c544c4e2e9f19bbcc662c182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec3&lt; bool &gt;</type>
      <name>bool3</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a7d34124a56df5a40662290170dec8b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>afb553c62154ec41d8f9714265e26938e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec4&lt; unsigned char &gt;</type>
      <name>uchar4</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ae7607a32c3b0882ea22fdd5bd318ebe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tmat4x4&lt; float &gt;</type>
      <name>float4x4</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a6798afc1b39b1581f4f8b8a2a4b6629b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tquat&lt; float &gt;</type>
      <name>floatQuat</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a4457ebda04b0ff6fc07ecaa3fe2118d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>glm__alias_8hpp.html</anchorfile>
      <anchor>a41b1d93c6fc703e91c2d6186a3876815</anchor>
      <arglist>(std::ostream &amp;out, iv::int2 const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>glm__alias_8hpp.html</anchorfile>
      <anchor>aeda2aa2e919ddaa56fac03d7b7fe56ca</anchor>
      <arglist>(std::ostream &amp;out, iv::int3 const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>glm__alias_8hpp.html</anchorfile>
      <anchor>a3cd7fec5b2520211ee3a515901443acc</anchor>
      <arglist>(std::ostream &amp;out, iv::float2 const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>glm__alias_8hpp.html</anchorfile>
      <anchor>abea2eb008ea370b39b8cc110c3a03674</anchor>
      <arglist>(std::ostream &amp;out, iv::float3 const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>glm__alias_8hpp.html</anchorfile>
      <anchor>a20892cf28a4c58407258e644a81de544</anchor>
      <arglist>(std::ostream &amp;out, iv::float4 const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>glm__alias_8hpp.html</anchorfile>
      <anchor>a0d0419eb28a9f9ba7a32d98744def4bb</anchor>
      <arglist>(std::ostream &amp;out, iv::bool2 const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>glm__alias_8hpp.html</anchorfile>
      <anchor>acb919d3a590979ebd09c4c592b10badd</anchor>
      <arglist>(std::ostream &amp;out, iv::bool3 const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>glm__alias_8hpp.html</anchorfile>
      <anchor>a48c790e708c37a9849ee2ceaab947941</anchor>
      <arglist>(std::ostream &amp;out, iv::uchar4 const &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hash.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>hash_8hpp.html</filename>
    <includes id="glm__alias_8hpp" name="glm_alias.hpp" local="yes" imported="no">glm_alias.hpp</includes>
    <class kind="struct">iv::hash</class>
    <class kind="struct">iv::hash</class>
    <class kind="struct">iv::hash&lt; Enum, typename std::enable_if&lt; std::is_enum&lt; Enum &gt;::value &gt;::type &gt;</class>
    <class kind="struct">iv::priv::HashValueImpl</class>
    <class kind="struct">iv::priv::HashValueImpl&lt; Tuple, 0 &gt;</class>
    <class kind="struct">iv::hash&lt; std::tuple&lt; TupleTypes... &gt; &gt;</class>
    <class kind="struct">iv::hash&lt; std::pair&lt; First, Second &gt; &gt;</class>
    <class kind="struct">iv::hash&lt; iv::int2 &gt;</class>
    <class kind="struct">iv::hash&lt; iv::int3 &gt;</class>
    <namespace>iv</namespace>
    <namespace>iv::priv</namespace>
    <member kind="function">
      <type>void</type>
      <name>hash_combine</name>
      <anchorfile>namespaceiv_1_1priv.html</anchorfile>
      <anchor>a79843871a5f96a8dc59e83157b0ce8d7</anchor>
      <arglist>(std::size_t &amp;seed, T const &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Input.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>Input_8cpp.html</filename>
    <includes id="Input_8hpp" name="Input.hpp" local="yes" imported="no">Input.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Input.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>Input_8hpp.html</filename>
    <includes id="glm__alias_8hpp" name="glm_alias.hpp" local="yes" imported="no">glm_alias.hpp</includes>
    <includes id="hash_8hpp" name="hash.hpp" local="yes" imported="no">hash.hpp</includes>
    <includes id="StringIO__Table_8hpp" name="StringIO_Table.hpp" local="yes" imported="no">StringIO_Table.hpp</includes>
    <class kind="class">iv::Input</class>
    <class kind="class">iv::InputSource</class>
    <class kind="struct">iv::StringIO&lt; Input::Key &gt;</class>
    <class kind="struct">iv::StringIO&lt; Input::Type &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Interpolator.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>Interpolator_8hpp.html</filename>
    <includes id="glm__alias_8hpp" name="glm_alias.hpp" local="yes" imported="no">glm_alias.hpp</includes>
    <includes id="math_8hpp" name="math.hpp" local="yes" imported="no">math.hpp</includes>
    <includes id="utils_8hpp" name="utils.hpp" local="yes" imported="no">utils.hpp</includes>
    <class kind="struct">iv::interpolator::to_void</class>
    <class kind="struct">iv::interpolator::always_false</class>
    <class kind="struct">iv::has_interpolate</class>
    <class kind="struct">iv::has_interpolate&lt; T, typename interpolator::to_void&lt; typename T::interpolate &gt;::type &gt;</class>
    <class kind="struct">iv::Interpolator</class>
    <class kind="struct">iv::Interpolator&lt; std::optional&lt; T &gt; &gt;</class>
    <class kind="struct">iv::Interpolator&lt; Float, std::enable_if_t&lt; std::is_floating_point&lt; Float &gt;::value &gt; &gt;</class>
    <class kind="struct">iv::Interpolator&lt; Int, std::enable_if_t&lt; std::is_integral&lt; Int &gt;::value &gt; &gt;</class>
    <class kind="struct">iv::Interpolator&lt; std::string &gt;</class>
    <namespace>iv</namespace>
    <namespace>iv::interpolator</namespace>
    <member kind="typedef">
      <type>float</type>
      <name>Interpolator_float</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a5f99ae750b3d67d40059494ff1beb183</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LogId.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>LogId_8cpp.html</filename>
    <includes id="LogId_8hpp" name="LogId.hpp" local="yes" imported="no">LogId.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LogId.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>LogId_8hpp.html</filename>
    <includes id="RuntimeId_8hpp" name="RuntimeId.hpp" local="yes" imported="no">RuntimeId.hpp</includes>
    <class kind="class">iv::LogId</class>
    <class kind="struct">std::hash&lt; iv::LogId &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LogTrace.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>LogTrace_8cpp.html</filename>
    <includes id="LogTrace_8hpp" name="LogTrace.hpp" local="yes" imported="no">LogTrace.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LogTrace.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>LogTrace_8hpp.html</filename>
    <class kind="class">iv::LogTrace</class>
    <class kind="class">iv::LambdaLogTrace</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>math.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>math_8hpp.html</filename>
    <namespace>iv</namespace>
    <member kind="function">
      <type>Float</type>
      <name>mix_max</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a930f7f418c6303b848f49b571fa09315</anchor>
      <arglist>(Float from, Float to, Float maxDist, std::enable_if_t&lt; std::is_floating_point&lt; Float &gt;::value, std::nullptr_t &gt;=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>abs</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a723118863d8fcb5e642264ef17462a12</anchor>
      <arglist>(Float val)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>clamp</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ae085d7355b8149e894faac76ae1101cc</anchor>
      <arglist>(Float val, Float min, Float max)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multiline_ostream.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>multiline__ostream_8cpp.html</filename>
    <includes id="multiline__ostream_8hpp" name="multiline_ostream.hpp" local="yes" imported="no">multiline_ostream.hpp</includes>
    <includes id="utils_8hpp" name="utils.hpp" local="yes" imported="no">utils.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>multiline_ostream.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>multiline__ostream_8hpp.html</filename>
    <class kind="class">iv::multiline_ostream_streambuf</class>
    <class kind="class">iv::multiline_ostream</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>RuntimeId.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>RuntimeId_8cpp.html</filename>
    <includes id="RuntimeId_8hpp" name="RuntimeId.hpp" local="yes" imported="no">RuntimeId.hpp</includes>
    <includes id="static__warning_8hpp" name="static_warning.hpp" local="yes" imported="no">static_warning.hpp</includes>
    <includes id="Context_8hpp" name="Context.hpp" local="yes" imported="no">Context.hpp</includes>
    <includes id="SS_8hpp" name="SS.hpp" local="yes" imported="no">SS.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::runtime_id</namespace>
    <member kind="function">
      <type>void</type>
      <name>RuntimeId_WarningIdDoesNotExist</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a7fee75405fb956d42d388e33090c8574</anchor>
      <arglist>(Context *context, char const *type_name, char const *persistent_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RuntimeId.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>RuntimeId_8hpp.html</filename>
    <includes id="static__warning_8hpp" name="static_warning.hpp" local="yes" imported="no">static_warning.hpp</includes>
    <includes id="hash_8hpp" name="hash.hpp" local="yes" imported="no">hash.hpp</includes>
    <includes id="RuntimeId_8inl" name="RuntimeId.inl" local="yes" imported="no">RuntimeId.inl</includes>
    <class kind="class">iv::runtime_id::Dictionary</class>
    <class kind="struct">iv::RuntimeIdDictionary</class>
    <class kind="class">iv::RuntimeId</class>
    <class kind="struct">iv::hash&lt; Me, std::enable_if_t&lt; std::is_base_of&lt; iv::RuntimeId&lt; Me &gt;, Me &gt;::value &gt; &gt;</class>
    <namespace>iv</namespace>
    <namespace>iv::runtime_id</namespace>
    <member kind="function">
      <type>void</type>
      <name>RuntimeId_WarningIdDoesNotExist</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a7fee75405fb956d42d388e33090c8574</anchor>
      <arglist>(Context *context, char const *type_name, char const *persistent_name)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>RuntimeId_8hpp.html</anchorfile>
      <anchor>a746423bcbe215033eaffade0ae4c06fd</anchor>
      <arglist>(std::ostream &amp;out, iv::RuntimeId&lt; Me &gt; const &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RuntimeId.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>RuntimeId_8inl.html</filename>
    <namespace>iv</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a9f224a1841a18e21587f4d103a8fcefa</anchor>
      <arglist>(std::ostream &amp;out, RuntimeId&lt; Me &gt; const &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sig_div.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>sig__div_8hpp.html</filename>
    <includes id="glm__alias_8hpp" name="glm_alias.hpp" local="yes" imported="no">glm_alias.hpp</includes>
    <namespace>iv</namespace>
    <member kind="function">
      <type>int</type>
      <name>sig_div</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a6d42d0e6cfc4995cdf6ab45471ab99a3</anchor>
      <arglist>(int a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>sig_div</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ab9f6c753650f03c0c43267d7e85d0d95</anchor>
      <arglist>(int2 a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sig_mul</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a6742262f599b36b029c2a2fc3c6b2a15</anchor>
      <arglist>(int a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>sig_mul</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a8417c1741f7d34505aa7994b2dc50e2f</anchor>
      <arglist>(int2 a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sig_mod</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a6ddab1d3e060f04f83ab64399fcb18ec</anchor>
      <arglist>(int a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>sig_mod</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a15d1ecb01768e2ee92606b146cb36300</anchor>
      <arglist>(int2 a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>sig_fmod</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ad26df1a9e6fbed1250f736f79dcd05f8</anchor>
      <arglist>(float val, float mod)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SrcInfo.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>SrcInfo_8hpp.html</filename>
    <class kind="struct">iv::SrcInfo</class>
    <namespace>iv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SRC_INFO</name>
      <anchorfile>SrcInfo_8hpp.html</anchorfile>
      <anchor>a7fb2958639116edaa9531cc293c6da31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SS.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>SS_8cpp.html</filename>
    <includes id="SS_8hpp" name="SS.hpp" local="yes" imported="no">SS.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SS.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>SS_8hpp.html</filename>
    <class kind="class">iv::SS</class>
    <class kind="struct">iv::SS::str</class>
    <class kind="struct">iv::SS::c_str</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>static_warning.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>static__warning_8cpp.html</filename>
    <includes id="static__warning_8hpp" name="static_warning.hpp" local="yes" imported="no">static_warning.hpp</includes>
    <includes id="TextOutput_8hpp" name="TextOutput.hpp" local="yes" imported="no">TextOutput.hpp</includes>
    <namespace>iv</namespace>
    <member kind="function">
      <type>void</type>
      <name>startup_warning</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a8f5c3d2dfd3207174c7b0448f2ecafb5</anchor>
      <arglist>(SrcInfo info, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runtime_warning</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a22c23c34efd7d82a015cfe08803c8620</anchor>
      <arglist>(SrcInfo info, const char *message)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>static_warning.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>static__warning_8hpp.html</filename>
    <includes id="SrcInfo_8hpp" name="SrcInfo.hpp" local="yes" imported="no">SrcInfo.hpp</includes>
    <namespace>iv</namespace>
    <member kind="function">
      <type>void</type>
      <name>startup_warning</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a8f5c3d2dfd3207174c7b0448f2ecafb5</anchor>
      <arglist>(SrcInfo info, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runtime_warning</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a22c23c34efd7d82a015cfe08803c8620</anchor>
      <arglist>(SrcInfo info, const char *message)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StringIO.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>StringIO_8hpp.html</filename>
    <class kind="struct">iv::StringIO</class>
    <namespace>iv</namespace>
    <member kind="function">
      <type>Type</type>
      <name>StringIO_Read</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a46ed99d6e7f74d7fce11ad2f13fd40c0</anchor>
      <arglist>(const char *source, Context const *context)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>StringIO_Write</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a70ec6158a5ff87c1c16c6539a9421ace</anchor>
      <arglist>(char const *const &amp;value, Context const *context)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>StringIO_Write</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a1725b12ad1407a0bda914eaa8eeb8376</anchor>
      <arglist>(Type const &amp;value, Context const *context)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StringIO_defs.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>StringIO__defs_8hpp.html</filename>
    <includes id="StringIO_8hpp" name="StringIO.hpp" local="yes" imported="no">StringIO.hpp</includes>
    <includes id="RuntimeId_8hpp" name="RuntimeId.hpp" local="yes" imported="no">RuntimeId.hpp</includes>
    <includes id="Context_8hpp" name="Context.hpp" local="yes" imported="no">Context.hpp</includes>
    <includes id="SS_8hpp" name="SS.hpp" local="yes" imported="no">SS.hpp</includes>
    <includes id="StringIOIndex_8hpp" name="StringIOIndex.hpp" local="yes" imported="no">StringIOIndex.hpp</includes>
    <class kind="struct">iv::StringIO</class>
    <class kind="struct">iv::StringIO&lt; bool &gt;</class>
    <class kind="struct">iv::StringIO&lt; std::string &gt;</class>
    <class kind="struct">iv::StringIO&lt; const char * &gt;</class>
    <class kind="struct">iv::StringIO&lt; T * &gt;</class>
    <class kind="struct">iv::StringIO&lt; std::nullptr_t &gt;</class>
    <class kind="struct">iv::StringIO&lt; std::optional&lt; T &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; std::pair&lt; T, U &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; Float, std::enable_if_t&lt; std::is_floating_point&lt; Float &gt;::value &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; TypedRuntimeId, std::enable_if_t&lt; std::is_base_of&lt; RuntimeId&lt; TypedRuntimeId &gt;, TypedRuntimeId &gt;::value &gt; &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StringIO_Table.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>StringIO__Table_8hpp.html</filename>
    <includes id="StringIO_8hpp" name="StringIO.hpp" local="yes" imported="no">StringIO.hpp</includes>
    <includes id="SS_8hpp" name="SS.hpp" local="yes" imported="no">SS.hpp</includes>
    <includes id="Context_8hpp" name="Context.hpp" local="yes" imported="no">Context.hpp</includes>
    <class kind="struct">iv::StringIO_Table</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StringIOIndex.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>StringIOIndex_8cpp.html</filename>
    <includes id="StringIOIndex_8hpp" name="StringIOIndex.hpp" local="yes" imported="no">StringIOIndex.hpp</includes>
    <includes id="Context_8hpp" name="Context.hpp" local="yes" imported="no">Context.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StringIOIndex.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>StringIOIndex_8hpp.html</filename>
    <includes id="StringIO_8hpp" name="StringIO.hpp" local="yes" imported="no">StringIO.hpp</includes>
    <includes id="StringIOIndex_8inl" name="StringIOIndex.inl" local="yes" imported="no">StringIOIndex.inl</includes>
    <class kind="struct">iv::StringIOIndex</class>
    <class kind="struct">iv::StringIO&lt; std::any &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StringIOIndex.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>StringIOIndex_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TextOutput.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>TextOutput_8cpp.html</filename>
    <includes id="TextOutput_8hpp" name="TextOutput.hpp" local="yes" imported="no">TextOutput.hpp</includes>
    <namespace>iv</namespace>
    <member kind="variable">
      <type>TextOutput_ostream</type>
      <name>TextOutput</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a54ba6e20125e6935b5a79368ecb16198</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TextOutput.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>TextOutput_8hpp.html</filename>
    <class kind="class">iv::TextOutput_streambuf</class>
    <class kind="class">iv::TextOutput_ostream</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>utils.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>utils_8cpp.html</filename>
    <includes id="utils_8hpp" name="utils.hpp" local="yes" imported="no">utils.hpp</includes>
    <namespace>iv</namespace>
    <member kind="function">
      <type>size_t</type>
      <name>utf8_size</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>abe6dc20243c43fef124f0f9fe11de8f5</anchor>
      <arglist>(std::string const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8_size</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a8d6c09f59d2a557cead50f5635c0276e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>utf8_is_first_byte</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a4424a74275a14c49c689ce0e57f48cdb</anchor>
      <arglist>(char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_explode</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>af2784fb7664f7dcaa7ac64be29de950d</anchor>
      <arglist>(std::string const &amp;s, char delim, std::vector&lt; std::string &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_trim</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aa68b3822f3bc79b92a4363dd510c3d2a</anchor>
      <arglist>(std::string const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_ltrim</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a66efc581a274831108d85b7f2cc3e1d2</anchor>
      <arglist>(std::string const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_rtrim</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a39f0df55e3928b1a7f91375bec27dfe2</anchor>
      <arglist>(std::string const &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utils.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>utils_8hpp.html</filename>
    <class kind="struct">iv::reversed</class>
    <namespace>iv</namespace>
    <member kind="function">
      <type>size_t</type>
      <name>utf8_size</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a8d6c09f59d2a557cead50f5635c0276e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8_size</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>abe6dc20243c43fef124f0f9fe11de8f5</anchor>
      <arglist>(std::string const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>utf8_is_first_byte</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a4424a74275a14c49c689ce0e57f48cdb</anchor>
      <arglist>(char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_explode</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>af2784fb7664f7dcaa7ac64be29de950d</anchor>
      <arglist>(std::string const &amp;s, char delim, std::vector&lt; std::string &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_trim</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aa68b3822f3bc79b92a4363dd510c3d2a</anchor>
      <arglist>(std::string const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_ltrim</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a66efc581a274831108d85b7f2cc3e1d2</anchor>
      <arglist>(std::string const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_rtrim</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a39f0df55e3928b1a7f91375bec27dfe2</anchor>
      <arglist>(std::string const &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>valgrind.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>valgrind_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>IV_MEMCHECK</name>
      <anchorfile>valgrind_8hpp.html</anchorfile>
      <anchor>a68978655c1cdb6557b855a7eab4eab66</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IV_NULLCHECK</name>
      <anchorfile>valgrind_8hpp.html</anchorfile>
      <anchor>a098406be2bd9b8bcfb2174b0feb950fc</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IV_NullcheckFn</name>
      <anchorfile>valgrind_8hpp.html</anchorfile>
      <anchor>aa560a84f1d6ca202ff04c4a32e2fa87b</anchor>
      <arglist>(void *x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>volatile_set.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>volatile__set_8hpp.html</filename>
    <includes id="volatile__set_8inl" name="volatile_set.inl" local="yes" imported="no">volatile_set.inl</includes>
    <class kind="class">iv::volatile_set</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>volatile_set.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Basics/</path>
    <filename>volatile__set_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DebugView.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>DebugView_8cpp.html</filename>
    <includes id="DebugView_8hpp" name="DebugView.hpp" local="yes" imported="no">DebugView.hpp</includes>
    <includes id="ClientMarker_8hpp" name="ClientMarker.hpp" local="yes" imported="no">../Instancing/ClientMarker.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DebugView.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>DebugView_8hpp.html</filename>
    <includes id="Context_8hpp" name="Context.hpp" local="yes" imported="no">../Basics/Context.hpp</includes>
    <class kind="class">iv::DebugView</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Ostream_TextDebugView.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>Ostream__TextDebugView_8cpp.html</filename>
    <includes id="Ostream__TextDebugView_8hpp" name="Ostream_TextDebugView.hpp" local="yes" imported="no">Ostream_TextDebugView.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Ostream_TextDebugView.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>Ostream__TextDebugView_8hpp.html</filename>
    <includes id="DebugView_8hpp" name="DebugView.hpp" local="yes" imported="no">DebugView.hpp</includes>
    <includes id="TextDebugView_8hpp" name="TextDebugView.hpp" local="yes" imported="no">TextDebugView.hpp</includes>
    <class kind="class">iv::Ostream_TextDebugView</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TableDebugView.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>TableDebugView_8cpp.html</filename>
    <includes id="TableDebugView_8hpp" name="TableDebugView.hpp" local="yes" imported="no">TableDebugView.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::table_debug_context</namespace>
  </compound>
  <compound kind="file">
    <name>TableDebugView.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>TableDebugView_8hpp.html</filename>
    <includes id="DebugView_8hpp" name="DebugView.hpp" local="yes" imported="no">DebugView.hpp</includes>
    <includes id="RuntimeId_8hpp" name="RuntimeId.hpp" local="yes" imported="no">../Basics/RuntimeId.hpp</includes>
    <includes id="StringIOIndex_8hpp" name="StringIOIndex.hpp" local="yes" imported="no">../Basics/StringIOIndex.hpp</includes>
    <includes id="instance__ptr_8hpp" name="instance_ptr.hpp" local="yes" imported="no">../Instancing/instance_ptr.hpp</includes>
    <includes id="TableDebugView_8inl" name="TableDebugView.inl" local="yes" imported="no">TableDebugView.inl</includes>
    <class kind="class">iv::TableId</class>
    <class kind="struct">std::hash&lt; iv::TableId &gt;</class>
    <class kind="class">iv::table_debug_context::ColumnHandle</class>
    <class kind="class">iv::table_debug_context::RowHandle</class>
    <class kind="class">iv::table_debug_context::TableHandle</class>
    <class kind="struct">iv::table_debug_context::HintData</class>
    <class kind="struct">iv::table_debug_context::ColumnData</class>
    <class kind="struct">iv::table_debug_context::RowData</class>
    <class kind="struct">iv::table_debug_context::TableData</class>
    <class kind="class">iv::TableDebugView</class>
    <namespace>iv</namespace>
    <namespace>iv::table_debug_context</namespace>
  </compound>
  <compound kind="file">
    <name>TableDebugView.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>TableDebugView_8inl.html</filename>
    <namespace>iv</namespace>
    <namespace>iv::table_debug_context</namespace>
  </compound>
  <compound kind="file">
    <name>TextDebugView.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>TextDebugView_8cpp.html</filename>
    <includes id="TextDebugView_8hpp" name="TextDebugView.hpp" local="yes" imported="no">TextDebugView.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TextDebugView.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>TextDebugView_8hpp.html</filename>
    <includes id="DebugView_8hpp" name="DebugView.hpp" local="yes" imported="no">DebugView.hpp</includes>
    <class kind="class">iv::TextDebugView</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ToText_TableDebugView.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>ToText__TableDebugView_8cpp.html</filename>
    <includes id="ToText__TableDebugView_8hpp" name="ToText_TableDebugView.hpp" local="yes" imported="no">ToText_TableDebugView.hpp</includes>
    <includes id="TextDebugView_8hpp" name="TextDebugView.hpp" local="yes" imported="no">TextDebugView.hpp</includes>
    <includes id="StringIOIndex_8hpp" name="StringIOIndex.hpp" local="yes" imported="no">../Basics/StringIOIndex.hpp</includes>
    <includes id="utils_8hpp" name="utils.hpp" local="yes" imported="no">../Basics/utils.hpp</includes>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">../Instancing/Instance.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ToText_TableDebugView.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>ToText__TableDebugView_8hpp.html</filename>
    <includes id="TableDebugView_8hpp" name="TableDebugView.hpp" local="yes" imported="no">TableDebugView.hpp</includes>
    <includes id="TextDebugView_8hpp" name="TextDebugView.hpp" local="yes" imported="no">TextDebugView.hpp</includes>
    <class kind="class">iv::ToText_TableDebugView</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TreeDebugView.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>TreeDebugView_8cpp.html</filename>
    <includes id="TreeDebugView_8hpp" name="TreeDebugView.hpp" local="yes" imported="no">TreeDebugView.hpp</includes>
    <includes id="utils_8hpp" name="utils.hpp" local="yes" imported="no">../Basics/utils.hpp</includes>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">../Instancing/Instance.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TreeDebugView.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/DebugView/</path>
    <filename>TreeDebugView_8hpp.html</filename>
    <includes id="TextDebugView_8hpp" name="TextDebugView.hpp" local="yes" imported="no">TextDebugView.hpp</includes>
    <class kind="class">iv::TreeDebugView</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Defs.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/</path>
    <filename>ivorium__core_2Defs_8cpp.html</filename>
    <includes id="ivorium__core_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::Defs</namespace>
    <namespace>iv::Defs::Log</namespace>
    <member kind="variable">
      <type>const LogId</type>
      <name>Warning</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a3fa9c65dd953dc3feb888810884be79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>UserWarning</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a88f52a65db93fac0b423cffa1d502583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Performance</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a2568b270a80c875400dd5ee452f68c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Lex</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a5eeb6330fe18f7c91fa7431f6e0f9b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>NewFrame</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a30115ffd0abe89880500f30781eebbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ConsistencyChecks</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>ab6d8264d27252cce33b81d2804e49af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ConsistencyChecks_Frame</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>af6b2f28f72841fc5f9f695bb018094e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Defs.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/</path>
    <filename>ivorium__game_2Defs_8cpp.html</filename>
    <includes id="ivorium__game_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::Defs</namespace>
    <namespace>iv::Defs::Log</namespace>
    <member kind="variable">
      <type>const iv::LogId</type>
      <name>StartupDump</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a17a58f35ef8370dfbf92e15c1d793c82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Defs.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/</path>
    <filename>ivorium__graphics_2Defs_8cpp.html</filename>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::Defs</namespace>
    <namespace>iv::Defs::Log</namespace>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_Activations</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a6c2a3fb23d5afb6da8062e52a04fe8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_SystemUpdate</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a339aac53de6e27d9f7b81be8469a15ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_NodeUpdate</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>aed097891cde24b5911c76a692e45f894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_ConnectorUpdate</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>af8281d0a8192dfff4322de19f2fafb48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_Events</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a9cc4c23992e7ff3ad30851f1342b7c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_Summary</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>ad4376d18f7becb31326ab04d3d989138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Render</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a144572a12f6d3acbac71ae3b53a18fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>TransformFeedback</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>aa546f6ed77ec6842cf92eafb182696b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementRefreshSummary</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a6b6da8079c693e1ac9a56e4b67827125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementRenderSummary</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a85bcf3baa6102459ddfebe1be49a5e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementFirstPass</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a76738d690909494ff75b3bedec2c913a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementSecondPass</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>ae29d737d53533249b70472046bf9b993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementRenderPass</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>af7d581535475ea5fcc3ff7293cc21ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementFirstPass_Refresh</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>aeb98203093b44964164caef7d73e9f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Text_Verbose</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>ade1a0c9f148361d55cc38f241fec48b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>FixedOrderCamera</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a9812658648e65e6a7f843749a75dd032</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>TextureState</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a5371e253957d5445a8a40c0c1d8708ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Defs.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/</path>
    <filename>ivorium__systems_2Defs_8cpp.html</filename>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::Defs</namespace>
    <namespace>iv::Defs::Log</namespace>
    <namespace>iv::Defs::Time</namespace>
    <member kind="variable">
      <type>const LogId</type>
      <name>TimeUpdates</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a9586aacc6f07a62f975ff36ee7b896e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>StreamResources</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a466ff8cb2d77502adb5a48fd404fa3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Input</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>ab272bfae0638d1c1faeaec16f5a9c333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>InputTree</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a22a50396186de555ba1420ad1b354336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>InputEvent</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a7013f4a285ba99757042d300dbfabce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Picking</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a618848d0f7dcd8e0c2e4cbac039d5891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>DelayedLoad</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a20ded2018621ead83fe02f51aedef225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TimeId</type>
      <name>Default</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Time.html</anchorfile>
      <anchor>ad7f7eff30162c7c57d61093ba809f80a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Defs.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>ivorium__UI_2Defs_8cpp.html</filename>
    <includes id="ivorium__UI_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::Defs</namespace>
    <namespace>iv::Defs::Style</namespace>
    <namespace>iv::Defs::Input</namespace>
    <member kind="variable">
      <type>const LumaStyleId</type>
      <name>Default</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Style.html</anchorfile>
      <anchor>abaabfa3e5dba9564290e6dba1301bb7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const InputId</type>
      <name>UI_Up</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Input.html</anchorfile>
      <anchor>a919dc663cbe93c26f0b565011e88b1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const InputId</type>
      <name>UI_Down</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Input.html</anchorfile>
      <anchor>a80de664afa2879173a2cfa403be0b903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const InputId</type>
      <name>UI_Left</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Input.html</anchorfile>
      <anchor>a27d172b1d4d846208c2cd44775efb101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const InputId</type>
      <name>UI_Right</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Input.html</anchorfile>
      <anchor>a7013fa5038bd46097adb8412a8b80d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const InputId</type>
      <name>UI_MousePrimary</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Input.html</anchorfile>
      <anchor>a946f3921f6bbf7feb41321ee8bdf5976</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Defs.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/</path>
    <filename>ivorium__core_2Defs_8hpp.html</filename>
    <includes id="LogId_8hpp" name="LogId.hpp" local="yes" imported="no">Basics/LogId.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::Defs</namespace>
    <namespace>iv::Defs::Log</namespace>
  </compound>
  <compound kind="file">
    <name>Defs.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/</path>
    <filename>ivorium__game_2Defs_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::Defs</namespace>
    <namespace>iv::Defs::Log</namespace>
  </compound>
  <compound kind="file">
    <name>Defs.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/</path>
    <filename>ivorium__graphics_2Defs_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::Defs</namespace>
    <namespace>iv::Defs::Log</namespace>
  </compound>
  <compound kind="file">
    <name>Defs.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/</path>
    <filename>ivorium__systems_2Defs_8hpp.html</filename>
    <includes id="TimeId_8hpp" name="TimeId.hpp" local="yes" imported="no">TimeSystem/TimeId.hpp</includes>
    <includes id="InputId_8hpp" name="InputId.hpp" local="yes" imported="no">InputSystem/InputBindingSystem/InputId.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::Defs</namespace>
    <namespace>iv::Defs::Log</namespace>
    <namespace>iv::Defs::Time</namespace>
  </compound>
  <compound kind="file">
    <name>Defs.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>ivorium__UI_2Defs_8hpp.html</filename>
    <includes id="LumaSystem_8hpp" name="LumaSystem.hpp" local="yes" imported="no">LumaSystem.hpp</includes>
    <namespace>iv</namespace>
    <namespace>iv::Defs</namespace>
    <namespace>iv::Defs::Style</namespace>
    <namespace>iv::Defs::Input</namespace>
  </compound>
  <compound kind="file">
    <name>client_ptr.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>client__ptr_8hpp.html</filename>
    <includes id="instance__ptr_8hpp" name="instance_ptr.hpp" local="yes" imported="no">instance_ptr.hpp</includes>
    <includes id="InstanceSystem_8hpp" name="InstanceSystem.hpp" local="yes" imported="no">InstanceSystem.hpp</includes>
    <includes id="client__ptr_8inl" name="client_ptr.inl" local="yes" imported="no">client_ptr.inl</includes>
    <class kind="class">iv::client_ptr</class>
    <class kind="class">iv::callback_client_ptr</class>
    <class kind="struct">std::hash&lt; iv::client_ptr&lt; TypedClient &gt; &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>client_ptr.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>client__ptr_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ClientMarker.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>ClientMarker_8cpp.html</filename>
    <includes id="ClientMarker_8hpp" name="ClientMarker.hpp" local="yes" imported="no">ClientMarker.hpp</includes>
    <includes id="DebugView_8hpp" name="DebugView.hpp" local="yes" imported="no">../DebugView/DebugView.hpp</includes>
    <includes id="TreeDebugView_8hpp" name="TreeDebugView.hpp" local="yes" imported="no">../DebugView/TreeDebugView.hpp</includes>
    <includes id="ToText__TableDebugView_8hpp" name="ToText_TableDebugView.hpp" local="yes" imported="no">../DebugView/ToText_TableDebugView.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ClientMarker.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>ClientMarker_8hpp.html</filename>
    <includes id="StringIO_8hpp" name="StringIO.hpp" local="yes" imported="no">../Basics/StringIO.hpp</includes>
    <includes id="multiline__ostream_8hpp" name="multiline_ostream.hpp" local="yes" imported="no">../Basics/multiline_ostream.hpp</includes>
    <includes id="LogId_8hpp" name="LogId.hpp" local="yes" imported="no">../Basics/LogId.hpp</includes>
    <includes id="TreeDebugView_8hpp" name="TreeDebugView.hpp" local="yes" imported="no">../DebugView/TreeDebugView.hpp</includes>
    <includes id="TableDebugView_8hpp" name="TableDebugView.hpp" local="yes" imported="no">../DebugView/TableDebugView.hpp</includes>
    <includes id="StringIO__defs_8hpp" name="StringIO_defs.hpp" local="yes" imported="no">../Basics/StringIO_defs.hpp</includes>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">Instance.hpp</includes>
    <includes id="ClientMarker_8inl" name="ClientMarker.inl" local="yes" imported="no">ClientMarker.inl</includes>
    <class kind="class">iv::ClientMarker</class>
    <class kind="struct">iv::ClientMarker::Status</class>
    <class kind="class">iv::ClientMarkerIds</class>
    <class kind="struct">iv::StringIO&lt; ClientMarker &gt;</class>
    <class kind="struct">iv::StringIO&lt; ClientMarker const * &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ClientMarker.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>ClientMarker_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DebugInstanceListener.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>DebugInstanceListener_8cpp.html</filename>
    <includes id="DebugInstanceListener_8hpp" name="DebugInstanceListener.hpp" local="yes" imported="no">DebugInstanceListener.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DebugInstanceListener.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>DebugInstanceListener_8hpp.html</filename>
    <includes id="ClientMarker_8hpp" name="ClientMarker.hpp" local="yes" imported="no">ClientMarker.hpp</includes>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">Instance.hpp</includes>
    <class kind="class">iv::DebugInstanceListener</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Heap.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>Heap_8cpp.html</filename>
    <includes id="Heap_8hpp" name="Heap.hpp" local="yes" imported="no">Heap.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Heap.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>Heap_8hpp.html</filename>
    <includes id="I_8hpp" name="I.hpp" local="yes" imported="no">I.hpp</includes>
    <includes id="static__warning_8hpp" name="static_warning.hpp" local="yes" imported="no">../Basics/static_warning.hpp</includes>
    <includes id="Heap_8inl" name="Heap.inl" local="yes" imported="no">Heap.inl</includes>
    <class kind="class">iv::Heap</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Heap.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>Heap_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>I.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>I_8hpp.html</filename>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">Instance.hpp</includes>
    <class kind="class">iv::I</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Instance.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>Instance_8cpp.html</filename>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">Instance.hpp</includes>
    <includes id="instance__ptr_8hpp" name="instance_ptr.hpp" local="yes" imported="no">instance_ptr.hpp</includes>
    <includes id="DebugInstanceListener_8hpp" name="DebugInstanceListener.hpp" local="yes" imported="no">DebugInstanceListener.hpp</includes>
    <includes id="SystemContainer_8hpp" name="SystemContainer.hpp" local="yes" imported="no">SystemContainer.hpp</includes>
    <includes id="TextDebugView_8hpp" name="TextDebugView.hpp" local="yes" imported="no">../DebugView/TextDebugView.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Instance.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>Instance_8hpp.html</filename>
    <includes id="LogId_8hpp" name="LogId.hpp" local="yes" imported="no">../Basics/LogId.hpp</includes>
    <includes id="SrcInfo_8hpp" name="SrcInfo.hpp" local="yes" imported="no">../Basics/SrcInfo.hpp</includes>
    <includes id="volatile__set_8hpp" name="volatile_set.hpp" local="yes" imported="no">../Basics/volatile_set.hpp</includes>
    <includes id="StringIO__defs_8hpp" name="StringIO_defs.hpp" local="yes" imported="no">../Basics/StringIO_defs.hpp</includes>
    <includes id="SystemContainer_8hpp" name="SystemContainer.hpp" local="yes" imported="no">SystemContainer.hpp</includes>
    <includes id="InstanceSystem_8hpp" name="InstanceSystem.hpp" local="yes" imported="no">InstanceSystem.hpp</includes>
    <includes id="ClientMarker_8hpp" name="ClientMarker.hpp" local="yes" imported="no">ClientMarker.hpp</includes>
    <includes id="Instance_8inl" name="Instance.inl" local="yes" imported="no">Instance.inl</includes>
    <class kind="class">iv::Instance</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Instance.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>Instance_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>instance_ptr.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>instance__ptr_8cpp.html</filename>
    <includes id="instance__ptr_8hpp" name="instance_ptr.hpp" local="yes" imported="no">instance_ptr.hpp</includes>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">Instance.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>instance_ptr.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>instance__ptr_8hpp.html</filename>
    <class kind="class">iv::instance_ptr_interface</class>
    <class kind="class">iv::instance_ptr</class>
    <class kind="class">iv::callback_instance_ptr</class>
    <class kind="struct">std::hash&lt; iv::instance_ptr &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InstanceSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>InstanceSystem_8cpp.html</filename>
    <includes id="InstanceSystem_8hpp" name="InstanceSystem.hpp" local="yes" imported="no">InstanceSystem.hpp</includes>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">Instance.hpp</includes>
    <includes id="instance__ptr_8hpp" name="instance_ptr.hpp" local="yes" imported="no">instance_ptr.hpp</includes>
    <includes id="TextDebugView_8hpp" name="TextDebugView.hpp" local="yes" imported="no">../DebugView/TextDebugView.hpp</includes>
    <includes id="TreeDebugView_8hpp" name="TreeDebugView.hpp" local="yes" imported="no">../DebugView/TreeDebugView.hpp</includes>
    <includes id="DebugInstanceListener_8hpp" name="DebugInstanceListener.hpp" local="yes" imported="no">DebugInstanceListener.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InstanceSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>InstanceSystem_8hpp.html</filename>
    <includes id="LogId_8hpp" name="LogId.hpp" local="yes" imported="no">../Basics/LogId.hpp</includes>
    <includes id="volatile__set_8hpp" name="volatile_set.hpp" local="yes" imported="no">../Basics/volatile_set.hpp</includes>
    <includes id="SystemContainer_8hpp" name="SystemContainer.hpp" local="yes" imported="no">SystemContainer.hpp</includes>
    <includes id="TreeDebugView_8hpp" name="TreeDebugView.hpp" local="yes" imported="no">../DebugView/TreeDebugView.hpp</includes>
    <includes id="TableDebugView_8hpp" name="TableDebugView.hpp" local="yes" imported="no">../DebugView/TableDebugView.hpp</includes>
    <includes id="SystemContainer_8inl" name="SystemContainer.inl" local="yes" imported="no">SystemContainer.inl</includes>
    <class kind="class">iv::InstanceSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SystemContainer.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>SystemContainer_8cpp.html</filename>
    <includes id="SystemContainer_8hpp" name="SystemContainer.hpp" local="yes" imported="no">SystemContainer.hpp</includes>
    <includes id="TextOutput_8hpp" name="TextOutput.hpp" local="yes" imported="no">../Basics/TextOutput.hpp</includes>
    <includes id="utils_8hpp" name="utils.hpp" local="yes" imported="no">../Basics/utils.hpp</includes>
    <includes id="InstanceSystem_8hpp" name="InstanceSystem.hpp" local="yes" imported="no">InstanceSystem.hpp</includes>
    <includes id="ivorium__core_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <includes id="StringIO__defs_8hpp" name="StringIO_defs.hpp" local="yes" imported="no">../Basics/StringIO_defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SystemContainer.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>SystemContainer_8hpp.html</filename>
    <includes id="TextDebugView_8hpp" name="TextDebugView.hpp" local="yes" imported="no">../DebugView/TextDebugView.hpp</includes>
    <includes id="SrcInfo_8hpp" name="SrcInfo.hpp" local="yes" imported="no">../Basics/SrcInfo.hpp</includes>
    <includes id="static__warning_8hpp" name="static_warning.hpp" local="yes" imported="no">../Basics/static_warning.hpp</includes>
    <class kind="class">iv::System</class>
    <class kind="class">iv::SystemContainer</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SystemContainer.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Instancing/</path>
    <filename>SystemContainer_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ivorium_core.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/</path>
    <filename>ivorium__core_8hpp.html</filename>
    <includes id="I_8hpp" name="I.hpp" local="yes" imported="no">Instancing/I.hpp</includes>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">Instancing/Instance.hpp</includes>
    <includes id="InstanceSystem_8hpp" name="InstanceSystem.hpp" local="yes" imported="no">Instancing/InstanceSystem.hpp</includes>
    <includes id="client__ptr_8hpp" name="client_ptr.hpp" local="yes" imported="no">Instancing/client_ptr.hpp</includes>
    <includes id="Heap_8hpp" name="Heap.hpp" local="yes" imported="no">Instancing/Heap.hpp</includes>
    <includes id="instance__ptr_8hpp" name="instance_ptr.hpp" local="yes" imported="no">Instancing/instance_ptr.hpp</includes>
    <includes id="SystemContainer_8hpp" name="SystemContainer.hpp" local="yes" imported="no">Instancing/SystemContainer.hpp</includes>
    <includes id="DebugInstanceListener_8hpp" name="DebugInstanceListener.hpp" local="yes" imported="no">Instancing/DebugInstanceListener.hpp</includes>
    <includes id="ClientMarker_8hpp" name="ClientMarker.hpp" local="yes" imported="no">Instancing/ClientMarker.hpp</includes>
    <includes id="TextDebugView_8hpp" name="TextDebugView.hpp" local="yes" imported="no">DebugView/TextDebugView.hpp</includes>
    <includes id="TableDebugView_8hpp" name="TableDebugView.hpp" local="yes" imported="no">DebugView/TableDebugView.hpp</includes>
    <includes id="Ostream__TextDebugView_8hpp" name="Ostream_TextDebugView.hpp" local="yes" imported="no">DebugView/Ostream_TextDebugView.hpp</includes>
    <includes id="ToText__TableDebugView_8hpp" name="ToText_TableDebugView.hpp" local="yes" imported="no">DebugView/ToText_TableDebugView.hpp</includes>
    <includes id="TreeDebugView_8hpp" name="TreeDebugView.hpp" local="yes" imported="no">DebugView/TreeDebugView.hpp</includes>
    <includes id="DebugView_8hpp" name="DebugView.hpp" local="yes" imported="no">DebugView/DebugView.hpp</includes>
    <includes id="JsonLex_8hpp" name="JsonLex.hpp" local="yes" imported="no">Parsing/JsonLex.hpp</includes>
    <includes id="Pratt_8hpp" name="Pratt.hpp" local="yes" imported="no">Parsing/Pratt.hpp</includes>
    <includes id="Lex_8hpp" name="Lex.hpp" local="yes" imported="no">Parsing/Lex.hpp</includes>
    <includes id="ivorium__core_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <includes id="utils_8hpp" name="utils.hpp" local="yes" imported="no">Basics/utils.hpp</includes>
    <includes id="static__warning_8hpp" name="static_warning.hpp" local="yes" imported="no">Basics/static_warning.hpp</includes>
    <includes id="valgrind_8hpp" name="valgrind.hpp" local="yes" imported="no">Basics/valgrind.hpp</includes>
    <includes id="LogTrace_8hpp" name="LogTrace.hpp" local="yes" imported="no">Basics/LogTrace.hpp</includes>
    <includes id="multiline__ostream_8hpp" name="multiline_ostream.hpp" local="yes" imported="no">Basics/multiline_ostream.hpp</includes>
    <includes id="Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">Basics/Interpolator.hpp</includes>
    <includes id="RuntimeId_8hpp" name="RuntimeId.hpp" local="yes" imported="no">Basics/RuntimeId.hpp</includes>
    <includes id="SrcInfo_8hpp" name="SrcInfo.hpp" local="yes" imported="no">Basics/SrcInfo.hpp</includes>
    <includes id="TextOutput_8hpp" name="TextOutput.hpp" local="yes" imported="no">Basics/TextOutput.hpp</includes>
    <includes id="StringIO__defs_8hpp" name="StringIO_defs.hpp" local="yes" imported="no">Basics/StringIO_defs.hpp</includes>
    <includes id="volatile__set_8hpp" name="volatile_set.hpp" local="yes" imported="no">Basics/volatile_set.hpp</includes>
    <includes id="Context_8hpp" name="Context.hpp" local="yes" imported="no">Basics/Context.hpp</includes>
    <includes id="sig__div_8hpp" name="sig_div.hpp" local="yes" imported="no">Basics/sig_div.hpp</includes>
    <includes id="StringIOIndex_8hpp" name="StringIOIndex.hpp" local="yes" imported="no">Basics/StringIOIndex.hpp</includes>
    <includes id="LogId_8hpp" name="LogId.hpp" local="yes" imported="no">Basics/LogId.hpp</includes>
    <includes id="math_8hpp" name="math.hpp" local="yes" imported="no">Basics/math.hpp</includes>
    <includes id="StringIO__Table_8hpp" name="StringIO_Table.hpp" local="yes" imported="no">Basics/StringIO_Table.hpp</includes>
    <includes id="StringIO_8hpp" name="StringIO.hpp" local="yes" imported="no">Basics/StringIO.hpp</includes>
    <includes id="SS_8hpp" name="SS.hpp" local="yes" imported="no">Basics/SS.hpp</includes>
    <includes id="glm__alias_8hpp" name="glm_alias.hpp" local="yes" imported="no">Basics/glm_alias.hpp</includes>
    <includes id="Input_8hpp" name="Input.hpp" local="yes" imported="no">Basics/Input.hpp</includes>
    <includes id="hash_8hpp" name="hash.hpp" local="yes" imported="no">Basics/hash.hpp</includes>
    <includes id="FunctorField_8hpp" name="FunctorField.hpp" local="yes" imported="no">Attribute/Fields/FunctorField.hpp</includes>
    <includes id="FunctorActivatorField_8hpp" name="FunctorActivatorField.hpp" local="yes" imported="no">Attribute/Fields/FunctorActivatorField.hpp</includes>
    <includes id="PrivField_8hpp" name="PrivField.hpp" local="yes" imported="no">Attribute/Fields/PrivField.hpp</includes>
    <includes id="Attribute_8hpp" name="Attribute.hpp" local="yes" imported="no">Attribute/Attribute.hpp</includes>
    <includes id="Local__AEP_8hpp" name="Local_AEP.hpp" local="yes" imported="no">Attribute/Attributes/Local_AEP.hpp</includes>
    <includes id="PrivAttr_8hpp" name="PrivAttr.hpp" local="yes" imported="no">Attribute/Attributes/PrivAttr.hpp</includes>
    <includes id="PrivValAttr_8hpp" name="PrivValAttr.hpp" local="yes" imported="no">Attribute/Attributes/PrivValAttr.hpp</includes>
    <includes id="SharedAttr_8hpp" name="SharedAttr.hpp" local="yes" imported="no">Attribute/Attributes/SharedAttr.hpp</includes>
    <includes id="FunctorActivatorAttribute_8hpp" name="FunctorActivatorAttribute.hpp" local="yes" imported="no">Attribute/Attributes/FunctorActivatorAttribute.hpp</includes>
    <includes id="DirtyAttr_8hpp" name="DirtyAttr.hpp" local="yes" imported="no">Attribute/Attributes/DirtyAttr.hpp</includes>
    <includes id="MulAgg_8hpp" name="MulAgg.hpp" local="yes" imported="no">Attribute/Types/MulAgg.hpp</includes>
    <includes id="Activator_8hpp" name="Activator.hpp" local="yes" imported="no">Attribute/Types/Activator.hpp</includes>
    <includes id="SumAgg_8hpp" name="SumAgg.hpp" local="yes" imported="no">Attribute/Types/SumAgg.hpp</includes>
    <includes id="Field_8hpp" name="Field.hpp" local="yes" imported="no">Attribute/Field.hpp</includes>
  </compound>
  <compound kind="file">
    <name>JsonLex.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Parsing/</path>
    <filename>JsonLex_8cpp.html</filename>
    <includes id="JsonLex_8hpp" name="JsonLex.hpp" local="yes" imported="no">JsonLex.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>JsonLex.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Parsing/</path>
    <filename>JsonLex_8hpp.html</filename>
    <includes id="Lex_8hpp" name="Lex.hpp" local="yes" imported="no">Lex.hpp</includes>
    <class kind="class">iv::JsonLex</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Lex.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Parsing/</path>
    <filename>Lex_8cpp.html</filename>
    <includes id="Lex_8hpp" name="Lex.hpp" local="yes" imported="no">Lex.hpp</includes>
    <includes id="ivorium__core_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <includes id="SS_8hpp" name="SS.hpp" local="yes" imported="no">../Basics/SS.hpp</includes>
    <includes id="Instance_8hpp" name="Instance.hpp" local="yes" imported="no">../Instancing/Instance.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Lex.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Parsing/</path>
    <filename>Lex_8hpp.html</filename>
    <includes id="ClientMarker_8hpp" name="ClientMarker.hpp" local="yes" imported="no">../Instancing/ClientMarker.hpp</includes>
    <includes id="LogTrace_8hpp" name="LogTrace.hpp" local="yes" imported="no">../Basics/LogTrace.hpp</includes>
    <class kind="class">iv::Lex</class>
    <class kind="class">iv::Lex_LogTrace</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Pratt.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Parsing/</path>
    <filename>Pratt_8cpp.html</filename>
    <includes id="Pratt_8hpp" name="Pratt.hpp" local="yes" imported="no">Pratt.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Pratt.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_core/Parsing/</path>
    <filename>Pratt_8hpp.html</filename>
    <includes id="Lex_8hpp" name="Lex.hpp" local="yes" imported="no">Lex.hpp</includes>
    <class kind="class">iv::Pratt</class>
    <class kind="struct">iv::Pratt::Expression</class>
    <class kind="struct">iv::Pratt::Unary</class>
    <class kind="struct">iv::Pratt::Binary</class>
    <class kind="struct">iv::Pratt::Value</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleDiagnostics.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Debug/</path>
    <filename>SimpleDiagnostics_8cpp.html</filename>
    <includes id="SimpleDiagnostics_8hpp" name="SimpleDiagnostics.hpp" local="yes" imported="no">SimpleDiagnostics.hpp</includes>
    <includes id="ivorium__game_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleDiagnostics.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Debug/</path>
    <filename>SimpleDiagnostics_8hpp.html</filename>
    <includes id="SimpleLogger_8hpp" name="SimpleLogger.hpp" local="yes" imported="no">SimpleLogger.hpp</includes>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::SimpleDiagnostics</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleLogger.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Debug/</path>
    <filename>SimpleLogger_8cpp.html</filename>
    <includes id="SimpleLogger_8hpp" name="SimpleLogger.hpp" local="yes" imported="no">SimpleLogger.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleLogger.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Debug/</path>
    <filename>SimpleLogger_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::SimpleLogger</class>
    <class kind="struct">iv::StringIO&lt; SimpleLogger::Flags &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Game.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/</path>
    <filename>Game_8cpp.html</filename>
    <includes id="Game_8hpp" name="Game.hpp" local="yes" imported="no">Game.hpp</includes>
    <includes id="PlatformDefault__ResourceProvider_8hpp" name="PlatformDefault_ResourceProvider.hpp" local="yes" imported="no">Misc/PlatformDefault_ResourceProvider.hpp</includes>
    <includes id="DefaultBinder_8hpp" name="DefaultBinder.hpp" local="yes" imported="no">Misc/DefaultBinder.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <includes id="ivorium__UI_8hpp" name="ivorium_UI.hpp" local="no" imported="no">ivorium_UI/ivorium_UI.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Game.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/</path>
    <filename>Game_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <class kind="struct">iv::GameIdentity</class>
    <class kind="class">iv::Game</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ivorium_game.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/</path>
    <filename>ivorium__game_8hpp.html</filename>
    <includes id="Game_8hpp" name="Game.hpp" local="yes" imported="no">Game.hpp</includes>
    <includes id="DefaultBinder_8hpp" name="DefaultBinder.hpp" local="yes" imported="no">Misc/DefaultBinder.hpp</includes>
    <includes id="XcfInfo_8hpp" name="XcfInfo.hpp" local="yes" imported="no">Misc/XcfInfo.hpp</includes>
    <includes id="PlatformDefault__ResourceProvider_8hpp" name="PlatformDefault_ResourceProvider.hpp" local="yes" imported="no">Misc/PlatformDefault_ResourceProvider.hpp</includes>
    <includes id="AndroidAssetResourceProvider_8hpp" name="AndroidAssetResourceProvider.hpp" local="yes" imported="no">Misc/AndroidAssetResourceProvider.hpp</includes>
    <includes id="ivorium__game_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <includes id="SimpleLogger_8hpp" name="SimpleLogger.hpp" local="yes" imported="no">Debug/SimpleLogger.hpp</includes>
    <includes id="SimpleDiagnostics_8hpp" name="SimpleDiagnostics.hpp" local="yes" imported="no">Debug/SimpleDiagnostics.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AndroidAssetResourceProvider.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Misc/</path>
    <filename>AndroidAssetResourceProvider_8cpp.html</filename>
    <includes id="AndroidAssetResourceProvider_8hpp" name="AndroidAssetResourceProvider.hpp" local="yes" imported="no">AndroidAssetResourceProvider.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AndroidAssetResourceProvider.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Misc/</path>
    <filename>AndroidAssetResourceProvider_8hpp.html</filename>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <class kind="class">iv::AndroidAssetResourceProvider</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultBinder.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Misc/</path>
    <filename>DefaultBinder_8hpp.html</filename>
    <includes id="ivorium__UI_8hpp" name="ivorium_UI.hpp" local="no" imported="no">ivorium_UI/ivorium_UI.hpp</includes>
    <includes id="ivorium__game_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <class kind="class">iv::DefaultBinder</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>PlatformDefault_ResourceProvider.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Misc/</path>
    <filename>PlatformDefault__ResourceProvider_8cpp.html</filename>
    <includes id="PlatformDefault__ResourceProvider_8hpp" name="PlatformDefault_ResourceProvider.hpp" local="yes" imported="no">PlatformDefault_ResourceProvider.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>PlatformDefault_ResourceProvider.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Misc/</path>
    <filename>PlatformDefault__ResourceProvider_8hpp.html</filename>
    <includes id="AndroidAssetResourceProvider_8hpp" name="AndroidAssetResourceProvider.hpp" local="yes" imported="no">AndroidAssetResourceProvider.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <class kind="class">iv::PlatformDefault_ResourceProvider</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>XcfInfo.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Misc/</path>
    <filename>XcfInfo_8cpp.html</filename>
    <includes id="XcfInfo_8hpp" name="XcfInfo.hpp" local="yes" imported="no">XcfInfo.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>XcfInfo.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_game/Misc/</path>
    <filename>XcfInfo_8hpp.html</filename>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::XcfInfo_Resource</class>
    <class kind="class">iv::XcfInfo_Subprovider</class>
    <class kind="class">iv::XcfInfo</class>
    <class kind="struct">iv::XcfInfo::Layer</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>AnimConnector.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Animation/</path>
    <filename>AnimConnector_8cpp.html</filename>
    <includes id="AnimConnector_8hpp" name="AnimConnector.hpp" local="yes" imported="no">AnimConnector.hpp</includes>
    <includes id="AnimNode_8hpp" name="AnimNode.hpp" local="yes" imported="no">AnimNode.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>AnimConnector.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Animation/</path>
    <filename>AnimConnector_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::AnimNode</class>
    <class kind="class">iv::AnimConnector</class>
    <namespace>iv</namespace>
    <member kind="typedef">
      <type>Interpolator_float</type>
      <name>Anim_float</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ad491dc0e6e98500cb2d861388bcef9e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnimNode.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Animation/</path>
    <filename>AnimNode_8cpp.html</filename>
    <includes id="AnimNode_8hpp" name="AnimNode.hpp" local="yes" imported="no">AnimNode.hpp</includes>
    <includes id="AnimSystem_8hpp" name="AnimSystem.hpp" local="yes" imported="no">AnimSystem.hpp</includes>
    <namespace>iv</namespace>
    <member kind="variable">
      <type>TableId</type>
      <name>AnimNode_DebugTable</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ab8a1b1f66750d7d689ab0e637490b40b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnimNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Animation/</path>
    <filename>AnimNode_8hpp.html</filename>
    <includes id="AnimConnector_8hpp" name="AnimConnector.hpp" local="yes" imported="no">AnimConnector.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../../Defs.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="AnimNode_8inl" name="AnimNode.inl" local="yes" imported="no">AnimNode.inl</includes>
    <class kind="class">iv::AnimNodeI</class>
    <class kind="class">iv::AnimNode</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>AnimNode.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Animation/</path>
    <filename>AnimNode_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>AnimSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Animation/</path>
    <filename>AnimSystem_8cpp.html</filename>
    <includes id="AnimSystem_8hpp" name="AnimSystem.hpp" local="yes" imported="no">AnimSystem.hpp</includes>
    <includes id="AnimNode_8hpp" name="AnimNode.hpp" local="yes" imported="no">AnimNode.hpp</includes>
    <includes id="AnimConnector_8hpp" name="AnimConnector.hpp" local="yes" imported="no">AnimConnector.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>AnimSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Animation/</path>
    <filename>AnimSystem_8hpp.html</filename>
    <includes id="AnimConnector_8hpp" name="AnimConnector.hpp" local="yes" imported="no">AnimConnector.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::AnimSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>AnimHeap.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/</path>
    <filename>AnimHeap_8cpp.html</filename>
    <includes id="AnimHeap_8hpp" name="AnimHeap.hpp" local="yes" imported="no">AnimHeap.hpp</includes>
    <includes id="AnimSystem_8hpp" name="AnimSystem.hpp" local="yes" imported="no">Animation/AnimSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>AnimHeap.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/</path>
    <filename>AnimHeap_8hpp.html</filename>
    <includes id="Destination__AnimNode_8hpp" name="Destination_AnimNode.hpp" local="yes" imported="no">Connectors/Destination_AnimNode.hpp</includes>
    <includes id="Source__AnimNode_8hpp" name="Source_AnimNode.hpp" local="yes" imported="no">Connectors/Source_AnimNode.hpp</includes>
    <includes id="State__AnimNode_8hpp" name="State_AnimNode.hpp" local="yes" imported="no">Connectors/State_AnimNode.hpp</includes>
    <includes id="Lambda__Connector_8hpp" name="Lambda_Connector.hpp" local="yes" imported="no">Connectors/Lambda_Connector.hpp</includes>
    <includes id="Cooldown__Connector_8hpp" name="Cooldown_Connector.hpp" local="yes" imported="no">Connectors/Cooldown_Connector.hpp</includes>
    <includes id="TimeTransform__Connector_8hpp" name="TimeTransform_Connector.hpp" local="yes" imported="no">Connectors/TimeTransform_Connector.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="AnimHeap_8inl" name="AnimHeap.inl" local="yes" imported="no">AnimHeap.inl</includes>
    <class kind="class">iv::AnimHeap</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>AnimHeap.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/</path>
    <filename>AnimHeap_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Activator_AnimNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Activator__AnimNode_8hpp.html</filename>
    <includes id="AnimNode_8hpp" name="AnimNode.hpp" local="yes" imported="no">../Animation/AnimNode.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::Activator_AnimNode</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Cooldown_Connector.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Cooldown__Connector_8hpp.html</filename>
    <includes id="Transform__ConnectorI_8hpp" name="Transform_ConnectorI.hpp" local="yes" imported="no">Transform_ConnectorI.hpp</includes>
    <includes id="AnimNode_8hpp" name="AnimNode.hpp" local="yes" imported="no">../Animation/AnimNode.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../../Defs.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="Cooldown__Connector_8inl" name="Cooldown_Connector.inl" local="yes" imported="no">Cooldown_Connector.inl</includes>
    <class kind="class">iv::Cooldown_Connector</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Cooldown_Connector.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Cooldown__Connector_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Destination_AnimNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Destination__AnimNode_8hpp.html</filename>
    <includes id="Destination__Connector_8hpp" name="Destination_Connector.hpp" local="yes" imported="no">Destination_Connector.hpp</includes>
    <class kind="class">iv::Destination_AnimNode</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Destination_Connector.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Destination__Connector_8hpp.html</filename>
    <includes id="AnimNode_8hpp" name="AnimNode.hpp" local="yes" imported="no">../Animation/AnimNode.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="Destination__Connector_8inl" name="Destination_Connector.inl" local="yes" imported="no">Destination_Connector.inl</includes>
    <class kind="class">iv::Destination_ConnectorGI</class>
    <class kind="class">iv::Destination_Connector</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Destination_Connector.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Destination__Connector_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Lambda_Connector.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Lambda__Connector_8cpp.html</filename>
    <includes id="Lambda__Connector_8hpp" name="Lambda_Connector.hpp" local="yes" imported="no">Lambda_Connector.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Lambda_Connector.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Lambda__Connector_8hpp.html</filename>
    <includes id="AnimNode_8hpp" name="AnimNode.hpp" local="yes" imported="no">../Animation/AnimNode.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::Lambda_Connector</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Source_AnimNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Source__AnimNode_8hpp.html</filename>
    <includes id="Source__Connector_8hpp" name="Source_Connector.hpp" local="yes" imported="no">Source_Connector.hpp</includes>
    <class kind="class">iv::Source_AnimNode</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Source_Connector.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Source__Connector_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="Source__Connector_8inl" name="Source_Connector.inl" local="yes" imported="no">Source_Connector.inl</includes>
    <class kind="class">iv::Source_Connector</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Source_Connector.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Source__Connector_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>State_AnimNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>State__AnimNode_8hpp.html</filename>
    <includes id="Destination__Connector_8hpp" name="Destination_Connector.hpp" local="yes" imported="no">Destination_Connector.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::State_AnimNode</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TimeTransform.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>TimeTransform_8hpp.html</filename>
    <includes id="AnimConnector_8hpp" name="AnimConnector.hpp" local="yes" imported="no">../Animation/AnimConnector.hpp</includes>
    <class kind="class">iv::TimeTransform</class>
    <class kind="struct">iv::LinearTransform</class>
    <class kind="struct">iv::Smoothstep2Transform</class>
    <class kind="struct">iv::Smoothstep3Transform</class>
    <class kind="struct">iv::QuickstepTransform</class>
    <class kind="struct">iv::ExponentialTransform</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TimeTransform_Connector.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>TimeTransform__Connector_8cpp.html</filename>
    <includes id="TimeTransform__Connector_8hpp" name="TimeTransform_Connector.hpp" local="yes" imported="no">TimeTransform_Connector.hpp</includes>
    <namespace>iv</namespace>
    <member kind="variable">
      <type>iv::TableId</type>
      <name>TimeTransform_Connector_DebugTable</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a082f506c60e451d0845eef254d328c2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeTransform_Connector.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>TimeTransform__Connector_8hpp.html</filename>
    <includes id="TimeTransform_8hpp" name="TimeTransform.hpp" local="yes" imported="no">TimeTransform.hpp</includes>
    <includes id="Transform__ConnectorI_8hpp" name="Transform_ConnectorI.hpp" local="yes" imported="no">Transform_ConnectorI.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="TimeTransform__Connector_8inl" name="TimeTransform_Connector.inl" local="yes" imported="no">TimeTransform_Connector.inl</includes>
    <class kind="class">iv::TimeTransform_Connector</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TimeTransform_Connector.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>TimeTransform__Connector_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Transform_ConnectorI.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Transform__ConnectorI_8hpp.html</filename>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../../Defs.hpp</includes>
    <includes id="AnimNode_8hpp" name="AnimNode.hpp" local="yes" imported="no">../Animation/AnimNode.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="Transform__ConnectorI_8inl" name="Transform_ConnectorI.inl" local="yes" imported="no">Transform_ConnectorI.inl</includes>
    <class kind="class">iv::Transform_ConnectorI</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Transform_ConnectorI.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Animation/Connectors/</path>
    <filename>Transform__ConnectorI_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Align.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Align_8cpp.html</filename>
    <includes id="Align_8hpp" name="Align.hpp" local="yes" imported="no">Align.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Align.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Align_8hpp.html</filename>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="OneChildElem_8hpp" name="OneChildElem.hpp" local="yes" imported="no">OneChildElem.hpp</includes>
    <class kind="class">iv::Align</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Axis.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Axis_8cpp.html</filename>
    <includes id="Axis_8hpp" name="Axis.hpp" local="yes" imported="no">Axis.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Axis.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Axis_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="struct">iv::StringIO&lt; Axis &gt;</class>
    <class kind="struct">iv::StringIO&lt; AxisOrder &gt;</class>
    <class kind="struct">iv::StringIO&lt; AxisDirection &gt;</class>
    <namespace>iv</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Axis</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>abc890bafbc0a53479164660895d1a1a0</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="abc890bafbc0a53479164660895d1a1a0a02129bb861061d1a052c592e2dc6b383">X</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="abc890bafbc0a53479164660895d1a1a0a57cec4137b614c87cb4e24a3d003a3e0">Y</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="abc890bafbc0a53479164660895d1a1a0a21c2e59531c8710156d34a3c30ac81d5">Z</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="abc890bafbc0a53479164660895d1a1a0ac3150b59f43aaff4542bca94588ceeca">_Size</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AxisOrder</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a646579b205a4a0966e3eb3034067a7fd</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="a646579b205a4a0966e3eb3034067a7fda482be0da5798aaaecbf7416714e6607f">Incremental</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a646579b205a4a0966e3eb3034067a7fdabcdb9bff07db42410420560b8d77f806">Decremental</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AxisDirection</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a4c7d65bcb5030afdd0700462a225b673</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673a3d3184a9bc6c824c494a88c3abb0701f">X_Inc</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673abb021512000abdac5ea82897c7cfe50a">X_Dec</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673a78b75b385cb953da3d8a939be7d45a1c">Y_Inc</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673ad3eadd4dfb4fb764db80e125d4eb6136">Y_Dec</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673a3cc62111053724fe8f3b5fe7fd0b23b8">Z_Inc</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673a657696854f272941b5f402e58ababe91">Z_Dec</enumvalue>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>float3_Axis</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ac7712325bb0222c95b155b36f529d682</anchor>
      <arglist>(float3 &amp;vec, Axis axis)</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>float3_Axis</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aeff418b6ac2fa43b74b619b097e38402</anchor>
      <arglist>(float3 const &amp;vec, Axis axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach_axis</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>abdaef18dff6d3ebfe61201583e089364</anchor>
      <arglist>(Callable c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Border.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Border_8cpp.html</filename>
    <includes id="Border_8hpp" name="Border.hpp" local="yes" imported="no">Border.hpp</includes>
    <includes id="Axis_8hpp" name="Axis.hpp" local="yes" imported="no">Axis.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Border.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Border_8hpp.html</filename>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="OneChildElem_8hpp" name="OneChildElem.hpp" local="yes" imported="no">OneChildElem.hpp</includes>
    <class kind="class">iv::Border</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Camera.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Camera_8cpp.html</filename>
    <includes id="Camera_8hpp" name="Camera.hpp" local="yes" imported="no">Camera.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <includes id="ElementSystem_8hpp" name="ElementSystem.hpp" local="yes" imported="no">ElementSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Camera.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Camera_8hpp.html</filename>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="ElementRenderer_8hpp" name="ElementRenderer.hpp" local="yes" imported="no">ElementRenderer.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <class kind="class">iv::Camera</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Divider.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Divider_8cpp.html</filename>
    <includes id="Divider_8hpp" name="Divider.hpp" local="yes" imported="no">Divider.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Divider.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Divider_8hpp.html</filename>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="Axis_8hpp" name="Axis.hpp" local="yes" imported="no">Axis.hpp</includes>
    <class kind="class">iv::DividerSlot</class>
    <class kind="class">iv::Divider</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Elem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Elem_8cpp.html</filename>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="Camera_8hpp" name="Camera.hpp" local="yes" imported="no">Camera.hpp</includes>
    <includes id="ElementSystem_8hpp" name="ElementSystem.hpp" local="yes" imported="no">ElementSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Elem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Elem_8hpp.html</filename>
    <includes id="ElementRenderer_8hpp" name="ElementRenderer.hpp" local="yes" imported="no">ElementRenderer.hpp</includes>
    <includes id="CameraState_8hpp" name="CameraState.hpp" local="yes" imported="no">../Rendering/CameraState.hpp</includes>
    <includes id="FlatShader_8hpp" name="FlatShader.hpp" local="yes" imported="no">../Rendering/FlatShader.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <class kind="class">iv::Elem</class>
    <class kind="class">iv::Pickable</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ElementRenderer.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>ElementRenderer_8cpp.html</filename>
    <includes id="ElementRenderer_8hpp" name="ElementRenderer.hpp" local="yes" imported="no">ElementRenderer.hpp</includes>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ElementRenderer.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>ElementRenderer_8hpp.html</filename>
    <includes id="CameraState_8hpp" name="CameraState.hpp" local="yes" imported="no">../Rendering/CameraState.hpp</includes>
    <includes id="gl_8h" name="gl.h" local="yes" imported="no">../OpenGL/gl.h</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::Renderable</class>
    <class kind="class">iv::ElementRenderer</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Elements.dox</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Elements_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>ElementSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>ElementSystem_8cpp.html</filename>
    <includes id="ElementSystem_8hpp" name="ElementSystem.hpp" local="yes" imported="no">ElementSystem.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ElementSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>ElementSystem_8hpp.html</filename>
    <includes id="Camera_8hpp" name="Camera.hpp" local="yes" imported="no">Camera.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::ElementSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FixedOrder_Camera.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>FixedOrder__Camera_8cpp.html</filename>
    <includes id="FixedOrder__Camera_8hpp" name="FixedOrder_Camera.hpp" local="yes" imported="no">FixedOrder_Camera.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FixedOrder_Camera.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>FixedOrder__Camera_8hpp.html</filename>
    <includes id="Camera_8hpp" name="Camera.hpp" local="yes" imported="no">Camera.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::FixedOrder_Camera</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Image.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Image_8cpp.html</filename>
    <includes id="Image_8hpp" name="Image.hpp" local="yes" imported="no">Image.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Image.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Image_8hpp.html</filename>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="TranslucentElem_8hpp" name="TranslucentElem.hpp" local="yes" imported="no">TranslucentElem.hpp</includes>
    <includes id="Texture_8hpp" name="Texture.hpp" local="yes" imported="no">../Rendering/Texture.hpp</includes>
    <includes id="FlatShader_8hpp" name="FlatShader.hpp" local="yes" imported="no">../Rendering/FlatShader.hpp</includes>
    <includes id="SquareMesh_8hpp" name="SquareMesh.hpp" local="yes" imported="no">../Rendering/SquareMesh.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::Image</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>OneChildElem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>OneChildElem_8hpp.html</filename>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="OneChildElem_8inl" name="OneChildElem.inl" local="yes" imported="no">OneChildElem.inl</includes>
    <class kind="class">iv::OneChildElem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>OneChildElem.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>OneChildElem_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>PickableSlot.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>PickableSlot_8cpp.html</filename>
    <includes id="PickableSlot_8hpp" name="PickableSlot.hpp" local="yes" imported="no">PickableSlot.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>PickableSlot.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>PickableSlot_8hpp.html</filename>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <class kind="class">iv::PickableSlot</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Prefsize.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Prefsize_8cpp.html</filename>
    <includes id="Prefsize_8hpp" name="Prefsize.hpp" local="yes" imported="no">Prefsize.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Prefsize.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Prefsize_8hpp.html</filename>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="OneChildElem_8hpp" name="OneChildElem.hpp" local="yes" imported="no">OneChildElem.hpp</includes>
    <class kind="class">iv::Prefsize</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Scroller.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Scroller_8cpp.html</filename>
    <includes id="Scroller_8hpp" name="Scroller.hpp" local="yes" imported="no">Scroller.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Scroller.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Scroller_8hpp.html</filename>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="OneChildElem_8hpp" name="OneChildElem.hpp" local="yes" imported="no">OneChildElem.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::Scroller</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Slot.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Slot_8cpp.html</filename>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <includes id="Camera_8hpp" name="Camera.hpp" local="yes" imported="no">Camera.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Slot.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Slot_8hpp.html</filename>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="VectorChildrenElem_8hpp" name="VectorChildrenElem.hpp" local="yes" imported="no">VectorChildrenElem.hpp</includes>
    <class kind="class">iv::SlotChild</class>
    <class kind="class">iv::Slot</class>
    <class kind="class">iv::ProtectedSlot</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Transform.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Transform_8cpp.html</filename>
    <includes id="Transform_8hpp" name="Transform.hpp" local="yes" imported="no">Transform.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Transform.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>Transform_8hpp.html</filename>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="OneChildElem_8hpp" name="OneChildElem.hpp" local="yes" imported="no">OneChildElem.hpp</includes>
    <class kind="class">iv::Transform</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TranslucentElem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>TranslucentElem_8cpp.html</filename>
    <includes id="TranslucentElem_8hpp" name="TranslucentElem.hpp" local="yes" imported="no">TranslucentElem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TranslucentElem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>TranslucentElem_8hpp.html</filename>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::TranslucentElem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>VectorChildrenElem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>VectorChildrenElem_8hpp.html</filename>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Slot.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <includes id="VectorChildrenElem_8inl" name="VectorChildrenElem.inl" local="yes" imported="no">VectorChildrenElem.inl</includes>
    <class kind="class">iv::VectorChildrenElem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>VectorChildrenElem.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Elements/</path>
    <filename>VectorChildrenElem_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ImageLoader.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/FreeImage/</path>
    <filename>ImageLoader_8cpp.html</filename>
    <includes id="ImageLoader_8hpp" name="ImageLoader.hpp" local="yes" imported="no">ImageLoader.hpp</includes>
    <includes id="StreamTexture_8hpp" name="StreamTexture.hpp" local="yes" imported="no">StreamTexture.hpp</includes>
    <namespace>iv</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ImageLoader_Load</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a1010e6ba9989c70d5d0c97efabd1ba0b</anchor>
      <arglist>(StreamResource *resource, PixelFormat, std::function&lt; void(ImageLoader_Metadata const &amp;, uint8_t *bytes, size_t bytes_count) &gt; const &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImageLoader.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/FreeImage/</path>
    <filename>ImageLoader_8hpp.html</filename>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <class kind="struct">iv::ImageLoader_Metadata</class>
    <namespace>iv</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ImageLoader_Load</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a1010e6ba9989c70d5d0c97efabd1ba0b</anchor>
      <arglist>(StreamResource *resource, PixelFormat, std::function&lt; void(ImageLoader_Metadata const &amp;, uint8_t *bytes, size_t bytes_count) &gt; const &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StreamTexture.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/FreeImage/</path>
    <filename>StreamTexture_8cpp.html</filename>
    <includes id="StreamTexture_8hpp" name="StreamTexture.hpp" local="yes" imported="no">StreamTexture.hpp</includes>
    <includes id="ImageLoader_8hpp" name="ImageLoader.hpp" local="yes" imported="no">ImageLoader.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StreamTexture.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/FreeImage/</path>
    <filename>StreamTexture_8hpp.html</filename>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <class kind="class">iv::StreamTexture_Subprovider</class>
    <class kind="class">iv::StreamTexture</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Game.dox</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Game/</path>
    <filename>Game_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>GlfmWindow.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Game/</path>
    <filename>GlfmWindow_8cpp.html</filename>
    <includes id="GlfmWindow_8hpp" name="GlfmWindow.hpp" local="yes" imported="no">GlfmWindow.hpp</includes>
  </compound>
  <compound kind="file">
    <name>GlfmWindow.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Game/</path>
    <filename>GlfmWindow_8hpp.html</filename>
    <includes id="WindowListener_8hpp" name="WindowListener.hpp" local="yes" imported="no">WindowListener.hpp</includes>
    <includes id="Window_8hpp" name="Window.hpp" local="yes" imported="no">Window.hpp</includes>
    <includes id="RenderTarget_8hpp" name="RenderTarget.hpp" local="yes" imported="no">../OpenGL/RenderTarget.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::GlfmRenderTarget</class>
    <class kind="class">iv::GlfmWindow</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>GlfwWindow.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Game/</path>
    <filename>GlfwWindow_8cpp.html</filename>
    <includes id="GlfwWindow_8hpp" name="GlfwWindow.hpp" local="yes" imported="no">GlfwWindow.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>GlfwWindow.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Game/</path>
    <filename>GlfwWindow_8hpp.html</filename>
    <includes id="WindowListener_8hpp" name="WindowListener.hpp" local="yes" imported="no">WindowListener.hpp</includes>
    <includes id="Window_8hpp" name="Window.hpp" local="yes" imported="no">Window.hpp</includes>
    <includes id="RenderTarget_8hpp" name="RenderTarget.hpp" local="yes" imported="no">../OpenGL/RenderTarget.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::GlfwRenderTarget</class>
    <class kind="class">iv::GlfwWindow</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TestGlfmWindow.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Game/</path>
    <filename>TestGlfmWindow_8cpp.html</filename>
    <includes id="TestGlfmWindow_8hpp" name="TestGlfmWindow.hpp" local="yes" imported="no">TestGlfmWindow.hpp</includes>
  </compound>
  <compound kind="file">
    <name>TestGlfmWindow.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Game/</path>
    <filename>TestGlfmWindow_8hpp.html</filename>
    <includes id="WindowListener_8hpp" name="WindowListener.hpp" local="yes" imported="no">WindowListener.hpp</includes>
    <includes id="Window_8hpp" name="Window.hpp" local="yes" imported="no">Window.hpp</includes>
    <includes id="RenderTarget_8hpp" name="RenderTarget.hpp" local="yes" imported="no">../OpenGL/RenderTarget.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::TestGlfmWindow</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Window.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Game/</path>
    <filename>Window_8cpp.html</filename>
    <includes id="Window_8hpp" name="Window.hpp" local="yes" imported="no">Window.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Window.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Game/</path>
    <filename>Window_8hpp.html</filename>
    <includes id="WindowListener_8hpp" name="WindowListener.hpp" local="yes" imported="no">WindowListener.hpp</includes>
    <includes id="RenderTarget_8hpp" name="RenderTarget.hpp" local="yes" imported="no">../OpenGL/RenderTarget.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::Window</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>WindowListener.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Game/</path>
    <filename>WindowListener_8hpp.html</filename>
    <includes id="RenderTarget_8hpp" name="RenderTarget.hpp" local="yes" imported="no">../OpenGL/RenderTarget.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::WindowListener</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ivorium_graphics.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/</path>
    <filename>ivorium__graphics_8hpp.html</filename>
    <includes id="Divider_8hpp" name="Divider.hpp" local="yes" imported="no">Elements/Divider.hpp</includes>
    <includes id="VectorChildrenElem_8hpp" name="VectorChildrenElem.hpp" local="yes" imported="no">Elements/VectorChildrenElem.hpp</includes>
    <includes id="Prefsize_8hpp" name="Prefsize.hpp" local="yes" imported="no">Elements/Prefsize.hpp</includes>
    <includes id="Camera_8hpp" name="Camera.hpp" local="yes" imported="no">Elements/Camera.hpp</includes>
    <includes id="FixedOrder__Camera_8hpp" name="FixedOrder_Camera.hpp" local="yes" imported="no">Elements/FixedOrder_Camera.hpp</includes>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">Elements/Slot.hpp</includes>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">Elements/Elem.hpp</includes>
    <includes id="TranslucentElem_8hpp" name="TranslucentElem.hpp" local="yes" imported="no">Elements/TranslucentElem.hpp</includes>
    <includes id="Border_8hpp" name="Border.hpp" local="yes" imported="no">Elements/Border.hpp</includes>
    <includes id="ElementRenderer_8hpp" name="ElementRenderer.hpp" local="yes" imported="no">Elements/ElementRenderer.hpp</includes>
    <includes id="Image_8hpp" name="Image.hpp" local="yes" imported="no">Elements/Image.hpp</includes>
    <includes id="ElementSystem_8hpp" name="ElementSystem.hpp" local="yes" imported="no">Elements/ElementSystem.hpp</includes>
    <includes id="Transform_8hpp" name="Transform.hpp" local="yes" imported="no">Elements/Transform.hpp</includes>
    <includes id="Axis_8hpp" name="Axis.hpp" local="yes" imported="no">Elements/Axis.hpp</includes>
    <includes id="OneChildElem_8hpp" name="OneChildElem.hpp" local="yes" imported="no">Elements/OneChildElem.hpp</includes>
    <includes id="Align_8hpp" name="Align.hpp" local="yes" imported="no">Elements/Align.hpp</includes>
    <includes id="PickableSlot_8hpp" name="PickableSlot.hpp" local="yes" imported="no">Elements/PickableSlot.hpp</includes>
    <includes id="Scroller_8hpp" name="Scroller.hpp" local="yes" imported="no">Elements/Scroller.hpp</includes>
    <includes id="RenderTarget_8hpp" name="RenderTarget.hpp" local="yes" imported="no">OpenGL/RenderTarget.hpp</includes>
    <includes id="GlError_8hpp" name="GlError.hpp" local="yes" imported="no">OpenGL/GlError.hpp</includes>
    <includes id="GlMesh_8hpp" name="GlMesh.hpp" local="yes" imported="no">OpenGL/GlMesh.hpp</includes>
    <includes id="GlProgram_8hpp" name="GlProgram.hpp" local="yes" imported="no">OpenGL/GlProgram.hpp</includes>
    <includes id="GlTexture_8hpp" name="GlTexture.hpp" local="yes" imported="no">OpenGL/GlTexture.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <includes id="AnimHeap_8hpp" name="AnimHeap.hpp" local="yes" imported="no">Animation/AnimHeap.hpp</includes>
    <includes id="AnimConnector_8hpp" name="AnimConnector.hpp" local="yes" imported="no">Animation/Animation/AnimConnector.hpp</includes>
    <includes id="AnimNode_8hpp" name="AnimNode.hpp" local="yes" imported="no">Animation/Animation/AnimNode.hpp</includes>
    <includes id="AnimSystem_8hpp" name="AnimSystem.hpp" local="yes" imported="no">Animation/Animation/AnimSystem.hpp</includes>
    <includes id="Transform__ConnectorI_8hpp" name="Transform_ConnectorI.hpp" local="yes" imported="no">Animation/Connectors/Transform_ConnectorI.hpp</includes>
    <includes id="TimeTransform__Connector_8hpp" name="TimeTransform_Connector.hpp" local="yes" imported="no">Animation/Connectors/TimeTransform_Connector.hpp</includes>
    <includes id="State__AnimNode_8hpp" name="State_AnimNode.hpp" local="yes" imported="no">Animation/Connectors/State_AnimNode.hpp</includes>
    <includes id="Source__Connector_8hpp" name="Source_Connector.hpp" local="yes" imported="no">Animation/Connectors/Source_Connector.hpp</includes>
    <includes id="TimeTransform_8hpp" name="TimeTransform.hpp" local="yes" imported="no">Animation/Connectors/TimeTransform.hpp</includes>
    <includes id="Source__AnimNode_8hpp" name="Source_AnimNode.hpp" local="yes" imported="no">Animation/Connectors/Source_AnimNode.hpp</includes>
    <includes id="Cooldown__Connector_8hpp" name="Cooldown_Connector.hpp" local="yes" imported="no">Animation/Connectors/Cooldown_Connector.hpp</includes>
    <includes id="Destination__Connector_8hpp" name="Destination_Connector.hpp" local="yes" imported="no">Animation/Connectors/Destination_Connector.hpp</includes>
    <includes id="Lambda__Connector_8hpp" name="Lambda_Connector.hpp" local="yes" imported="no">Animation/Connectors/Lambda_Connector.hpp</includes>
    <includes id="Activator__AnimNode_8hpp" name="Activator_AnimNode.hpp" local="yes" imported="no">Animation/Connectors/Activator_AnimNode.hpp</includes>
    <includes id="Destination__AnimNode_8hpp" name="Destination_AnimNode.hpp" local="yes" imported="no">Animation/Connectors/Destination_AnimNode.hpp</includes>
    <includes id="Texture_8hpp" name="Texture.hpp" local="yes" imported="no">Rendering/Texture.hpp</includes>
    <includes id="Mesh_8hpp" name="Mesh.hpp" local="yes" imported="no">Rendering/Mesh.hpp</includes>
    <includes id="CameraState_8hpp" name="CameraState.hpp" local="yes" imported="no">Rendering/CameraState.hpp</includes>
    <includes id="GlSystem_8hpp" name="GlSystem.hpp" local="yes" imported="no">Rendering/GlSystem.hpp</includes>
    <includes id="ColorTransform_8hpp" name="ColorTransform.hpp" local="yes" imported="no">Rendering/ColorTransform.hpp</includes>
    <includes id="Shader_8hpp" name="Shader.hpp" local="yes" imported="no">Rendering/Shader.hpp</includes>
    <includes id="FlatShader_8hpp" name="FlatShader.hpp" local="yes" imported="no">Rendering/FlatShader.hpp</includes>
    <includes id="SquareMesh_8hpp" name="SquareMesh.hpp" local="yes" imported="no">Rendering/SquareMesh.hpp</includes>
    <includes id="ImageLoader_8hpp" name="ImageLoader.hpp" local="yes" imported="no">FreeImage/ImageLoader.hpp</includes>
    <includes id="StreamTexture_8hpp" name="StreamTexture.hpp" local="yes" imported="no">FreeImage/StreamTexture.hpp</includes>
    <includes id="GlfwWindow_8hpp" name="GlfwWindow.hpp" local="yes" imported="no">Game/GlfwWindow.hpp</includes>
    <includes id="WindowListener_8hpp" name="WindowListener.hpp" local="yes" imported="no">Game/WindowListener.hpp</includes>
    <includes id="TestGlfmWindow_8hpp" name="TestGlfmWindow.hpp" local="yes" imported="no">Game/TestGlfmWindow.hpp</includes>
    <includes id="Window_8hpp" name="Window.hpp" local="yes" imported="no">Game/Window.hpp</includes>
    <includes id="GlfmWindow_8hpp" name="GlfmWindow.hpp" local="yes" imported="no">Game/GlfmWindow.hpp</includes>
    <includes id="Text_8hpp" name="Text.hpp" local="yes" imported="no">Text/Text.hpp</includes>
    <includes id="TextLayout_8hpp" name="TextLayout.hpp" local="yes" imported="no">Text/TextLayout.hpp</includes>
    <includes id="FontMesh_8hpp" name="FontMesh.hpp" local="yes" imported="no">Text/FontMesh.hpp</includes>
    <includes id="StreamFont_8hpp" name="StreamFont.hpp" local="yes" imported="no">Text/StreamFont.hpp</includes>
    <includes id="Font_8hpp" name="Font.hpp" local="yes" imported="no">Text/Font.hpp</includes>
  </compound>
  <compound kind="file">
    <name>gl.h</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>gl_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>GlError.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>GlError_8cpp.html</filename>
    <includes id="GlError_8hpp" name="GlError.hpp" local="yes" imported="no">GlError.hpp</includes>
    <includes id="gl_8h" name="gl.h" local="yes" imported="no">gl.h</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
    <member kind="function">
      <type>void</type>
      <name>GlError_Check</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aedf7ec4e1788464087a931ca42026934</anchor>
      <arglist>(Context const *logger, SrcInfo const &amp;src_info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlError.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>GlError_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
    <member kind="function">
      <type>void</type>
      <name>GlError_Check</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aedf7ec4e1788464087a931ca42026934</anchor>
      <arglist>(Context const *logger, SrcInfo const &amp;src_info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlMesh.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>GlMesh_8cpp.html</filename>
    <includes id="GlMesh_8hpp" name="GlMesh.hpp" local="yes" imported="no">GlMesh.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <includes id="GlError_8hpp" name="GlError.hpp" local="yes" imported="no">GlError.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>GlMesh.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>GlMesh_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="gl_8h" name="gl.h" local="yes" imported="no">gl.h</includes>
    <class kind="struct">iv::GlMeshData</class>
    <class kind="class">iv::GlMesh</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>GlProgram.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>GlProgram_8cpp.html</filename>
    <includes id="GlProgram_8hpp" name="GlProgram.hpp" local="yes" imported="no">GlProgram.hpp</includes>
    <includes id="GlError_8hpp" name="GlError.hpp" local="yes" imported="no">GlError.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>GlProgram.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>GlProgram_8hpp.html</filename>
    <includes id="gl_8h" name="gl.h" local="yes" imported="no">gl.h</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::GlProgram</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>GlTexture.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>GlTexture_8cpp.html</filename>
    <includes id="GlTexture_8hpp" name="GlTexture.hpp" local="yes" imported="no">GlTexture.hpp</includes>
    <includes id="GlError_8hpp" name="GlError.hpp" local="yes" imported="no">GlError.hpp</includes>
    <includes id="RenderTarget_8hpp" name="RenderTarget.hpp" local="yes" imported="no">RenderTarget.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>GlTexture.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>GlTexture_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="gl_8h" name="gl.h" local="yes" imported="no">gl.h</includes>
    <class kind="class">iv::GlTexture</class>
    <class kind="struct">iv::StringIO&lt; PixelFormat &gt;</class>
    <class kind="struct">iv::StringIO&lt; ColorSpace &gt;</class>
    <namespace>iv</namespace>
    <member kind="enumeration">
      <type></type>
      <name>GlMagFiltering</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a621ecdd6117b91a9c7f541d71f821fd1</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="a621ecdd6117b91a9c7f541d71f821fd1a60494f02d440f316319dd0fad40ad007">Nearest</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a621ecdd6117b91a9c7f541d71f821fd1a32a843da6ea40ab3b17a3421ccdf671b">Linear</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GlMinFiltering</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a8a1ac8a79d686e241dddbb9a78ece936</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936a60494f02d440f316319dd0fad40ad007">Nearest</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936a32a843da6ea40ab3b17a3421ccdf671b">Linear</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936a35d97e4a37fa3a0d76c692f3e318599b">NearestMipmapNearest</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936ac164897273ad7f6d61626f5610d86425">LinearMipmapNearest</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936a9a79df5c07e4d2a2875689f608b50529">NearestMipmapLinear</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936a1173bd3987b1e185d86b9c3fe1b8bd72">LinearMipmapLinear</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PixelFormat</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>afcd7ab53410d6e811b05918a2f80aa8a</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="afcd7ab53410d6e811b05918a2f80aa8aaea3495a278957dc58165e48a8945469f">RGBA</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="afcd7ab53410d6e811b05918a2f80aa8aa5a1fe3c61c9e2fd6dbbc823589f6e697">BGRA</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColorSpace</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a7f00314eabad4aa38f18153856c7ba35</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="a7f00314eabad4aa38f18153856c7ba35a9ed33d9be17d174aeb4393a989586ed9">sRGB</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a7f00314eabad4aa38f18153856c7ba35a32a843da6ea40ab3b17a3421ccdf671b">Linear</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>RenderTarget.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>RenderTarget_8cpp.html</filename>
    <includes id="RenderTarget_8hpp" name="RenderTarget.hpp" local="yes" imported="no">RenderTarget.hpp</includes>
    <includes id="gl_8h" name="gl.h" local="yes" imported="no">gl.h</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>RenderTarget.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/OpenGL/</path>
    <filename>RenderTarget_8hpp.html</filename>
    <includes id="gl_8h" name="gl.h" local="yes" imported="no">gl.h</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::RenderTarget</class>
    <class kind="struct">iv::RenderTarget::Geometry</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>CameraState.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>CameraState_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="struct">iv::CameraState</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ColorTransform.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>ColorTransform_8cpp.html</filename>
    <includes id="ColorTransform_8hpp" name="ColorTransform.hpp" local="yes" imported="no">ColorTransform.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ColorTransform.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>ColorTransform_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="struct">iv::ColorTransform</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FlatShader.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>FlatShader_8cpp.html</filename>
    <includes id="FlatShader_8hpp" name="FlatShader.hpp" local="yes" imported="no">FlatShader.hpp</includes>
    <includes id="ColorTransform_8hpp" name="ColorTransform.hpp" local="yes" imported="no">ColorTransform.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FlatShader.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>FlatShader_8hpp.html</filename>
    <includes id="Shader_8hpp" name="Shader.hpp" local="yes" imported="no">Shader.hpp</includes>
    <includes id="Texture_8hpp" name="Texture.hpp" local="yes" imported="no">Texture.hpp</includes>
    <includes id="CameraState_8hpp" name="CameraState.hpp" local="yes" imported="no">CameraState.hpp</includes>
    <includes id="GlSystem_8hpp" name="GlSystem.hpp" local="yes" imported="no">GlSystem.hpp</includes>
    <includes id="GlMesh_8hpp" name="GlMesh.hpp" local="yes" imported="no">../OpenGL/GlMesh.hpp</includes>
    <includes id="RenderTarget_8hpp" name="RenderTarget.hpp" local="yes" imported="no">../OpenGL/RenderTarget.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::FlatShader_Subprovider</class>
    <class kind="struct">iv::ShaderScissor</class>
    <class kind="class">iv::FlatShader</class>
    <class kind="struct">iv::FlatShader::Params</class>
    <class kind="class">iv::FlatShader_Resource</class>
    <class kind="struct">iv::StringIO&lt; FlatShader::FittingStage &gt;</class>
    <class kind="struct">iv::StringIO&lt; FlatShader::PixelizeStage &gt;</class>
    <class kind="struct">iv::StringIO&lt; FlatShader::ResizeStage &gt;</class>
    <class kind="struct">iv::StringIO&lt; FlatShader::FilteringStage &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>GlSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>GlSystem_8cpp.html</filename>
    <includes id="GlSystem_8hpp" name="GlSystem.hpp" local="yes" imported="no">GlSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>GlSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>GlSystem_8hpp.html</filename>
    <includes id="RenderTarget_8hpp" name="RenderTarget.hpp" local="yes" imported="no">../OpenGL/RenderTarget.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::GlInfo</class>
    <class kind="class">iv::GlListener</class>
    <class kind="class">iv::GlSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Mesh.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>Mesh_8cpp.html</filename>
    <includes id="Mesh_8hpp" name="Mesh.hpp" local="yes" imported="no">Mesh.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Mesh.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>Mesh_8hpp.html</filename>
    <includes id="GlSystem_8hpp" name="GlSystem.hpp" local="yes" imported="no">GlSystem.hpp</includes>
    <includes id="GlMesh_8hpp" name="GlMesh.hpp" local="yes" imported="no">../OpenGL/GlMesh.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <class kind="class">iv::Mesh</class>
    <class kind="class">iv::Mesh_Resource</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Shader.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>Shader_8cpp.html</filename>
    <includes id="Shader_8hpp" name="Shader.hpp" local="yes" imported="no">Shader.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Shader.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>Shader_8hpp.html</filename>
    <includes id="GlTexture_8hpp" name="GlTexture.hpp" local="yes" imported="no">../OpenGL/GlTexture.hpp</includes>
    <includes id="GlProgram_8hpp" name="GlProgram.hpp" local="yes" imported="no">../OpenGL/GlProgram.hpp</includes>
    <includes id="gl_8h" name="gl.h" local="yes" imported="no">../OpenGL/gl.h</includes>
    <includes id="GlSystem_8hpp" name="GlSystem.hpp" local="yes" imported="no">GlSystem.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::Shader</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SquareMesh.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>SquareMesh_8cpp.html</filename>
    <includes id="SquareMesh_8hpp" name="SquareMesh.hpp" local="yes" imported="no">SquareMesh.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SquareMesh.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>SquareMesh_8hpp.html</filename>
    <includes id="Mesh_8hpp" name="Mesh.hpp" local="yes" imported="no">Mesh.hpp</includes>
    <class kind="class">iv::SquareMesh_Subprovider</class>
    <class kind="class">iv::SquareMesh</class>
    <class kind="class">iv::SquareMesh_Resource</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Texture.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>Texture_8cpp.html</filename>
    <includes id="Texture_8hpp" name="Texture.hpp" local="yes" imported="no">Texture.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Texture.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Rendering/</path>
    <filename>Texture_8hpp.html</filename>
    <includes id="GlSystem_8hpp" name="GlSystem.hpp" local="yes" imported="no">GlSystem.hpp</includes>
    <includes id="GlTexture_8hpp" name="GlTexture.hpp" local="yes" imported="no">../OpenGL/GlTexture.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::Texture</class>
    <class kind="struct">iv::Texture::Metadata</class>
    <class kind="class">iv::Texture_Resource</class>
    <class kind="struct">iv::StringIO&lt; Texture::Filtering &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Font.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Text/</path>
    <filename>Font_8cpp.html</filename>
    <includes id="Font_8hpp" name="Font.hpp" local="yes" imported="no">Font.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Font.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Text/</path>
    <filename>Font_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="Texture_8hpp" name="Texture.hpp" local="yes" imported="no">../Rendering/Texture.hpp</includes>
    <class kind="class">iv::Font</class>
    <class kind="struct">iv::Font::Info</class>
    <class kind="struct">iv::Font::Glyph</class>
    <class kind="struct">iv::Font::Variant</class>
    <class kind="class">iv::Font_Resource</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FontMesh.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Text/</path>
    <filename>FontMesh_8cpp.html</filename>
    <includes id="FontMesh_8hpp" name="FontMesh.hpp" local="yes" imported="no">FontMesh.hpp</includes>
    <includes id="ivorium__graphics_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <includes id="ColorTransform_8hpp" name="ColorTransform.hpp" local="yes" imported="no">../Rendering/ColorTransform.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FontMesh.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Text/</path>
    <filename>FontMesh_8hpp.html</filename>
    <includes id="Font_8hpp" name="Font.hpp" local="yes" imported="no">Font.hpp</includes>
    <includes id="FlatShader_8hpp" name="FlatShader.hpp" local="yes" imported="no">../Rendering/FlatShader.hpp</includes>
    <includes id="ElementRenderer_8hpp" name="ElementRenderer.hpp" local="yes" imported="no">../Elements/ElementRenderer.hpp</includes>
    <class kind="class">iv::FontMesh</class>
    <class kind="struct">iv::FontMesh::LineState</class>
    <class kind="struct">iv::FontMesh::Location</class>
    <class kind="struct">iv::FontMesh::Geometry</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StreamFont.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Text/</path>
    <filename>StreamFont_8cpp.html</filename>
    <includes id="StreamFont_8hpp" name="StreamFont.hpp" local="yes" imported="no">StreamFont.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StreamFont.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Text/</path>
    <filename>StreamFont_8hpp.html</filename>
    <includes id="Font_8hpp" name="Font.hpp" local="yes" imported="no">Font.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <class kind="class">iv::StreamFont_Subprovider</class>
    <class kind="class">iv::StreamFont</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Text.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Text/</path>
    <filename>Text_8cpp.html</filename>
    <includes id="Text_8hpp" name="Text.hpp" local="yes" imported="no">Text.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Text.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Text/</path>
    <filename>Text_8hpp.html</filename>
    <includes id="TextLayout_8hpp" name="TextLayout.hpp" local="yes" imported="no">TextLayout.hpp</includes>
    <includes id="TranslucentElem_8hpp" name="TranslucentElem.hpp" local="yes" imported="no">../Elements/TranslucentElem.hpp</includes>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">../Elements/Elem.hpp</includes>
    <includes id="ElementRenderer_8hpp" name="ElementRenderer.hpp" local="yes" imported="no">../Elements/ElementRenderer.hpp</includes>
    <includes id="ivorium__systems_8hpp" name="ivorium_systems.hpp" local="no" imported="no">ivorium_systems/ivorium_systems.hpp</includes>
    <class kind="class">iv::Text</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TextLayout.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Text/</path>
    <filename>TextLayout_8cpp.html</filename>
    <includes id="Text_8hpp" name="Text.hpp" local="yes" imported="no">Text.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TextLayout.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_graphics/Text/</path>
    <filename>TextLayout_8hpp.html</filename>
    <includes id="FontMesh_8hpp" name="FontMesh.hpp" local="yes" imported="no">FontMesh.hpp</includes>
    <includes id="Elem_8hpp" name="Elem.hpp" local="yes" imported="no">../Elements/Elem.hpp</includes>
    <includes id="ElementRenderer_8hpp" name="ElementRenderer.hpp" local="yes" imported="no">../Elements/ElementRenderer.hpp</includes>
    <includes id="Slot_8hpp" name="Slot.hpp" local="yes" imported="no">../Elements/Slot.hpp</includes>
    <class kind="class">iv::TextSegment</class>
    <class kind="class">iv::TextLayout</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigFileSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ConfigFileSystem/</path>
    <filename>ConfigFileSystem_8cpp.html</filename>
    <includes id="ConfigFileSystem_8hpp" name="ConfigFileSystem.hpp" local="yes" imported="no">ConfigFileSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigFileSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ConfigFileSystem/</path>
    <filename>ConfigFileSystem_8hpp.html</filename>
    <includes id="fs_8hpp" name="fs.hpp" local="yes" imported="no">../fs.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::ConfigStream</class>
    <class kind="class">iv::ConfigFileSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DelayedLoad.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DelayedLoadSystem/</path>
    <filename>DelayedLoad_8cpp.html</filename>
    <includes id="DelayedLoadSystem_8hpp" name="DelayedLoadSystem.hpp" local="yes" imported="no">DelayedLoadSystem.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DelayedLoad.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DelayedLoadSystem/</path>
    <filename>DelayedLoad_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::DelayedLoad</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DelayedLoader.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DelayedLoadSystem/</path>
    <filename>DelayedLoader_8cpp.html</filename>
    <includes id="DelayedLoader_8hpp" name="DelayedLoader.hpp" local="yes" imported="no">DelayedLoader.hpp</includes>
    <includes id="DelayedLoadSystem_8hpp" name="DelayedLoadSystem.hpp" local="yes" imported="no">DelayedLoadSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DelayedLoader.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DelayedLoadSystem/</path>
    <filename>DelayedLoader_8hpp.html</filename>
    <includes id="DelayedLoadSystem_8hpp" name="DelayedLoadSystem.hpp" local="yes" imported="no">DelayedLoadSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::DelayedLoader</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DelayedLoadSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DelayedLoadSystem/</path>
    <filename>DelayedLoadSystem_8cpp.html</filename>
    <includes id="DelayedLoadSystem_8hpp" name="DelayedLoadSystem.hpp" local="yes" imported="no">DelayedLoadSystem.hpp</includes>
    <includes id="DelayedLoader_8hpp" name="DelayedLoader.hpp" local="yes" imported="no">DelayedLoader.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DelayedLoadSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DelayedLoadSystem/</path>
    <filename>DelayedLoadSystem_8hpp.html</filename>
    <includes id="DelayedLoad_8hpp" name="DelayedLoad.hpp" local="yes" imported="no">DelayedLoad.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::DelayedLoadStatus</class>
    <class kind="class">iv::DelayedLoadSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVar.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVar_8hpp.html</filename>
    <includes id="DVarSystem_8hpp" name="DVarSystem.hpp" local="yes" imported="no">DVarSystem.hpp</includes>
    <includes id="DVar_8inl" name="DVar.inl" local="yes" imported="no">DVar.inl</includes>
    <class kind="class">iv::DVar</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVar.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVar_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVar_Field.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVar__Field_8hpp.html</filename>
    <includes id="DVarSystem_8hpp" name="DVarSystem.hpp" local="yes" imported="no">DVarSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="DVar__Field_8inl" name="DVar_Field.inl" local="yes" imported="no">DVar_Field.inl</includes>
    <class kind="class">iv::DVar_Field</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVar_Field.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVar__Field_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarCloner.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarCloner_8hpp.html</filename>
    <includes id="DVarListener_8hpp" name="DVarListener.hpp" local="yes" imported="no">DVarListener.hpp</includes>
    <includes id="DVarId_8hpp" name="DVarId.hpp" local="yes" imported="no">DVarId.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="DVarCloner_8inl" name="DVarCloner.inl" local="yes" imported="no">DVarCloner.inl</includes>
    <class kind="class">iv::DVarCloner</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarCloner.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarCloner_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarId.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarId_8cpp.html</filename>
    <includes id="DVarId_8hpp" name="DVarId.hpp" local="yes" imported="no">DVarId.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarId.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarId_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::DVarId</class>
    <class kind="class">iv::DVarIdT</class>
    <class kind="struct">std::hash&lt; iv::DVarId &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarListener.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarListener_8cpp.html</filename>
    <includes id="DVarListener_8hpp" name="DVarListener.hpp" local="yes" imported="no">DVarListener.hpp</includes>
    <includes id="DVarSystem_8hpp" name="DVarSystem.hpp" local="yes" imported="no">DVarSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarListener.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarListener_8hpp.html</filename>
    <includes id="DVarId_8hpp" name="DVarId.hpp" local="yes" imported="no">DVarId.hpp</includes>
    <includes id="DVarSystem_8hpp" name="DVarSystem.hpp" local="yes" imported="no">DVarSystem.hpp</includes>
    <class kind="class">iv::DVarListener</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarManipulator.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarManipulator_8cpp.html</filename>
    <includes id="DVarManipulator_8hpp" name="DVarManipulator.hpp" local="yes" imported="no">DVarManipulator.hpp</includes>
    <includes id="DVarSystem_8hpp" name="DVarSystem.hpp" local="yes" imported="no">DVarSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarManipulator.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarManipulator_8hpp.html</filename>
    <includes id="DVarId_8hpp" name="DVarId.hpp" local="yes" imported="no">DVarId.hpp</includes>
    <includes id="DVarSystem_8hpp" name="DVarSystem.hpp" local="yes" imported="no">DVarSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="DVarManipulator_8inl" name="DVarManipulator.inl" local="yes" imported="no">DVarManipulator.inl</includes>
    <class kind="class">iv::DVarManipulator</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarManipulator.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarManipulator_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarProperty.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarProperty_8hpp.html</filename>
    <includes id="DVarId_8hpp" name="DVarId.hpp" local="yes" imported="no">DVarId.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="DVarProperty_8inl" name="DVarProperty.inl" local="yes" imported="no">DVarProperty.inl</includes>
    <class kind="class">iv::DVarProperty</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarProperty.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarProperty_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarSystem_8cpp.html</filename>
    <includes id="DVarSystem_8hpp" name="DVarSystem.hpp" local="yes" imported="no">DVarSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarSystem_8hpp.html</filename>
    <includes id="DVarId_8hpp" name="DVarId.hpp" local="yes" imported="no">DVarId.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="DVarSystem_8inl" name="DVarSystem.inl" local="yes" imported="no">DVarSystem.inl</includes>
    <class kind="class">iv::DVarListenerI</class>
    <class kind="class">iv::DVarSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DVarSystem.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/DVarSystem/</path>
    <filename>DVarSystem_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>fs.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/</path>
    <filename>fs_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>BlockAll_InputNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>BlockAll__InputNode_8hpp.html</filename>
    <includes id="InputNode_8hpp" name="InputNode.hpp" local="yes" imported="no">InputNode.hpp</includes>
    <class kind="class">iv::BlockAll_InputNode</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Char_InputNode.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>Char__InputNode_8cpp.html</filename>
    <includes id="Char__InputNode_8hpp" name="Char_InputNode.hpp" local="yes" imported="no">Char_InputNode.hpp</includes>
    <includes id="InputQuery_8hpp" name="InputQuery.hpp" local="yes" imported="no">InputSystem/InputQuery.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Char_InputNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>Char__InputNode_8hpp.html</filename>
    <includes id="InputNode_8hpp" name="InputNode.hpp" local="yes" imported="no">InputNode.hpp</includes>
    <includes id="Watch_8hpp" name="Watch.hpp" local="yes" imported="no">../TimeSystem/Watch.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::CharListener</class>
    <class kind="class">iv::Char_InputNode</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputBinder.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputBindingSystem/</path>
    <filename>InputBinder_8cpp.html</filename>
    <includes id="InputBinder_8hpp" name="InputBinder.hpp" local="yes" imported="no">InputBinder.hpp</includes>
    <includes id="InputBindingSystem_8hpp" name="InputBindingSystem.hpp" local="yes" imported="no">InputBindingSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputBinder.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputBindingSystem/</path>
    <filename>InputBinder_8hpp.html</filename>
    <includes id="InputId_8hpp" name="InputId.hpp" local="yes" imported="no">InputId.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::InputBinder</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputBindingListener.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputBindingSystem/</path>
    <filename>InputBindingListener_8cpp.html</filename>
    <includes id="InputBindingListener_8hpp" name="InputBindingListener.hpp" local="yes" imported="no">InputBindingListener.hpp</includes>
    <includes id="InputBindingSystem_8hpp" name="InputBindingSystem.hpp" local="yes" imported="no">InputBindingSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputBindingListener.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputBindingSystem/</path>
    <filename>InputBindingListener_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::InputBindingListener</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputBindingQuery.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputBindingSystem/</path>
    <filename>InputBindingQuery_8cpp.html</filename>
    <includes id="InputBindingQuery_8hpp" name="InputBindingQuery.hpp" local="yes" imported="no">InputBindingQuery.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputBindingQuery.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputBindingSystem/</path>
    <filename>InputBindingQuery_8hpp.html</filename>
    <includes id="InputBindingSystem_8hpp" name="InputBindingSystem.hpp" local="yes" imported="no">InputBindingSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::InputBindingQuery</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputBindingSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputBindingSystem/</path>
    <filename>InputBindingSystem_8cpp.html</filename>
    <includes id="InputBindingSystem_8hpp" name="InputBindingSystem.hpp" local="yes" imported="no">InputBindingSystem.hpp</includes>
    <includes id="InputBindingQuery_8hpp" name="InputBindingQuery.hpp" local="yes" imported="no">InputBindingQuery.hpp</includes>
    <includes id="InputBindingListener_8hpp" name="InputBindingListener.hpp" local="yes" imported="no">InputBindingListener.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputBindingSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputBindingSystem/</path>
    <filename>InputBindingSystem_8hpp.html</filename>
    <includes id="InputId_8hpp" name="InputId.hpp" local="yes" imported="no">InputId.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::InputBindingSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputId.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputBindingSystem/</path>
    <filename>InputId_8cpp.html</filename>
    <includes id="InputId_8hpp" name="InputId.hpp" local="yes" imported="no">InputId.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputId.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputBindingSystem/</path>
    <filename>InputId_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::InputId</class>
    <class kind="struct">std::hash&lt; iv::InputId &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputEvent.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>InputEvent_8cpp.html</filename>
    <includes id="InputEvent_8hpp" name="InputEvent.hpp" local="yes" imported="no">InputEvent.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputEvent.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>InputEvent_8hpp.html</filename>
    <includes id="Watch_8hpp" name="Watch.hpp" local="yes" imported="no">../TimeSystem/Watch.hpp</includes>
    <includes id="DVar_8hpp" name="DVar.hpp" local="yes" imported="no">../DVarSystem/DVar.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::InputEvent</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputNode.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>InputNode_8cpp.html</filename>
    <includes id="InputNode_8hpp" name="InputNode.hpp" local="yes" imported="no">InputNode.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>InputNode_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::InputRoot</class>
    <class kind="class">iv::InputNode</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputQuery.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputSystem/</path>
    <filename>InputQuery_8cpp.html</filename>
    <includes id="InputQuery_8hpp" name="InputQuery.hpp" local="yes" imported="no">InputQuery.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputQuery.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputSystem/</path>
    <filename>InputQuery_8hpp.html</filename>
    <includes id="InputSystem_8hpp" name="InputSystem.hpp" local="yes" imported="no">InputSystem.hpp</includes>
    <class kind="class">iv::InputQuery</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputSystem/</path>
    <filename>InputSystem_8cpp.html</filename>
    <includes id="InputSystem_8hpp" name="InputSystem.hpp" local="yes" imported="no">InputSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="InputNode_8hpp" name="InputNode.hpp" local="yes" imported="no">../InputNode.hpp</includes>
    <includes id="SourceInputNode_8hpp" name="SourceInputNode.hpp" local="yes" imported="no">../SourceInputNode.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>InputSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/InputSystem/</path>
    <filename>InputSystem_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::InputSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Key_InputNode.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>Key__InputNode_8cpp.html</filename>
    <includes id="Key__InputNode_8hpp" name="Key_InputNode.hpp" local="yes" imported="no">Key_InputNode.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Key_InputNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>Key__InputNode_8hpp.html</filename>
    <includes id="InputEvent_8hpp" name="InputEvent.hpp" local="yes" imported="no">InputEvent.hpp</includes>
    <includes id="InputNode_8hpp" name="InputNode.hpp" local="yes" imported="no">InputNode.hpp</includes>
    <includes id="InputBindingQuery_8hpp" name="InputBindingQuery.hpp" local="yes" imported="no">InputBindingSystem/InputBindingQuery.hpp</includes>
    <includes id="InputId_8hpp" name="InputId.hpp" local="yes" imported="no">InputBindingSystem/InputId.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::Key_InputNode</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Position_InputNode.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>Position__InputNode_8cpp.html</filename>
    <includes id="Position__InputNode_8hpp" name="Position_InputNode.hpp" local="yes" imported="no">Position_InputNode.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Position_InputNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>Position__InputNode_8hpp.html</filename>
    <includes id="InputBindingQuery_8hpp" name="InputBindingQuery.hpp" local="yes" imported="no">InputBindingSystem/InputBindingQuery.hpp</includes>
    <includes id="InputQuery_8hpp" name="InputQuery.hpp" local="yes" imported="no">InputSystem/InputQuery.hpp</includes>
    <includes id="InputNode_8hpp" name="InputNode.hpp" local="yes" imported="no">InputNode.hpp</includes>
    <includes id="InputEvent_8hpp" name="InputEvent.hpp" local="yes" imported="no">InputEvent.hpp</includes>
    <includes id="FrameUpdateClient_8hpp" name="FrameUpdateClient.hpp" local="yes" imported="no">../TimeSystem/FrameUpdateClient.hpp</includes>
    <class kind="class">iv::Position_InputNode</class>
    <class kind="class">iv::Position_InputNode::Tester</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SourceInputNode.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>SourceInputNode_8cpp.html</filename>
    <includes id="SourceInputNode_8hpp" name="SourceInputNode.hpp" local="yes" imported="no">SourceInputNode.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SourceInputNode.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/InputSystem/</path>
    <filename>SourceInputNode_8hpp.html</filename>
    <includes id="InputNode_8hpp" name="InputNode.hpp" local="yes" imported="no">InputNode.hpp</includes>
    <includes id="InputBindingListener_8hpp" name="InputBindingListener.hpp" local="yes" imported="no">InputBindingSystem/InputBindingListener.hpp</includes>
    <includes id="FrameUpdateClient_8hpp" name="FrameUpdateClient.hpp" local="yes" imported="no">../TimeSystem/FrameUpdateClient.hpp</includes>
    <class kind="class">iv::SourceInputNode</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ivorium_systems.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/</path>
    <filename>ivorium__systems_8hpp.html</filename>
    <includes id="TimeSystem_8hpp" name="TimeSystem.hpp" local="yes" imported="no">TimeSystem/TimeSystem.hpp</includes>
    <includes id="FrameUpdateClient_8hpp" name="FrameUpdateClient.hpp" local="yes" imported="no">TimeSystem/FrameUpdateClient.hpp</includes>
    <includes id="TimeId_8hpp" name="TimeId.hpp" local="yes" imported="no">TimeSystem/TimeId.hpp</includes>
    <includes id="FixedUpdateClient_8hpp" name="FixedUpdateClient.hpp" local="yes" imported="no">TimeSystem/FixedUpdateClient.hpp</includes>
    <includes id="TimeManipulator_8hpp" name="TimeManipulator.hpp" local="yes" imported="no">TimeSystem/TimeManipulator.hpp</includes>
    <includes id="Watch_8hpp" name="Watch.hpp" local="yes" imported="no">TimeSystem/Watch.hpp</includes>
    <includes id="fs_8hpp" name="fs.hpp" local="yes" imported="no">fs.hpp</includes>
    <includes id="ResourcePath_8hpp" name="ResourcePath.hpp" local="yes" imported="no">ResourceManagementSystem/ResourcePath.hpp</includes>
    <includes id="StreamResourceSubprovider_8hpp" name="StreamResourceSubprovider.hpp" local="yes" imported="no">ResourceManagementSystem/StreamResource/StreamResourceSubprovider.hpp</includes>
    <includes id="StreamResourceProvider_8hpp" name="StreamResourceProvider.hpp" local="yes" imported="no">ResourceManagementSystem/StreamResource/StreamResourceProvider.hpp</includes>
    <includes id="ResourceAccess_8hpp" name="ResourceAccess.hpp" local="yes" imported="no">ResourceManagementSystem/ResourceAccess.hpp</includes>
    <includes id="SingularResource_8hpp" name="SingularResource.hpp" local="yes" imported="no">ResourceManagementSystem/SingularResource.hpp</includes>
    <includes id="ResourceProvider_8hpp" name="ResourceProvider.hpp" local="yes" imported="no">ResourceManagementSystem/ResourceProvider.hpp</includes>
    <includes id="VirtualResourceProvider_8hpp" name="VirtualResourceProvider.hpp" local="yes" imported="no">ResourceManagementSystem/VirtualResource/VirtualResourceProvider.hpp</includes>
    <includes id="ResourceManagementSystem_8hpp" name="ResourceManagementSystem.hpp" local="yes" imported="no">ResourceManagementSystem/ResourceManagementSystem.hpp</includes>
    <includes id="DataStream_8hpp" name="DataStream.hpp" local="yes" imported="no">ResourceManagementSystem/DataStream.hpp</includes>
    <includes id="FSResourceProvider_8hpp" name="FSResourceProvider.hpp" local="yes" imported="no">ResourceManagementSystem/Providers/FSResourceProvider.hpp</includes>
    <includes id="DVarManipulator_8hpp" name="DVarManipulator.hpp" local="yes" imported="no">DVarSystem/DVarManipulator.hpp</includes>
    <includes id="DVar__Field_8hpp" name="DVar_Field.hpp" local="yes" imported="no">DVarSystem/DVar_Field.hpp</includes>
    <includes id="DVarSystem_8hpp" name="DVarSystem.hpp" local="yes" imported="no">DVarSystem/DVarSystem.hpp</includes>
    <includes id="DVarProperty_8hpp" name="DVarProperty.hpp" local="yes" imported="no">DVarSystem/DVarProperty.hpp</includes>
    <includes id="DVarCloner_8hpp" name="DVarCloner.hpp" local="yes" imported="no">DVarSystem/DVarCloner.hpp</includes>
    <includes id="DVar_8hpp" name="DVar.hpp" local="yes" imported="no">DVarSystem/DVar.hpp</includes>
    <includes id="DVarId_8hpp" name="DVarId.hpp" local="yes" imported="no">DVarSystem/DVarId.hpp</includes>
    <includes id="DVarListener_8hpp" name="DVarListener.hpp" local="yes" imported="no">DVarSystem/DVarListener.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <includes id="ConfigFileSystem_8hpp" name="ConfigFileSystem.hpp" local="yes" imported="no">ConfigFileSystem/ConfigFileSystem.hpp</includes>
    <includes id="RandomId_8hpp" name="RandomId.hpp" local="yes" imported="no">RandomSystem/RandomId.hpp</includes>
    <includes id="RandomSystem_8hpp" name="RandomSystem.hpp" local="yes" imported="no">RandomSystem/RandomSystem.hpp</includes>
    <includes id="RandomGenerator_8hpp" name="RandomGenerator.hpp" local="yes" imported="no">RandomSystem/RandomGenerator.hpp</includes>
    <includes id="DelayedLoad_8hpp" name="DelayedLoad.hpp" local="yes" imported="no">DelayedLoadSystem/DelayedLoad.hpp</includes>
    <includes id="DelayedLoader_8hpp" name="DelayedLoader.hpp" local="yes" imported="no">DelayedLoadSystem/DelayedLoader.hpp</includes>
    <includes id="DelayedLoadSystem_8hpp" name="DelayedLoadSystem.hpp" local="yes" imported="no">DelayedLoadSystem/DelayedLoadSystem.hpp</includes>
    <includes id="InputBinder_8hpp" name="InputBinder.hpp" local="yes" imported="no">InputSystem/InputBindingSystem/InputBinder.hpp</includes>
    <includes id="InputBindingListener_8hpp" name="InputBindingListener.hpp" local="yes" imported="no">InputSystem/InputBindingSystem/InputBindingListener.hpp</includes>
    <includes id="InputBindingQuery_8hpp" name="InputBindingQuery.hpp" local="yes" imported="no">InputSystem/InputBindingSystem/InputBindingQuery.hpp</includes>
    <includes id="InputId_8hpp" name="InputId.hpp" local="yes" imported="no">InputSystem/InputBindingSystem/InputId.hpp</includes>
    <includes id="InputBindingSystem_8hpp" name="InputBindingSystem.hpp" local="yes" imported="no">InputSystem/InputBindingSystem/InputBindingSystem.hpp</includes>
    <includes id="InputEvent_8hpp" name="InputEvent.hpp" local="yes" imported="no">InputSystem/InputEvent.hpp</includes>
    <includes id="SourceInputNode_8hpp" name="SourceInputNode.hpp" local="yes" imported="no">InputSystem/SourceInputNode.hpp</includes>
    <includes id="Char__InputNode_8hpp" name="Char_InputNode.hpp" local="yes" imported="no">InputSystem/Char_InputNode.hpp</includes>
    <includes id="InputNode_8hpp" name="InputNode.hpp" local="yes" imported="no">InputSystem/InputNode.hpp</includes>
    <includes id="Key__InputNode_8hpp" name="Key_InputNode.hpp" local="yes" imported="no">InputSystem/Key_InputNode.hpp</includes>
    <includes id="InputSystem_8hpp" name="InputSystem.hpp" local="yes" imported="no">InputSystem/InputSystem/InputSystem.hpp</includes>
    <includes id="InputQuery_8hpp" name="InputQuery.hpp" local="yes" imported="no">InputSystem/InputSystem/InputQuery.hpp</includes>
    <includes id="Position__InputNode_8hpp" name="Position_InputNode.hpp" local="yes" imported="no">InputSystem/Position_InputNode.hpp</includes>
    <includes id="BlockAll__InputNode_8hpp" name="BlockAll_InputNode.hpp" local="yes" imported="no">InputSystem/BlockAll_InputNode.hpp</includes>
  </compound>
  <compound kind="file">
    <name>RandomGenerator.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/RandomSystem/</path>
    <filename>RandomGenerator_8cpp.html</filename>
    <includes id="RandomGenerator_8hpp" name="RandomGenerator.hpp" local="yes" imported="no">RandomGenerator.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>RandomGenerator.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/RandomSystem/</path>
    <filename>RandomGenerator_8hpp.html</filename>
    <includes id="RandomSystem_8hpp" name="RandomSystem.hpp" local="yes" imported="no">RandomSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="RandomGenerator_8inl" name="RandomGenerator.inl" local="yes" imported="no">RandomGenerator.inl</includes>
    <class kind="class">iv::RandomGenerator</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>RandomGenerator.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/RandomSystem/</path>
    <filename>RandomGenerator_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>RandomId.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/RandomSystem/</path>
    <filename>RandomId_8cpp.html</filename>
    <includes id="RandomId_8hpp" name="RandomId.hpp" local="yes" imported="no">RandomId.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>RandomId.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/RandomSystem/</path>
    <filename>RandomId_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::RandomId</class>
    <class kind="struct">std::hash&lt; iv::RandomId &gt;</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>RandomSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/RandomSystem/</path>
    <filename>RandomSystem_8cpp.html</filename>
    <includes id="RandomSystem_8hpp" name="RandomSystem.hpp" local="yes" imported="no">RandomSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>RandomSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/RandomSystem/</path>
    <filename>RandomSystem_8hpp.html</filename>
    <includes id="RandomId_8hpp" name="RandomId.hpp" local="yes" imported="no">RandomId.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::RandomSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DataStream.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>DataStream_8cpp.html</filename>
    <includes id="DataStream_8hpp" name="DataStream.hpp" local="yes" imported="no">DataStream.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DataStream.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>DataStream_8hpp.html</filename>
    <includes id="StreamResourceProvider_8hpp" name="StreamResourceProvider.hpp" local="yes" imported="no">StreamResource/StreamResourceProvider.hpp</includes>
    <includes id="StreamResourceSubprovider_8hpp" name="StreamResourceSubprovider.hpp" local="yes" imported="no">StreamResource/StreamResourceSubprovider.hpp</includes>
    <includes id="SingularResource_8hpp" name="SingularResource.hpp" local="yes" imported="no">SingularResource.hpp</includes>
    <class kind="class">iv::DataStream_Subprovider</class>
    <class kind="class">iv::DataStream</class>
    <class kind="class">iv::DataStream_Resource</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FSResourceProvider.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/Providers/</path>
    <filename>FSResourceProvider_8cpp.html</filename>
    <includes id="FSResourceProvider_8hpp" name="FSResourceProvider.hpp" local="yes" imported="no">FSResourceProvider.hpp</includes>
    <includes id="ResourcePath_8hpp" name="ResourcePath.hpp" local="yes" imported="no">../ResourcePath.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FSResourceProvider.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/Providers/</path>
    <filename>FSResourceProvider_8hpp.html</filename>
    <includes id="StreamResourceProvider_8hpp" name="StreamResourceProvider.hpp" local="yes" imported="no">../StreamResource/StreamResourceProvider.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::FSResourceProvider</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceAccess.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>ResourceAccess_8cpp.html</filename>
    <includes id="ResourceAccess_8hpp" name="ResourceAccess.hpp" local="yes" imported="no">ResourceAccess.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceAccess.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>ResourceAccess_8hpp.html</filename>
    <includes id="ResourceManagementSystem_8hpp" name="ResourceManagementSystem.hpp" local="yes" imported="no">ResourceManagementSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="ResourceAccess_8inl" name="ResourceAccess.inl" local="yes" imported="no">ResourceAccess.inl</includes>
    <class kind="class">iv::ResourceAccess</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceAccess.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>ResourceAccess_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceManagementSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>ResourceManagementSystem_8cpp.html</filename>
    <includes id="ResourceManagementSystem_8hpp" name="ResourceManagementSystem.hpp" local="yes" imported="no">ResourceManagementSystem.hpp</includes>
    <includes id="ResourceProvider_8hpp" name="ResourceProvider.hpp" local="yes" imported="no">ResourceProvider.hpp</includes>
    <includes id="VirtualResourceProvider_8hpp" name="VirtualResourceProvider.hpp" local="yes" imported="no">VirtualResource/VirtualResourceProvider.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceManagementSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>ResourceManagementSystem_8hpp.html</filename>
    <includes id="ResourceProvider_8hpp" name="ResourceProvider.hpp" local="yes" imported="no">ResourceProvider.hpp</includes>
    <includes id="ResourcePath_8hpp" name="ResourcePath.hpp" local="yes" imported="no">ResourcePath.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="ResourceManagementSystem_8inl" name="ResourceManagementSystem.inl" local="yes" imported="no">ResourceManagementSystem.inl</includes>
    <class kind="class">iv::ResourcesRoot</class>
    <class kind="class">iv::ResourceManagementSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceManagementSystem.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>ResourceManagementSystem_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ResourcePath.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>ResourcePath_8cpp.html</filename>
    <includes id="ResourcePath_8hpp" name="ResourcePath.hpp" local="yes" imported="no">ResourcePath.hpp</includes>
    <includes id="fs_8hpp" name="fs.hpp" local="yes" imported="no">../fs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ResourcePath.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>ResourcePath_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::ResourcePath</class>
    <class kind="class">iv::Resource_LogTrace</class>
    <class kind="struct">iv::StringIO&lt; ResourcePath &gt;</class>
    <class kind="struct">std::hash&lt; iv::ResourcePath &gt;</class>
    <namespace>iv</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aa7df80a9d095013141e5516d2a4fdc58</anchor>
      <arglist>(std::ostream &amp;out, iv::ResourcePath const &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ResourceProvider.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>ResourceProvider_8cpp.html</filename>
    <includes id="ResourceProvider_8hpp" name="ResourceProvider.hpp" local="yes" imported="no">ResourceProvider.hpp</includes>
    <includes id="ResourceManagementSystem_8hpp" name="ResourceManagementSystem.hpp" local="yes" imported="no">ResourceManagementSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceProvider.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>ResourceProvider_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::ResourceProvider</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SingularResource.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>SingularResource_8hpp.html</filename>
    <includes id="ResourceAccess_8hpp" name="ResourceAccess.hpp" local="yes" imported="no">ResourceAccess.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="SingularResource_8inl" name="SingularResource.inl" local="yes" imported="no">SingularResource.inl</includes>
    <class kind="class">iv::SingularResource</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SingularResource.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/</path>
    <filename>SingularResource_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StreamResourceProvider.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/StreamResource/</path>
    <filename>StreamResourceProvider_8cpp.html</filename>
    <includes id="StreamResourceProvider_8hpp" name="StreamResourceProvider.hpp" local="yes" imported="no">StreamResourceProvider.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StreamResourceProvider.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/StreamResource/</path>
    <filename>StreamResourceProvider_8hpp.html</filename>
    <includes id="ResourceProvider_8hpp" name="ResourceProvider.hpp" local="yes" imported="no">../ResourceProvider.hpp</includes>
    <includes id="ResourceManagementSystem_8hpp" name="ResourceManagementSystem.hpp" local="yes" imported="no">../ResourceManagementSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="StreamResourceProvider_8inl" name="StreamResourceProvider.inl" local="yes" imported="no">StreamResourceProvider.inl</includes>
    <class kind="class">iv::StreamResource</class>
    <class kind="class">iv::StreamResourceProvider</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StreamResourceProvider.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/StreamResource/</path>
    <filename>StreamResourceProvider_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StreamResourceSubprovider.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/StreamResource/</path>
    <filename>StreamResourceSubprovider_8cpp.html</filename>
    <includes id="StreamResourceSubprovider_8hpp" name="StreamResourceSubprovider.hpp" local="yes" imported="no">StreamResourceSubprovider.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>StreamResourceSubprovider.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/StreamResource/</path>
    <filename>StreamResourceSubprovider_8hpp.html</filename>
    <includes id="StreamResourceProvider_8hpp" name="StreamResourceProvider.hpp" local="yes" imported="no">StreamResourceProvider.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::StreamResourceSubprovider</class>
    <class kind="class">iv::Plain_StreamResourceSubprovider</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>VirtualResourceProvider.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/VirtualResource/</path>
    <filename>VirtualResourceProvider_8cpp.html</filename>
    <includes id="VirtualResourceProvider_8hpp" name="VirtualResourceProvider.hpp" local="yes" imported="no">VirtualResourceProvider.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>VirtualResourceProvider.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/VirtualResource/</path>
    <filename>VirtualResourceProvider_8hpp.html</filename>
    <includes id="ResourceProvider_8hpp" name="ResourceProvider.hpp" local="yes" imported="no">../ResourceProvider.hpp</includes>
    <includes id="ResourceManagementSystem_8hpp" name="ResourceManagementSystem.hpp" local="yes" imported="no">../ResourceManagementSystem.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <includes id="VirtualResourceProvider_8inl" name="VirtualResourceProvider.inl" local="yes" imported="no">VirtualResourceProvider.inl</includes>
    <class kind="class">iv::VirtualResourceProvider</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>VirtualResourceProvider.inl</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/ResourceManagementSystem/VirtualResource/</path>
    <filename>VirtualResourceProvider_8inl.html</filename>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FixedUpdateClient.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>FixedUpdateClient_8cpp.html</filename>
    <includes id="FixedUpdateClient_8hpp" name="FixedUpdateClient.hpp" local="yes" imported="no">FixedUpdateClient.hpp</includes>
    <includes id="TimeSystem_8hpp" name="TimeSystem.hpp" local="yes" imported="no">TimeSystem.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FixedUpdateClient.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>FixedUpdateClient_8hpp.html</filename>
    <includes id="TimeId_8hpp" name="TimeId.hpp" local="yes" imported="no">TimeId.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::FixedUpdateClient</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FrameUpdateClient.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>FrameUpdateClient_8cpp.html</filename>
    <includes id="FrameUpdateClient_8hpp" name="FrameUpdateClient.hpp" local="yes" imported="no">FrameUpdateClient.hpp</includes>
    <includes id="TimeSystem_8hpp" name="TimeSystem.hpp" local="yes" imported="no">TimeSystem.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>FrameUpdateClient.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>FrameUpdateClient_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::FrameUpdateClient</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TimeId.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>TimeId_8cpp.html</filename>
    <includes id="TimeId_8hpp" name="TimeId.hpp" local="yes" imported="no">TimeId.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TimeId.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>TimeId_8hpp.html</filename>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::TimeId</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TimeManipulator.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>TimeManipulator_8cpp.html</filename>
    <includes id="TimeManipulator_8hpp" name="TimeManipulator.hpp" local="yes" imported="no">TimeManipulator.hpp</includes>
    <includes id="TimeSystem_8hpp" name="TimeSystem.hpp" local="yes" imported="no">TimeSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TimeManipulator.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>TimeManipulator_8hpp.html</filename>
    <includes id="TimeId_8hpp" name="TimeId.hpp" local="yes" imported="no">TimeId.hpp</includes>
    <class kind="class">iv::TimeManipulator</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TimeSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>TimeSystem_8cpp.html</filename>
    <includes id="TimeSystem_8hpp" name="TimeSystem.hpp" local="yes" imported="no">TimeSystem.hpp</includes>
    <includes id="Watch_8hpp" name="Watch.hpp" local="yes" imported="no">Watch.hpp</includes>
    <includes id="FixedUpdateClient_8hpp" name="FixedUpdateClient.hpp" local="yes" imported="no">FixedUpdateClient.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>TimeSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>TimeSystem_8hpp.html</filename>
    <includes id="FrameUpdateClient_8hpp" name="FrameUpdateClient.hpp" local="yes" imported="no">FrameUpdateClient.hpp</includes>
    <includes id="TimeId_8hpp" name="TimeId.hpp" local="yes" imported="no">TimeId.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::TimeSystem</class>
    <class kind="struct">iv::TimeSystem::UpdateItem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Watch.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>Watch_8cpp.html</filename>
    <includes id="Watch_8hpp" name="Watch.hpp" local="yes" imported="no">Watch.hpp</includes>
    <includes id="TimeSystem_8hpp" name="TimeSystem.hpp" local="yes" imported="no">TimeSystem.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Watch.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_systems/TimeSystem/</path>
    <filename>Watch_8hpp.html</filename>
    <includes id="TimeId_8hpp" name="TimeId.hpp" local="yes" imported="no">TimeId.hpp</includes>
    <includes id="TimeSystem_8hpp" name="TimeSystem.hpp" local="yes" imported="no">TimeSystem.hpp</includes>
    <includes id="ivorium__systems_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">../Defs.hpp</includes>
    <includes id="ivorium__core_8hpp" name="ivorium_core.hpp" local="no" imported="no">ivorium_core/ivorium_core.hpp</includes>
    <class kind="class">iv::Watch</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultLumaStyles.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>DefaultLumaStyles_8cpp.html</filename>
    <includes id="DefaultLumaStyles_8hpp" name="DefaultLumaStyles.hpp" local="yes" imported="no">DefaultLumaStyles.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultLumaStyles.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>DefaultLumaStyles_8hpp.html</filename>
    <includes id="LumaSystem_8hpp" name="LumaSystem.hpp" local="yes" imported="no">LumaSystem.hpp</includes>
    <class kind="class">iv::DefaultLumaStyles</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>ivorium_UI.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>ivorium__UI_8hpp.html</filename>
    <includes id="SimpleSplash_8hpp" name="SimpleSplash.hpp" local="yes" imported="no">SimpleSplash.hpp</includes>
    <includes id="LumaText_8hpp" name="LumaText.hpp" local="yes" imported="no">LumaText.hpp</includes>
    <includes id="LumaButton_8hpp" name="LumaButton.hpp" local="yes" imported="no">LumaButton.hpp</includes>
    <includes id="LumaFrame_8hpp" name="LumaFrame.hpp" local="yes" imported="no">LumaFrame.hpp</includes>
    <includes id="LumaScroller_8hpp" name="LumaScroller.hpp" local="yes" imported="no">LumaScroller.hpp</includes>
    <includes id="ivorium__UI_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <includes id="DefaultLumaStyles_8hpp" name="DefaultLumaStyles.hpp" local="yes" imported="no">DefaultLumaStyles.hpp</includes>
    <includes id="LumaSystem_8hpp" name="LumaSystem.hpp" local="yes" imported="no">LumaSystem.hpp</includes>
    <includes id="Rectangle__LumaButton_8hpp" name="Rectangle_LumaButton.hpp" local="yes" imported="no">Rectangle_LumaButton.hpp</includes>
  </compound>
  <compound kind="file">
    <name>LumaButton.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>LumaButton_8cpp.html</filename>
    <includes id="LumaButton_8hpp" name="LumaButton.hpp" local="yes" imported="no">LumaButton.hpp</includes>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <includes id="ivorium__UI_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LumaButton.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>LumaButton_8hpp.html</filename>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <includes id="LumaSystem_8hpp" name="LumaSystem.hpp" local="yes" imported="no">LumaSystem.hpp</includes>
    <class kind="class">iv::LumaButton</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LumaFrame.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>LumaFrame_8cpp.html</filename>
    <includes id="LumaFrame_8hpp" name="LumaFrame.hpp" local="yes" imported="no">LumaFrame.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LumaFrame.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>LumaFrame_8hpp.html</filename>
    <includes id="LumaScroller_8hpp" name="LumaScroller.hpp" local="yes" imported="no">LumaScroller.hpp</includes>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <class kind="class">iv::LumaFrame</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LumaScroller.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>LumaScroller_8cpp.html</filename>
    <includes id="LumaScroller_8hpp" name="LumaScroller.hpp" local="yes" imported="no">LumaScroller.hpp</includes>
    <includes id="ivorium__UI_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LumaScroller.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>LumaScroller_8hpp.html</filename>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <class kind="class">iv::LumaScroller</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LumaSystem.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>LumaSystem_8cpp.html</filename>
    <includes id="LumaSystem_8hpp" name="LumaSystem.hpp" local="yes" imported="no">LumaSystem.hpp</includes>
    <includes id="ivorium__UI_2Defs_8hpp" name="Defs.hpp" local="yes" imported="no">Defs.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LumaSystem.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>LumaSystem_8hpp.html</filename>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <class kind="class">iv::LumaStyleId</class>
    <class kind="struct">std::hash&lt; iv::LumaStyleId &gt;</class>
    <class kind="struct">iv::LumaStyle</class>
    <class kind="class">iv::LumaListener</class>
    <class kind="class">iv::LumaStyler</class>
    <class kind="class">iv::LumaSystem</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LumaText.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>LumaText_8cpp.html</filename>
    <includes id="LumaText_8hpp" name="LumaText.hpp" local="yes" imported="no">LumaText.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>LumaText.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>LumaText_8hpp.html</filename>
    <includes id="LumaSystem_8hpp" name="LumaSystem.hpp" local="yes" imported="no">LumaSystem.hpp</includes>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <class kind="class">iv::LumaText</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Rectangle_LumaButton.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>Rectangle__LumaButton_8cpp.html</filename>
    <includes id="Rectangle__LumaButton_8hpp" name="Rectangle_LumaButton.hpp" local="yes" imported="no">Rectangle_LumaButton.hpp</includes>
    <includes id="LumaText_8hpp" name="LumaText.hpp" local="yes" imported="no">LumaText.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>Rectangle_LumaButton.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>Rectangle__LumaButton_8hpp.html</filename>
    <includes id="LumaButton_8hpp" name="LumaButton.hpp" local="yes" imported="no">LumaButton.hpp</includes>
    <class kind="class">iv::Rectangle_LumaButton</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleSplash.cpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>SimpleSplash_8cpp.html</filename>
    <includes id="SimpleSplash_8hpp" name="SimpleSplash.hpp" local="yes" imported="no">SimpleSplash.hpp</includes>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleSplash.hpp</name>
    <path>/home/runner/work/ivorium/ivorium/src/ivorium_UI/</path>
    <filename>SimpleSplash_8hpp.html</filename>
    <includes id="ivorium__graphics_8hpp" name="ivorium_graphics.hpp" local="no" imported="no">ivorium_graphics/ivorium_graphics.hpp</includes>
    <class kind="class">iv::SimpleSplash</class>
    <namespace>iv</namespace>
  </compound>
  <compound kind="file">
    <name>mainpage.dox</name>
    <path>/home/runner/work/ivorium/ivorium/src/</path>
    <filename>mainpage_8dox.html</filename>
  </compound>
  <compound kind="struct">
    <name>iv::Activator</name>
    <filename>structiv_1_1Activator.html</filename>
    <member kind="function">
      <type></type>
      <name>Activator</name>
      <anchorfile>structiv_1_1Activator.html</anchorfile>
      <anchor>a3df7fd2b664c2b22a1c659bfb35bbca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Activator</name>
      <anchorfile>structiv_1_1Activator.html</anchorfile>
      <anchor>a6b5766de24ff7bfff758b8c1a913f9fd</anchor>
      <arglist>(unsigned char initial)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structiv_1_1Activator.html</anchorfile>
      <anchor>a670692e5d1ee1091499dd6a49eecf11c</anchor>
      <arglist>(Activator const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structiv_1_1Activator.html</anchorfile>
      <anchor>a715df4ac08c975479c890ea8f4891f76</anchor>
      <arglist>(Activator const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structiv_1_1Activator.html</anchorfile>
      <anchor>a9b85cb6a8b327bc8975f18dcc287cc49</anchor>
      <arglist>(Activator const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Activator</type>
      <name>MakeActivated</name>
      <anchorfile>structiv_1_1Activator.html</anchorfile>
      <anchor>a62d79d38b209998a8cb74d065273aa92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>ReadActivations</name>
      <anchorfile>structiv_1_1Activator.html</anchorfile>
      <anchor>ad914846a3904b776452e1c152453f116</anchor>
      <arglist>(Activator const &amp;reference) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>CopyActivations</name>
      <anchorfile>structiv_1_1Activator.html</anchorfile>
      <anchor>a4f3c69edc057a7fedbb9e1d479da5270</anchor>
      <arglist>(Activator &amp;reference) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CopyActivation</name>
      <anchorfile>structiv_1_1Activator.html</anchorfile>
      <anchor>aa8ea6788d2c062c3390bf18528865227</anchor>
      <arglist>(Activator &amp;reference) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>Value</name>
      <anchorfile>structiv_1_1Activator.html</anchorfile>
      <anchor>a4b57a794c643e467f6dbbe3221d424cd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Activator_AnimNode</name>
    <filename>classiv_1_1Activator__AnimNode.html</filename>
    <base>AnimNode&lt; iv::Activator &gt;</base>
    <member kind="function">
      <type></type>
      <name>Activator_AnimNode</name>
      <anchorfile>classiv_1_1Activator__AnimNode.html</anchorfile>
      <anchor>adeac7fdad2386db8b41743888f42d44f</anchor>
      <arglist>(iv::Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classiv_1_1Activator__AnimNode.html</anchorfile>
      <anchor>a896dab1a614270a3d6b87d42567dfce1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Align</name>
    <filename>classiv_1_1Align.html</filename>
    <base>OneChildElem&lt; SlotChild &gt;</base>
    <base>iv::SlotChild</base>
    <member kind="function">
      <type></type>
      <name>Align</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a016a085fa82d55aed13175a319ec47c1</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a14346ca8e03319eb7bcc209328470bf4</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>Align *</type>
      <name>enabled</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a1eb5a0315856828ed20cd2cbfd504c56</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>Align *</type>
      <name>dontExpand</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a95dff4636e1c42f1ef22298c429be071</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>Align *</type>
      <name>keepAspect</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>ab9a1126d493b5275c7838f6c9c5ceb9d</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>Align *</type>
      <name>resizeScales</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>ae705aebeb52bf730b51088dde01f81bb</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>Align *</type>
      <name>innerAnchor</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a0d088d4d3ecab0c8b4979a56c38dc115</anchor>
      <arglist>(float3)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a52a6478bd4c01334d7aa29b4e6e7d29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; bool &gt;</type>
      <name>attr_dontExpand</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a81fa04edc9a9546ddae461c469117121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; bool &gt;</type>
      <name>attr_keepAspect</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>aab4758e72edc65a485a338a57e3842ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; bool &gt;</type>
      <name>attr_resizeScales</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a797371f11c8823d9817607db2625de2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float3 &gt;</type>
      <name>attr_innerAnchor</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a7807f03f919e8366374cebbbc6e3deb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a1398c604a5fcd334d3a3cef7782f8080</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1Align.html</anchorfile>
      <anchor>a87cb8afaa20bec209415e47c4a8f752a</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::interpolator::always_false</name>
    <filename>structiv_1_1interpolator_1_1always__false.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>iv::AndroidAssetResourceProvider</name>
    <filename>classiv_1_1AndroidAssetResourceProvider.html</filename>
    <base protection="private">iv::StreamResourceProvider</base>
    <member kind="function">
      <type></type>
      <name>AndroidAssetResourceProvider</name>
      <anchorfile>classiv_1_1AndroidAssetResourceProvider.html</anchorfile>
      <anchor>a7f8c969239e47b7e5ce25018a5dba54e</anchor>
      <arglist>(Instance *inst, size_t priority, std::string const &amp;root_path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>with_stream</name>
      <anchorfile>classiv_1_1AndroidAssetResourceProvider.html</anchorfile>
      <anchor>a455f0d5fec30341a7e8ffd49e1c47747</anchor>
      <arglist>(ResourcePath const &amp;path, std::function&lt; void(std::istream &amp;) &gt; const &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>with_metadata_stream</name>
      <anchorfile>classiv_1_1AndroidAssetResourceProvider.html</anchorfile>
      <anchor>a0194e706dc8d1c0d65c777ec57f2d1a7</anchor>
      <arglist>(std::function&lt; void(std::istream &amp;) &gt; const &amp;) const override</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1AndroidAssetResourceProvider.html</anchorfile>
      <anchor>a8ebf0453db4728c5496d22b8af885866</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::AnimConnector</name>
    <filename>classiv_1_1AnimConnector.html</filename>
    <member kind="function">
      <type></type>
      <name>AnimConnector</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>a8b3236a8a040a4f25f19aa5f671bb6af</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>a3347f0693f158febd408efb3b1041cdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>a6baa06083f88273727405e576e84cd2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_eachChild</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>a2caf67a246e0663f29ececa4e4212d86</anchor>
      <arglist>(std::function&lt; void(AnimNodeI *) &gt; const &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_childDisconnect</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>a2b839d67163567f1cded8cf1f367bb04</anchor>
      <arglist>(AnimNodeI *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_eachParent</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>a7262fcefcbf8588b8f932a6277b01e59</anchor>
      <arglist>(std::function&lt; void(AnimNodeI *) &gt; const &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_parentDisconnect</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>a4419e2f65fb5ee4bbfbde1d2e66cc6f5</anchor>
      <arglist>(AnimNodeI *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentChanged_Set</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>aacd6bc6e842119961554a800993ed1aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parentChanged_Get</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>aee2912a886e697104b5aa38382ed68ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parentChanged_Clear</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>a6b02689b11fac9f123e52209864d4f6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childArrived_Set</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>ac631b40d9ec9d5cb31b0e801ab4d06e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>childArrived_Get</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>ab9fd28932f5bbb392ed29d758603d009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childArrived_Clear</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>ad2333eb20bb2f9ac8ad29e11b5258071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>UpdatePass_Down</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>ad6b9a8c1dd11bed4deefa58ea4875217</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>UpdatePass_Up</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>a41501b392985c2a6c4686920d285369b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1AnimConnector.html</anchorfile>
      <anchor>ad092caf8d5f2ea6e29b0afd7b1de5aaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::AnimHeap</name>
    <filename>classiv_1_1AnimHeap.html</filename>
    <member kind="function">
      <type></type>
      <name>AnimHeap</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>a91877c4dbfd9e4b62bfb70606b68c0b7</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AnimHeap</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>ada1f0d46d924d5ce6fd6b26eb2b51635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>afca6e0a12d6f29506a4c2672d604d861</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_set&lt; AnimNodeI * &gt; &amp;</type>
      <name>Debug_Nodes</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>aaf7c40c3a4f2097b6d6f094ecce9a0ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; T &gt; *</type>
      <name>Node</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>a5e97560eb5aefe2d007c65b165ce7a7a</anchor>
      <arglist>(T const &amp;initial_value)</arglist>
    </member>
    <member kind="function">
      <type>AnimNodeI *</type>
      <name>VoidNode</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>a3f218d463881c5716485d85463902cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; T &gt; *</type>
      <name>Attribute_SourceNode</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>a8dc2ee566a96b1c27f78dd07547c3e57</anchor>
      <arglist>(Attr&lt; T &gt; *attr, T const &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; T &gt; *</type>
      <name>Attribute_DestinationNode</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>a0d4b14d511aa5d3f7bc591a869831c3d</anchor>
      <arglist>(Attr&lt; T &gt; *attr, T const &amp;initial_value)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; T &gt; *</type>
      <name>State_DestinationNode</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>ad61126a2f03943bbca74b6c7e94ebab5</anchor>
      <arglist>(T const &amp;initial_value)</arglist>
    </member>
    <member kind="function">
      <type>Lambda_Connector *</type>
      <name>Make_Lambda_Connector</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>a8dc71746d3fafe9ab0903647e8fcee78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cooldown_Connector&lt; T &gt; *</type>
      <name>Make_Cooldown_Connector</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>a41cbd507fff166a9083f48561f773c03</anchor>
      <arglist>(AnimNode&lt; T &gt; *parent, AnimNode&lt; T &gt; *child)</arglist>
    </member>
    <member kind="function">
      <type>TimeTransform_Connector&lt; T &gt; *</type>
      <name>Make_TimeTransform_Connector</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>a90d3e54a2aaeafcfbdac25756cb690a3</anchor>
      <arglist>(TimeTransform const &amp;, AnimNode&lt; T &gt; *parent, AnimNode&lt; T &gt; *child)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1AnimHeap.html</anchorfile>
      <anchor>ada07d3fb39e8da80933d009619b5fcc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::AnimNode</name>
    <filename>classiv_1_1AnimNode.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>AnimNode</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a7a4114f8a0611dc208db62db3bf7c4e4</anchor>
      <arglist>(Instance *inst, T const &amp;initial_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a91f3fff7f8c3aed01a971479d2eca99a</anchor>
      <arglist>(TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; T &gt; *</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>acf71fa7f07b193468bfb067bd39fb239</anchor>
      <arglist>(std::string const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a364674ea5741497e4611bf0a41e36c6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>StringIO_SetTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a736246bf9d2ed44ab9a19689bc3b08e9</anchor>
      <arglist>(const char *source, Context const *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>StringIO_GetTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a5210c9501a17a5b89cf291e00f0f4505</anchor>
      <arglist>(Context const *context) override</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>ae36ce09262a51a1975093eba537196c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; T &gt; *</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a6806519089428df4e3fadec787fa4b32</anchor>
      <arglist>(Anim_float)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; T &gt; *</type>
      <name>Speed_inf</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a787d546caf83af9b49f38986a8d7b43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; T &gt; *</type>
      <name>Target</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>ad8793a6501fbba2fbabe3db1b47edc2e</anchor>
      <arglist>(T const &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>Target</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a9e436b36e6bce9391118f9305f16d08a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>LastTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a90d110fce86efd6a19a1e54d66c76caf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a0b5ae68d28f73b7465f2ec14cddf17ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a30f24b89654ba61723c237a8634f55bc</anchor>
      <arglist>(T const &amp;target)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a8133b5d281b7eb56f06ea0323a71c4e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnimNode&lt; bool &gt;</name>
    <filename>classiv_1_1AnimNode.html</filename>
    <member kind="function">
      <type></type>
      <name>AnimNode</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a7a4114f8a0611dc208db62db3bf7c4e4</anchor>
      <arglist>(Instance *inst, bool const &amp;initial_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a91f3fff7f8c3aed01a971479d2eca99a</anchor>
      <arglist>(TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; bool &gt; *</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>acf71fa7f07b193468bfb067bd39fb239</anchor>
      <arglist>(std::string const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a364674ea5741497e4611bf0a41e36c6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>StringIO_SetTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a736246bf9d2ed44ab9a19689bc3b08e9</anchor>
      <arglist>(const char *source, Context const *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>StringIO_GetTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a5210c9501a17a5b89cf291e00f0f4505</anchor>
      <arglist>(Context const *context) override</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>ae36ce09262a51a1975093eba537196c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; bool &gt; *</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a6806519089428df4e3fadec787fa4b32</anchor>
      <arglist>(Anim_float)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; bool &gt; *</type>
      <name>Speed_inf</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a787d546caf83af9b49f38986a8d7b43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; bool &gt; *</type>
      <name>Target</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>ad8793a6501fbba2fbabe3db1b47edc2e</anchor>
      <arglist>(bool const &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const bool &amp;</type>
      <name>Target</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a9e436b36e6bce9391118f9305f16d08a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const bool &amp;</type>
      <name>LastTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a90d110fce86efd6a19a1e54d66c76caf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a0b5ae68d28f73b7465f2ec14cddf17ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a30f24b89654ba61723c237a8634f55bc</anchor>
      <arglist>(bool const &amp;target)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a8133b5d281b7eb56f06ea0323a71c4e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnimNode&lt; iv::Activator &gt;</name>
    <filename>classiv_1_1AnimNode.html</filename>
    <member kind="function">
      <type></type>
      <name>AnimNode</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a7a4114f8a0611dc208db62db3bf7c4e4</anchor>
      <arglist>(Instance *inst, iv::Activator const &amp;initial_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a91f3fff7f8c3aed01a971479d2eca99a</anchor>
      <arglist>(TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; iv::Activator &gt; *</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>acf71fa7f07b193468bfb067bd39fb239</anchor>
      <arglist>(std::string const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a364674ea5741497e4611bf0a41e36c6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>StringIO_SetTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a736246bf9d2ed44ab9a19689bc3b08e9</anchor>
      <arglist>(const char *source, Context const *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>StringIO_GetTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a5210c9501a17a5b89cf291e00f0f4505</anchor>
      <arglist>(Context const *context) override</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>ae36ce09262a51a1975093eba537196c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; iv::Activator &gt; *</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a6806519089428df4e3fadec787fa4b32</anchor>
      <arglist>(Anim_float)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; iv::Activator &gt; *</type>
      <name>Speed_inf</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a787d546caf83af9b49f38986a8d7b43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; iv::Activator &gt; *</type>
      <name>Target</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>ad8793a6501fbba2fbabe3db1b47edc2e</anchor>
      <arglist>(iv::Activator const &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const iv::Activator &amp;</type>
      <name>Target</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a9e436b36e6bce9391118f9305f16d08a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const iv::Activator &amp;</type>
      <name>LastTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a90d110fce86efd6a19a1e54d66c76caf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a0b5ae68d28f73b7465f2ec14cddf17ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a30f24b89654ba61723c237a8634f55bc</anchor>
      <arglist>(iv::Activator const &amp;target)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a8133b5d281b7eb56f06ea0323a71c4e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnimNode&lt; TChild &gt;</name>
    <filename>classiv_1_1AnimNode.html</filename>
    <member kind="function">
      <type></type>
      <name>AnimNode</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a7a4114f8a0611dc208db62db3bf7c4e4</anchor>
      <arglist>(Instance *inst, TChild const &amp;initial_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a91f3fff7f8c3aed01a971479d2eca99a</anchor>
      <arglist>(TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; TChild &gt; *</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>acf71fa7f07b193468bfb067bd39fb239</anchor>
      <arglist>(std::string const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a364674ea5741497e4611bf0a41e36c6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>StringIO_SetTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a736246bf9d2ed44ab9a19689bc3b08e9</anchor>
      <arglist>(const char *source, Context const *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>StringIO_GetTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a5210c9501a17a5b89cf291e00f0f4505</anchor>
      <arglist>(Context const *context) override</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>ae36ce09262a51a1975093eba537196c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; TChild &gt; *</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a6806519089428df4e3fadec787fa4b32</anchor>
      <arglist>(Anim_float)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; TChild &gt; *</type>
      <name>Speed_inf</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a787d546caf83af9b49f38986a8d7b43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; TChild &gt; *</type>
      <name>Target</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>ad8793a6501fbba2fbabe3db1b47edc2e</anchor>
      <arglist>(TChild const &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const TChild &amp;</type>
      <name>Target</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a9e436b36e6bce9391118f9305f16d08a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TChild &amp;</type>
      <name>LastTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a90d110fce86efd6a19a1e54d66c76caf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a0b5ae68d28f73b7465f2ec14cddf17ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a30f24b89654ba61723c237a8634f55bc</anchor>
      <arglist>(TChild const &amp;target)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a8133b5d281b7eb56f06ea0323a71c4e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnimNode&lt; TParent &gt;</name>
    <filename>classiv_1_1AnimNode.html</filename>
    <member kind="function">
      <type></type>
      <name>AnimNode</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a7a4114f8a0611dc208db62db3bf7c4e4</anchor>
      <arglist>(Instance *inst, TParent const &amp;initial_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a91f3fff7f8c3aed01a971479d2eca99a</anchor>
      <arglist>(TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; TParent &gt; *</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>acf71fa7f07b193468bfb067bd39fb239</anchor>
      <arglist>(std::string const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a364674ea5741497e4611bf0a41e36c6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>StringIO_SetTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a736246bf9d2ed44ab9a19689bc3b08e9</anchor>
      <arglist>(const char *source, Context const *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>StringIO_GetTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a5210c9501a17a5b89cf291e00f0f4505</anchor>
      <arglist>(Context const *context) override</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>ae36ce09262a51a1975093eba537196c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; TParent &gt; *</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a6806519089428df4e3fadec787fa4b32</anchor>
      <arglist>(Anim_float)</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; TParent &gt; *</type>
      <name>Speed_inf</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a787d546caf83af9b49f38986a8d7b43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimNode&lt; TParent &gt; *</type>
      <name>Target</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>ad8793a6501fbba2fbabe3db1b47edc2e</anchor>
      <arglist>(TParent const &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const TParent &amp;</type>
      <name>Target</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a9e436b36e6bce9391118f9305f16d08a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TParent &amp;</type>
      <name>LastTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a90d110fce86efd6a19a1e54d66c76caf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a0b5ae68d28f73b7465f2ec14cddf17ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a30f24b89654ba61723c237a8634f55bc</anchor>
      <arglist>(TParent const &amp;target)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1AnimNode.html</anchorfile>
      <anchor>a8133b5d281b7eb56f06ea0323a71c4e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::AnimNodeI</name>
    <filename>classiv_1_1AnimNodeI.html</filename>
    <member kind="function">
      <type></type>
      <name>AnimNodeI</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>accfe28941f5f4f5b1157c0063bbb2010</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AnimNodeI</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a164630e89f31a6a105c12b71326f9b89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>ae2bb73fbc215b76c072732ea3b409610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>ab6c2bbe70559a08ed56ab3a4979f5174</anchor>
      <arglist>(TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>AnimNodeI *</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a88f6319ca883b7e1cc57b2d2f5d4c05e</anchor>
      <arglist>(std::string const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>label</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a35392509843a30ca15cb172bd023bf09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>StringIO_SetTarget</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>ac1ff376c1abca9eaef13cc66e70ed7a4</anchor>
      <arglist>(const char *source, Context const *context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>StringIO_GetTarget</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a3cb8e074af81153bde198a52df39d84f</anchor>
      <arglist>(Context const *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anim_setParent</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a2b9ea43ba28505659e01b3bf9b78b8c1</anchor>
      <arglist>(AnimConnector *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anim_unsetParent</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>aad88b97ff4c43897a1bf5ae5557b4caa</anchor>
      <arglist>(AnimConnector *)</arglist>
    </member>
    <member kind="function">
      <type>AnimConnector *</type>
      <name>anim_getParent</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a88f524c5aa3346dcadf636d741346be2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anim_addChild</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>ae4049fa113377c3113d2e0f92784fb90</anchor>
      <arglist>(AnimConnector *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anim_removeChild</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>aa9470679988f2da5d9dfea45db52b33c</anchor>
      <arglist>(AnimConnector *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anim_eachChild</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>ac75b4374a7a282ca2c6a4dc8ccc09804</anchor>
      <arglist>(std::function&lt; void(AnimConnector *) &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>System_UpdateStart</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>acdd3eb60004eab468e95dc2e49fcee1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>System_UpdateEnd</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a9bcdf674fce1c30854056052c55f2b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; unsigned &gt;</type>
      <name>System_UpdateId</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>abdbe9ea608958b7059b28823a7d67f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Connector_RequestStep</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a6779cec5e86dfd5f50d9efbe7a9bc1c1</anchor>
      <arglist>(Anim_float step_distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Connector_UpdateDistance</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>aeadb091f0d8d73daa50e9c31c303e8e4</anchor>
      <arglist>(Anim_float new_distance)</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>Step</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a659b8cea63886e42c5c1c94b4906da39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Active</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a7fc044a72dda64c21e181247471f1cbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Activate</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a1188e947bbf2c8db040046d86f7d2ccc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>Distance</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a604bd2f1d1b3b006b425d79a972a4c72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInTarget</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a588de744d8a45bc6763ae459aa6896f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>af3d2c2caf3de2c15511b5db149027e95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnimNodeI *</type>
      <name>Speed</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>adc45befa57668ce4433e20b4ee661b83</anchor>
      <arglist>(Anim_float)</arglist>
    </member>
    <member kind="function">
      <type>AnimNodeI *</type>
      <name>Speed_inf</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a6597bd96de717615c6ee63c3e39f2d1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>afa7d54d8872121d2653ad6a9ad970ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateLastTarget</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>aaa2fa22e124022920aea954391b6781d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>TargetStabilized</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a3208797177c58f2939d88eb9de1a83da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Instance *</type>
      <name>inst</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>ac82af95832bd600b899de5a1c95776c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnimSystem *</type>
      <name>as</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a7393ff8fd0a2c88a97c025b659da772d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_label</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>af6bad7dbc3beb713bc7787d058c5f5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Anim_float</type>
      <name>_speed</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>aa670cb69bda24c0f441390e7dfbc121e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_anim_initialized</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>af33f661e2f051d594579d2f629479267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnimConnector *</type>
      <name>_parent</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a5d6b6dc6f2bf611f263782c08f5c32b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_set&lt; AnimConnector * &gt;</type>
      <name>_children</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a1614bf412048a94a2110981b9d3a5b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::optional&lt; unsigned &gt;</type>
      <name>_activation_id</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a7dc0f047342aab42c053a2205ea2f83a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>_active_cooldown</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>ac1516ae79a557a63eccad876abae3a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_active</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>aa46cfb9ef7c10a16ed2f03be4aa657bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Anim_float</type>
      <name>_distance_start</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a4aa85c257dce776dffc11eb351f2117e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Anim_float</type>
      <name>_distance_end</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>ada00b42f0c36d36bca0d73c7ce6fd620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Anim_float</type>
      <name>_distance_working</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a12d2d88dfd94c23500e8af9d9ca4bf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Anim_float</type>
      <name>_requested_step</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a734362a0ef2fddf4e7d04e8ddde8b0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::optional&lt; unsigned &gt;</type>
      <name>_update_id</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a75e3a72b75603a492667c582a2e39ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>in_target_notified</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>aedd32027ed20dfd12e2703c4ccccc1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const constexpr unsigned</type>
      <name>ActiveCooldownFrames</name>
      <anchorfile>classiv_1_1AnimNodeI.html</anchorfile>
      <anchor>a9fdbf2e61e0bef59f198fc8fdaf5018b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::AnimSystem</name>
    <filename>classiv_1_1AnimSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>AnimSystem</name>
      <anchorfile>classiv_1_1AnimSystem.html</anchorfile>
      <anchor>a4c163cb726b94c0accdd90e4e5fc6cfd</anchor>
      <arglist>(SystemContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classiv_1_1AnimSystem.html</anchorfile>
      <anchor>aa2782de54e595ce526dea82cd721d71f</anchor>
      <arglist>(TextDebugView *view) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1AnimSystem.html</anchorfile>
      <anchor>afb91c09a55d9f55de3084a6309dfad3c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AnimUpdate</name>
      <anchorfile>classiv_1_1AnimSystem.html</anchorfile>
      <anchor>a4f1e1fa26aa459dfd1ef492d363b6e40</anchor>
      <arglist>(int delta_ms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InsertRoot</name>
      <anchorfile>classiv_1_1AnimSystem.html</anchorfile>
      <anchor>a55fb4069f2bc9fda77f00a1082fa4759</anchor>
      <arglist>(AnimNodeI *client)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveRoot</name>
      <anchorfile>classiv_1_1AnimSystem.html</anchorfile>
      <anchor>a38f7af5bb2d58a5a90ce1fc1731ade9c</anchor>
      <arglist>(AnimNodeI *client)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>update_id</name>
      <anchorfile>classiv_1_1AnimSystem.html</anchorfile>
      <anchor>aae62f10f0fae7a0d591f4efe32373c52</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Attr</name>
    <filename>classiv_1_1Attr.html</filename>
    <templarg></templarg>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, T const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(T &amp;out) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(T const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; Activator &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>Activator</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, Activator const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(Activator &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(Activator const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; Axis &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, Axis const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(Axis &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(Axis const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; AxisOrder &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>AxisOrder</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, AxisOrder const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(AxisOrder &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(AxisOrder const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; bool &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, bool const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(bool &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(bool const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; ChildT * &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>ChildT *</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, ChildT * const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(ChildT * &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(ChildT * const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; FlatShader::ResizeStage &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>FlatShader::ResizeStage</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, FlatShader::ResizeStage const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(FlatShader::ResizeStage &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(FlatShader::ResizeStage const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; float &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, float const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(float &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(float const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; float2 &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>float2</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, float2 const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(float2 &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(float2 const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; float3 &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>float3</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, float3 const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(float3 &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(float3 const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; float4 &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>float4</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, float4 const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(float4 &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(float4 const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; float4x4 &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>float4x4</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, float4x4 const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(float4x4 &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(float4x4 const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; floatQuat &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>floatQuat</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, floatQuat const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(floatQuat &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(floatQuat const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; iv::FontMesh::Location &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>iv::FontMesh::Location</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, iv::FontMesh::Location const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(iv::FontMesh::Location &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(iv::FontMesh::Location const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; iv::ResourcePath &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>iv::ResourcePath</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, iv::ResourcePath const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(iv::ResourcePath &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(iv::ResourcePath const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; iv::ShaderScissor &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>iv::ShaderScissor</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, iv::ShaderScissor const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(iv::ShaderScissor &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(iv::ShaderScissor const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; SlotChild * &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>SlotChild *</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, SlotChild * const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(SlotChild * &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(SlotChild * const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; std::optional&lt; float &gt; &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; float &gt;</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, std::optional&lt; float &gt; const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(std::optional&lt; float &gt; &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(std::optional&lt; float &gt; const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; std::optional&lt; float4 &gt; &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; float4 &gt;</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, std::optional&lt; float4 &gt; const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(std::optional&lt; float4 &gt; &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(std::optional&lt; float4 &gt; const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; std::string &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, std::string const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(std::string &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(std::string const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; Type &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, Type const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(Type &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(Type const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Attr&lt; unsigned &gt;</name>
    <filename>classiv_1_1Attr.html</filename>
    <base>iv::Attribute</base>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a19833339ce0389929b40f8f810e36559</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>abc71c8d460a69bc0edf663392004ea45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aa8a8337c8d2d5c5ef4819a87ab77ab05</anchor>
      <arglist>(ClientMarker *modifier, unsigned const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>a95e6bbe30d84a241d252a5f0c5328413</anchor>
      <arglist>(unsigned &amp;out) const=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1Attr.html</anchorfile>
      <anchor>aafd49741d288a51cc410544e402989a8</anchor>
      <arglist>(unsigned const &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Attribute</name>
    <filename>classiv_1_1Attribute.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ValueMode</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a08a56795bff286d0d6c11a6c0604615f</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1Attribute.html" anchor="a08a56795bff286d0d6c11a6c0604615fab9f5c797ebbf55adccdd8539a65a0241">Disabled</enumvalue>
      <enumvalue file="classiv_1_1Attribute.html" anchor="a08a56795bff286d0d6c11a6c0604615fa689202409e48743b914713f96d93947c">Value</enumvalue>
      <enumvalue file="classiv_1_1Attribute.html" anchor="a08a56795bff286d0d6c11a6c0604615fab4dbe742606f07b2964e7cab16e96435">ValueModify</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>ae62fbc38b131dde763a98f88385b24b8</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *event_processor, bool allow_ModifyMode)</arglist>
    </member>
    <member kind="function">
      <type>ClientMarker *</type>
      <name>owner</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>afab1923df3db7db0f5428c01053c8b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::type_index</type>
      <name>Type</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a9d95d3f602ff800aaef78c994c3e44d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueMode</type>
      <name>Mode</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>ab65fd695d21cbd53397156b3d631af3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::any</type>
      <name>GetAny</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a315ec9c1f9eadc32fe51f7d35fc1bd77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ModifyMode</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>ad8187d5f3994e654a5f48b4d2d595628</anchor>
      <arglist>(ClientMarker *modifier, Attribute::ValueMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ModifyAny</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a0cb72e1bfc3df4422ec53ce4e1c6026b</anchor>
      <arglist>(ClientMarker *modifier, std::any)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Insert_Listener</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a1ae10472d9fe4af98d0a69afe6c6d03e</anchor>
      <arglist>(AttributeListener *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Remove_Listener</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a3c2e0f9ef76e02ccadbc5227ebd2526b</anchor>
      <arglist>(AttributeListener *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetAttributeMode</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>abcbfd86193c47d55701cf476b074478b</anchor>
      <arglist>(ValueMode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SourceValueChanged</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>af29c003e337073585e37ae2252a674c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AttributeEventProcessor *</type>
      <name>event_processor</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a466820d1462c5a1f4acf424fbffa5c2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>event_processor</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>ae77572ce29dcdb71fa2b8bb562d0eeec</anchor>
      <arglist>(AttributeEventProcessor *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Notify_Activated</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a72a653917b07025fc8c8a676e9657516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Notify_Deactivated</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a05744683591d6a2fb29c7eed29d4705f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::type_index</type>
      <name>Type_Impl</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a563ce8f37d2d0a20717f8a89aaa65b67</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::any</type>
      <name>GetAny_Impl</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>a2d57f7cfa665e65662ac7acfc286a0e1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ModifyAny_Impl</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>aa19047214111ba786f97c41bc6fc79f6</anchor>
      <arglist>(ClientMarker *modifier, std::any)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>allow_ModifyMode</name>
      <anchorfile>classiv_1_1Attribute.html</anchorfile>
      <anchor>aebda3e4c375647611ff4b480ed214e5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::AttributeEventProcessor</name>
    <filename>classiv_1_1AttributeEventProcessor.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Event</name>
      <anchorfile>classiv_1_1AttributeEventProcessor.html</anchorfile>
      <anchor>a85fb3c59f0ee51555cd61867ef55ccea</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1AttributeEventProcessor.html" anchor="a85fb3c59f0ee51555cd61867ef55cceaacb456215c3333db0551bd0788bc258c7">Activated</enumvalue>
      <enumvalue file="classiv_1_1AttributeEventProcessor.html" anchor="a85fb3c59f0ee51555cd61867ef55cceaa43c7582c40594c3fe32a6634ef9dcb07">Deactivated</enumvalue>
      <enumvalue file="classiv_1_1AttributeEventProcessor.html" anchor="a85fb3c59f0ee51555cd61867ef55cceaa820dbd2b8f606aff866c0bbfb6b737c1">Changed</enumvalue>
      <enumvalue file="classiv_1_1AttributeEventProcessor.html" anchor="a85fb3c59f0ee51555cd61867ef55cceaa9a40fe2d30a5ee17181153d93070c9b5">AddListener</enumvalue>
      <enumvalue file="classiv_1_1AttributeEventProcessor.html" anchor="a85fb3c59f0ee51555cd61867ef55cceaa443e3ecff5a4946a31d960d54f17dae1">RemoveListener</enumvalue>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>AttributeEvent</name>
      <anchorfile>classiv_1_1AttributeEventProcessor.html</anchorfile>
      <anchor>a3b3be8031c5ea7cac2acc6aaebed25b7</anchor>
      <arglist>(AttributeEventProcessor::Event event, Attribute *attr, AttributeListener *listener)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::AttributeListener</name>
    <filename>classiv_1_1AttributeListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Attribute_Activated</name>
      <anchorfile>classiv_1_1AttributeListener.html</anchorfile>
      <anchor>a6034d603d19460026acbecee25d827b8</anchor>
      <arglist>(Attribute *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Attribute_Deactivated</name>
      <anchorfile>classiv_1_1AttributeListener.html</anchorfile>
      <anchor>aa0967fdbe110812870684a52d184efe4</anchor>
      <arglist>(Attribute *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Attribute_Changed</name>
      <anchorfile>classiv_1_1AttributeListener.html</anchorfile>
      <anchor>a861756bbc3c2fad104bc2e31cec34cab</anchor>
      <arglist>(Attribute *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Context::Begin</name>
    <filename>classiv_1_1Context_1_1Begin.html</filename>
  </compound>
  <compound kind="struct">
    <name>iv::Pratt::Binary</name>
    <filename>structiv_1_1Pratt_1_1Binary.html</filename>
    <base>iv::Pratt::Expression</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Binary *</type>
      <name>ToBinary</name>
      <anchorfile>structiv_1_1Pratt_1_1Binary.html</anchorfile>
      <anchor>aecc46fb4d355882fda3cd621927602e3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>const Expression *</type>
      <name>left</name>
      <anchorfile>structiv_1_1Pratt_1_1Binary.html</anchorfile>
      <anchor>a0bfc49114d91e27a7a7e87a75484c91d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Expression *</type>
      <name>right</name>
      <anchorfile>structiv_1_1Pratt_1_1Binary.html</anchorfile>
      <anchor>a571feb848c83a1aee8e5059f89059ca0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::BlockAll_InputNode</name>
    <filename>classiv_1_1BlockAll__InputNode.html</filename>
    <base>iv::InputNode</base>
    <member kind="function">
      <type></type>
      <name>BlockAll_InputNode</name>
      <anchorfile>classiv_1_1BlockAll__InputNode.html</anchorfile>
      <anchor>a88ef0b197fdc75bdc6ae005843b515a6</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>input_trigger_process</name>
      <anchorfile>classiv_1_1BlockAll__InputNode.html</anchorfile>
      <anchor>a53d597eea4956b2df1bfb7c7816cde3c</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>input_process</name>
      <anchorfile>classiv_1_1BlockAll__InputNode.html</anchorfile>
      <anchor>af3569b2b382f998cea5e0d6aed09ebdf</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key, bool &amp;press, bool &amp;real, bool &amp;offspace, bool &amp;queue_refresh)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Border</name>
    <filename>classiv_1_1Border.html</filename>
    <base>OneChildElem&lt; SlotChild &gt;</base>
    <base>iv::SlotChild</base>
    <member kind="function">
      <type></type>
      <name>Border</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a0f0ad69fd1681a3eb629446e1ce5a231</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>ad8f367de0510c43dd95564006f005047</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>enabled</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a618c8f8d5926e0205df1dfb6024dd8b4</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>borderLeft</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a0b17073b78045b994d17b799b0bc3a81</anchor>
      <arglist>(std::optional&lt; float &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>borderRight</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a0c617386de485ffb740c2d89ae5e6443</anchor>
      <arglist>(std::optional&lt; float &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>borderTop</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a0dca1551ff85e872ca095194dffb629f</anchor>
      <arglist>(std::optional&lt; float &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>borderBottom</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a7f133d6af08f4ddafed476158a67eab5</anchor>
      <arglist>(std::optional&lt; float &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>borderFront</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a325a5f7320cd11129346036337583e16</anchor>
      <arglist>(std::optional&lt; float &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>borderBack</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a0e1711b1684e2e9b69cdb32bce8f5996</anchor>
      <arglist>(std::optional&lt; float &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>leftTop</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>aec1a47637faf2e9042060ba2ac70bab1</anchor>
      <arglist>(std::optional&lt; float &gt; left, std::optional&lt; float &gt; top)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>leftBottom</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>aa061343269405c08062a62c0399c249e</anchor>
      <arglist>(std::optional&lt; float &gt; left, std::optional&lt; float &gt; bottom)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>rightTop</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a28c0a19b7c7d757b7e104fd2b8443dd0</anchor>
      <arglist>(std::optional&lt; float &gt; right, std::optional&lt; float &gt; top)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>rightBottom</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>aeb44f6d42da4e720b5bf054c34b53b6e</anchor>
      <arglist>(std::optional&lt; float &gt; right, std::optional&lt; float &gt; bottom)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>leftRight</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a0112d526748042ab68b99cbdac78dac3</anchor>
      <arglist>(std::optional&lt; float &gt; left, std::optional&lt; float &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>topBottom</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>adc05c1c8de55404a3692db0b54da9e50</anchor>
      <arglist>(std::optional&lt; float &gt; top, std::optional&lt; float &gt; bottom)</arglist>
    </member>
    <member kind="function">
      <type>Border *</type>
      <name>frontBack</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>aa5bf7f83c53fe61f36781b86dba4f112</anchor>
      <arglist>(std::optional&lt; float &gt; front, std::optional&lt; float &gt; back)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a96dab4208a86a19b5381e805f4fbd6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float &gt; &gt;</type>
      <name>attr_borderLeft</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a1cd1856dfc1fdf2b6cfb54446a596048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float &gt; &gt;</type>
      <name>attr_borderRight</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a9bfccebfac45a3bdcc646c18d8a5c4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float &gt; &gt;</type>
      <name>attr_borderTop</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a454177b703baeaa6b5db6090a607bc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float &gt; &gt;</type>
      <name>attr_borderBottom</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a96640d0b6d3f558c5e30382a570815ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float &gt; &gt;</type>
      <name>attr_borderFront</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a5519e1a117d0b89ec8d3e3967ca4abcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float &gt; &gt;</type>
      <name>attr_borderBack</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a000b7e66cf56ffb1c451a39adbb49330</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>ac13c99e56290b4d6cb33c1e29a6dba13</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1Border.html</anchorfile>
      <anchor>a4f2e79915d511926c5be7cb1fd8a458b</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::SS::c_str</name>
    <filename>structiv_1_1SS_1_1c__str.html</filename>
  </compound>
  <compound kind="class">
    <name>iv::callback_client_ptr</name>
    <filename>classiv_1_1callback__client__ptr.html</filename>
    <templarg></templarg>
    <base>iv::client_ptr</base>
    <member kind="function">
      <type>callback_client_ptr&lt; TypedClient &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1callback__client__ptr.html</anchorfile>
      <anchor>a77d004497a83ec5212027c657003b522</anchor>
      <arglist>(callback_client_ptr&lt; TypedClient &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>callback_client_ptr&lt; TypedClient &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1callback__client__ptr.html</anchorfile>
      <anchor>ac75f4e48eb02a564c4143210b92d4032</anchor>
      <arglist>(TypedClient *instance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_change_callback</name>
      <anchorfile>classiv_1_1callback__client__ptr.html</anchorfile>
      <anchor>a3955560a4f95b34db7394397f90c8a04</anchor>
      <arglist>(std::function&lt; void() &gt; const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classiv_1_1callback__client__ptr.html</anchorfile>
      <anchor>a2f0352567770dc01013d7bb26417a0df</anchor>
      <arglist>(Instance *inst) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::callback_instance_ptr</name>
    <filename>classiv_1_1callback__instance__ptr.html</filename>
    <base>iv::instance_ptr</base>
    <member kind="function">
      <type>callback_instance_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1callback__instance__ptr.html</anchorfile>
      <anchor>ae6b8af9d876c4c80200a750878251fbf</anchor>
      <arglist>(callback_instance_ptr const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>callback_instance_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1callback__instance__ptr.html</anchorfile>
      <anchor>aaca8fa4b9a4380af36f35b694dcc2b55</anchor>
      <arglist>(Instance *instance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_change_callback</name>
      <anchorfile>classiv_1_1callback__instance__ptr.html</anchorfile>
      <anchor>ae766e7187359ab7975c0b38044ddaddd</anchor>
      <arglist>(std::function&lt; void() &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>instance_ptr</name>
      <anchorfile>classiv_1_1callback__instance__ptr.html</anchorfile>
      <anchor>a60aa6fa50010aa21ef0ac1aa411b7d37</anchor>
      <arglist>(Instance *inst=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>instance_ptr</name>
      <anchorfile>classiv_1_1callback__instance__ptr.html</anchorfile>
      <anchor>a23aee51d10d686f1881278c93d7c9cae</anchor>
      <arglist>(instance_ptr const &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classiv_1_1callback__instance__ptr.html</anchorfile>
      <anchor>acef60782ca42536c550e03b7d8b792c2</anchor>
      <arglist>(Instance *inst) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Camera</name>
    <filename>classiv_1_1Camera.html</filename>
    <base>iv::Slot</base>
    <base protection="private">iv::ElementRenderer</base>
    <member kind="function">
      <type></type>
      <name>Camera</name>
      <anchorfile>classiv_1_1Camera.html</anchorfile>
      <anchor>ad1e29e5c82468a86b48ee50c6db423b6</anchor>
      <arglist>(Instance *, RenderTarget::Geometry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Camera</name>
      <anchorfile>classiv_1_1Camera.html</anchorfile>
      <anchor>a5bff93990252de1e9a7f488cbbe2284e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Camera.html</anchorfile>
      <anchor>a7b93b05d671ecddbf0d321f97f36d03b</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render_scene</name>
      <anchorfile>classiv_1_1Camera.html</anchorfile>
      <anchor>ad81e931c0ce82a71211779cc752843c4</anchor>
      <arglist>(Elem *view=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geometry</name>
      <anchorfile>classiv_1_1Camera.html</anchorfile>
      <anchor>a319287354c20541bff1fdaeb5db5272a</anchor>
      <arglist>(RenderTarget::Geometry geometry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Camera *</type>
      <name>elem_getRoot</name>
      <anchorfile>classiv_1_1Camera.html</anchorfile>
      <anchor>a3b3a6c937a3096585d6888039d11eec1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>float3</type>
      <name>FromLocalSpaceToViewportSpace</name>
      <anchorfile>classiv_1_1Camera.html</anchorfile>
      <anchor>ad8c12a94262f1b1f7de746d049528ef2</anchor>
      <arglist>(float4x4 model_transform, float3)</arglist>
    </member>
    <member kind="function">
      <type>float3</type>
      <name>FromViewportSpaceToLocalSpace</name>
      <anchorfile>classiv_1_1Camera.html</anchorfile>
      <anchor>a7a9c8d3b9b7651641bca3c68c86b06c5</anchor>
      <arglist>(float4x4 model_transform, float3)</arglist>
    </member>
    <member kind="function">
      <type>float2</type>
      <name>FromViewportPlaneToLocalPlane</name>
      <anchorfile>classiv_1_1Camera.html</anchorfile>
      <anchor>a08845cca6815092fed8c4c3701846b1a</anchor>
      <arglist>(float4x4 model_transform, float2)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Camera.html</anchorfile>
      <anchor>a8c168e81ff8af1dfddc3a7bb55fb0bb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::CameraState</name>
    <filename>structiv_1_1CameraState.html</filename>
    <member kind="function">
      <type></type>
      <name>CameraState</name>
      <anchorfile>structiv_1_1CameraState.html</anchorfile>
      <anchor>ad4377b41a8e569e1bf814ef99c53f358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>float4x4</type>
      <name>projection</name>
      <anchorfile>structiv_1_1CameraState.html</anchorfile>
      <anchor>abc7049aa4ac3b9c74c7fc0dec7ff2859</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float4x4</type>
      <name>pixelizing_projection</name>
      <anchorfile>structiv_1_1CameraState.html</anchorfile>
      <anchor>a24a9b6f184181f33c401664c1313124c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float4x4</type>
      <name>view</name>
      <anchorfile>structiv_1_1CameraState.html</anchorfile>
      <anchor>a5ab8a5b222f8d6d602b34c3b3016e158</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Char_InputNode</name>
    <filename>classiv_1_1Char__InputNode.html</filename>
    <base>iv::InputNode</base>
    <member kind="function">
      <type></type>
      <name>Char_InputNode</name>
      <anchorfile>classiv_1_1Char__InputNode.html</anchorfile>
      <anchor>aa6019bf33f2b6e5ee0428522a969a4a0</anchor>
      <arglist>(Instance *inst, TimeId time_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Insert_CharListener</name>
      <anchorfile>classiv_1_1Char__InputNode.html</anchorfile>
      <anchor>a9aec77a27720480e8b40e026d715be8a</anchor>
      <arglist>(CharListener *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Remove_CharListener</name>
      <anchorfile>classiv_1_1Char__InputNode.html</anchorfile>
      <anchor>a8644f9f47d2e3deeea71cb46f6ccaa88</anchor>
      <arglist>(CharListener *)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Char__InputNode.html</anchorfile>
      <anchor>a599f4f38a2c3d929f95e848d4450d379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Char__InputNode.html</anchorfile>
      <anchor>a6808c7a5d5635e9db0ec5eef5b10856f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const constexpr int</type>
      <name>RepeatFirstMs</name>
      <anchorfile>classiv_1_1Char__InputNode.html</anchorfile>
      <anchor>a0ee1fb0cebce986dc5cf9f479677cba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const constexpr int</type>
      <name>RepeatOtherMs</name>
      <anchorfile>classiv_1_1Char__InputNode.html</anchorfile>
      <anchor>a994157d82354098c3c538d5ac1b2abd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>input_trigger_process</name>
      <anchorfile>classiv_1_1Char__InputNode.html</anchorfile>
      <anchor>a69aca60b0a5b1300623de48e42569f33</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key) override</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CharListener</name>
      <anchorfile>classiv_1_1Char__InputNode.html</anchorfile>
      <anchor>adcdb0d18ceb88159661de0d900fecd46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::CharListener</name>
    <filename>classiv_1_1CharListener.html</filename>
    <member kind="function">
      <type></type>
      <name>CharListener</name>
      <anchorfile>classiv_1_1CharListener.html</anchorfile>
      <anchor>ac18873a64d45fa071d5ecf62fd7fc51b</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CharListener</name>
      <anchorfile>classiv_1_1CharListener.html</anchorfile>
      <anchor>a7a34c9980b44fffdb2f9f3bcc86184ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1CharListener.html</anchorfile>
      <anchor>af85880397287559797129b2ff7650316</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>on_char</name>
      <anchorfile>classiv_1_1CharListener.html</anchorfile>
      <anchor>a666a9ab88fd30bc2b4e46b944cd9552c</anchor>
      <arglist>(Char_InputNode *event, unsigned codepoint)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1CharListener.html</anchorfile>
      <anchor>ae6f03c8a18401591e482eb5419079e42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::client_ptr</name>
    <filename>classiv_1_1client__ptr.html</filename>
    <templarg></templarg>
    <base>iv::instance_ptr_interface</base>
    <member kind="function">
      <type></type>
      <name>client_ptr</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>a2e588008833abfa186726f1310d41255</anchor>
      <arglist>(TypedClient *client=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>client_ptr</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>acd06f447ad346f2354a4f8eae8b6a9fd</anchor>
      <arglist>(client_ptr&lt; TypedClient &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~client_ptr</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>a614597df343651b646be6a0bfa4b0acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>client_ptr&lt; TypedClient &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>ab56166808239342b7a3a90037fae46eb</anchor>
      <arglist>(client_ptr&lt; TypedClient &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>client_ptr&lt; TypedClient &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>aad1c57cf2f21044cc2d609b14580daea</anchor>
      <arglist>(TypedClient *client)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>a7808038f28a36e925c76eb26b0477def</anchor>
      <arglist>(client_ptr&lt; TypedClient &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>ae206d10c36db3db30d39b913c55a9bbc</anchor>
      <arglist>(client_ptr&lt; TypedClient &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>a503ea7d351ca27a596f9a5cba03a0601</anchor>
      <arglist>(client_ptr&lt; TypedClient &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>afc6bfda9efa76e599e038097c0030b37</anchor>
      <arglist>(client_ptr&lt; TypedClient &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>a6ce7a10383ca0971305871d55850c310</anchor>
      <arglist>(client_ptr&lt; TypedClient &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>a2226280d5b79ea18a554ef3c74071b52</anchor>
      <arglist>(client_ptr&lt; TypedClient &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypedClient *</type>
      <name>get</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>a7918fb9d0ed279259dcce32a369dfbc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TypedClient &amp;</type>
      <name>operator*</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>ab12f7370c8c5b8385b3880436be02fd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TypedClient *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>ae6bded72b780231104ad4caf681716d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>a694dad566926a36f7de380757846bcdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classiv_1_1client__ptr.html</anchorfile>
      <anchor>aee877eb40207096976215fb4128ecc6e</anchor>
      <arglist>(Instance *inst) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ClientMarker</name>
    <filename>classiv_1_1ClientMarker.html</filename>
    <base>iv::Context</base>
    <class kind="struct">iv::ClientMarker::Status</class>
    <member kind="function">
      <type></type>
      <name>ClientMarker</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a8a62e91d7f88eba59b8cb2b86d168d0a</anchor>
      <arglist>(Instance *inst, ClientType *client, const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClientMarker</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a3f98e2edb537f7dc46db11113996b395</anchor>
      <arglist>(Instance *inst, ClientType *client, const char *name, Status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClientMarker</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>ae6ac0e69e9084a16eb133cad25900a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClientMarker</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a23d966e0ddfdc9e7cd1e1e6ec2e72af4</anchor>
      <arglist>(ClientMarker const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ClientMarker &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>ae69b0af9968e1d96043fa19a4cc2fc09</anchor>
      <arglist>(ClientMarker const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inherits</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>ac8250fe9298abe13f86df7d62b043012</anchor>
      <arglist>(ClientMarker &amp;parent, Rest &amp;... rest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>owns</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>abf71fbf91761043bcdd6880f8e7c4145</anchor>
      <arglist>(ClientMarker &amp;ownee, Rest &amp;... rest)</arglist>
    </member>
    <member kind="function">
      <type>std::type_index</type>
      <name>client_type</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a6609a3b7819e3cea785a5ea1ab37282d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::type_index</type>
      <name>type</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a8311b530453252eca35e8205ea19fde6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TypedClient *</type>
      <name>client</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a5b06f491f610016cb766ae212f1aefb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a9ac93d3a01f683e82e5028b9f38b556d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>acfaa57294639f9e49f1ff21245ee8d81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>marker_id</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a270344c447d429f1e8be203c6bc71746</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name_id</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a058b8a5a60e15777342f8061871b82a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>root_name_id</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a624789fc6777bfdd36fb1b72ef6837df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_status</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a19f34f9274d9c8900ba0ee97a3d29227</anchor>
      <arglist>(TableDebugView *view) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_status</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a7af1c007a370f330c506411ec23aaae5</anchor>
      <arglist>(TextDebugView *view) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_status_with_inherited</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>aeb4af4c2846a7c3cedb0689a1de7cb52</anchor>
      <arglist>(TextDebugView *view, ClientMarker *emphasize=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_status_with_inherited</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>ae1428e7450c741b719d9c4c0407e8ae5</anchor>
      <arglist>(TreeDebugView *view, ClientMarker *emphasize=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_status_with_related</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a65b5ce2e14379d6361d9a58d0cf9cb0d</anchor>
      <arglist>(TextDebugView *view) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_status_with_related</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a97f46b694979c364c56ebb1aa2b8a5c5</anchor>
      <arglist>(TreeDebugView *view, TreeDebugView::BoxStyle=TreeDebugView::BoxStyle::Solid) const</arglist>
    </member>
    <member kind="function">
      <type>const ClientMarker *</type>
      <name>inheritance_root</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>ac45a5c07f04738e518697051a5ae8f16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ClientMarker *</type>
      <name>inheritance_child</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a7b4e9785d9ea40c221dde918ec84f4c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_set&lt; ClientMarker const * &gt;</type>
      <name>inheritance_parents</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a81c4cb68bbbe82a65833d5305ad938d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ClientMarker *</type>
      <name>relation_root</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>acab1cdae24432d3eb3b9a7c5d4c36bdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ClientMarker *</type>
      <name>ownership_parent</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a7c661a5773099cc737cf9e37258c6a33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_set&lt; ClientMarker const * &gt;</type>
      <name>ownership_children</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a3920f87989602ea50806d330eae0377e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>log_process_enabled</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a2cc0e215da45e9cce5f2a00dc8ed841c</anchor>
      <arglist>(LogId id) const override final</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>log_process</name>
      <anchorfile>classiv_1_1ClientMarker.html</anchorfile>
      <anchor>a016c4a3f7e1e5b3619a3d3186464108a</anchor>
      <arglist>(SrcInfo const &amp;info, LogId id, std::string const &amp;message) const override final</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ClientMarkerIds</name>
    <filename>classiv_1_1ClientMarkerIds.html</filename>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>UniqueId</name>
      <anchorfile>classiv_1_1ClientMarkerIds.html</anchorfile>
      <anchor>a6e1182d945726a6ce4c7331c57d00d30</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::ColorTransform</name>
    <filename>structiv_1_1ColorTransform.html</filename>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>RotateHue</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a595ee792294e8bbad61a2ce48b5a8444</anchor>
      <arglist>(float radians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>ShiftSaturation</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a5538b4fa2b7e2b81ea54a87d412ad6f6</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>ScaleValue</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a4314462a91c73586b54a0e9aa93a1cf8</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>ShiftValue</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>af7fc1c395e16d2d428224e4208749ab0</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>Change_Hue</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>ac12a7d57de9f4c878a8f70b5a291b523</anchor>
      <arglist>(float4 from, float4 to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>Change_Saturation</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>ab5743f9bbc0fbd14b1ac3b3c151bb2aa</anchor>
      <arglist>(float4 from, float4 to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>Change_Value</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>aed76b24618a7b8f4b957c888c0149ff1</anchor>
      <arglist>(float4 from, float4 to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>Change</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a4d54aaff22e61da0ce016c22884a38fd</anchor>
      <arglist>(float4 from, float4 to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>Zero</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a3fa6dec92e5114fe67745b8dbab5a990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>Scale</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a5abc2234367508a6bfde67e11ecbaf56</anchor>
      <arglist>(float4 sRGB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4x4</type>
      <name>Shift</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a8f34a5594a16c9d2d42dfae834c579c0</anchor>
      <arglist>(float4 sRGB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>GetHue</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a33f679ae30194530cd17c1297e14b072</anchor>
      <arglist>(float4 color)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>GetSaturation</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a6f209bbf07855212b26154c8918bb430</anchor>
      <arglist>(float4 color)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>GetValue</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a851ef42ab16d7cf6c70cabc82aabc196</anchor>
      <arglist>(float4 color)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4</type>
      <name>Apply</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a7c9c9f7ef645edd2c25b3b10484f4acf</anchor>
      <arglist>(float4x4 transform, float4 color)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>sRGB_to_linearRGB</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a61a52866262ba026b1bf22470351b3e8</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4</type>
      <name>sRGB_to_linearRGB</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a55f05b494fcfd7a57cfad18ec492696b</anchor>
      <arglist>(float4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>linearRGB_to_sRGB</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>ab52f5a2a528f5c349a1f938303bdb71f</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4</type>
      <name>linearRGB_to_sRGB</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>af939796467c78d3a191c10ebb43d204e</anchor>
      <arglist>(float4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4</type>
      <name>linearRGB_to_HSV</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a20ff7ed08c7e857c7a18b8b128b60cfa</anchor>
      <arglist>(float4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float4</type>
      <name>HSV_to_linearRGB</name>
      <anchorfile>structiv_1_1ColorTransform.html</anchorfile>
      <anchor>a0bf9f5c6e166fca13096e25f96297c0b</anchor>
      <arglist>(float4)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::table_debug_context::ColumnData</name>
    <filename>structiv_1_1table__debug__context_1_1ColumnData.html</filename>
    <member kind="variable">
      <type>std::any</type>
      <name>value</name>
      <anchorfile>structiv_1_1table__debug__context_1_1ColumnData.html</anchorfile>
      <anchor>aac0d9298df3a165614935758fb765fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; HintData &gt;</type>
      <name>hints</name>
      <anchorfile>structiv_1_1table__debug__context_1_1ColumnData.html</anchorfile>
      <anchor>aed57838f0f0abaf301e35172ef695e27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::table_debug_context::ColumnHandle</name>
    <filename>classiv_1_1table__debug__context_1_1ColumnHandle.html</filename>
    <member kind="function">
      <type></type>
      <name>ColumnHandle</name>
      <anchorfile>classiv_1_1table__debug__context_1_1ColumnHandle.html</anchorfile>
      <anchor>a158651958f3821532457762c0cc98026</anchor>
      <arglist>(RowData *_row, const char *col_name, ColumnT &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>ColumnHandle &amp;</type>
      <name>Hint</name>
      <anchorfile>classiv_1_1table__debug__context_1_1ColumnHandle.html</anchorfile>
      <anchor>a2f0d7b469f2391bc2d594966cd821e39</anchor>
      <arglist>(const char *hint_name, HintT &amp;&amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ConfigFileSystem</name>
    <filename>classiv_1_1ConfigFileSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>ConfigFileSystem</name>
      <anchorfile>classiv_1_1ConfigFileSystem.html</anchorfile>
      <anchor>a2e8cb09251351b6dd65de9f05ead12f1</anchor>
      <arglist>(SystemContainer *sc, std::string const &amp;base_dir)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1ConfigFileSystem.html</anchorfile>
      <anchor>a055574b7dd2a1c38b6f92cfbc38afb1d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>flushSystem</name>
      <anchorfile>classiv_1_1ConfigFileSystem.html</anchorfile>
      <anchor>a0833e05654a5d9fc6f512c8983f949fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classiv_1_1ConfigFileSystem.html</anchorfile>
      <anchor>a02ce6ce24d772084fa7225d024212f37</anchor>
      <arglist>(TextDebugView *view) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stream_add_listener</name>
      <anchorfile>classiv_1_1ConfigFileSystem.html</anchorfile>
      <anchor>a7d7be24bf6e04f491e1ab9e3226bdaa8</anchor>
      <arglist>(ConfigStream *listener, std::string const &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stream_remove_listener</name>
      <anchorfile>classiv_1_1ConfigFileSystem.html</anchorfile>
      <anchor>a87d2a01aa760c63541d810cac7ea3f17</anchor>
      <arglist>(ConfigStream *listener)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stream_exists</name>
      <anchorfile>classiv_1_1ConfigFileSystem.html</anchorfile>
      <anchor>a76d7f936981be28e3fe863cb1193a15f</anchor>
      <arglist>(std::string const &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stream_read</name>
      <anchorfile>classiv_1_1ConfigFileSystem.html</anchorfile>
      <anchor>a17bcbbbfd1152e038470983cddf7bde9</anchor>
      <arglist>(std::string const &amp;name, std::function&lt; void(std::istream &amp;) &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stream_write</name>
      <anchorfile>classiv_1_1ConfigFileSystem.html</anchorfile>
      <anchor>a4ea20de0ff0c6959371c56f352347857</anchor>
      <arglist>(std::string const &amp;name, std::function&lt; void(std::ostream &amp;) &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_filepath</name>
      <anchorfile>classiv_1_1ConfigFileSystem.html</anchorfile>
      <anchor>a91c0d39dda44adee51dddf27ef34d2df</anchor>
      <arglist>(std::string const &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ConfigStream</name>
    <filename>classiv_1_1ConfigStream.html</filename>
    <member kind="function">
      <type></type>
      <name>ConfigStream</name>
      <anchorfile>classiv_1_1ConfigStream.html</anchorfile>
      <anchor>a9bbc850045a4af02560780caa0040030</anchor>
      <arglist>(Instance *inst, std::string const &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConfigStream</name>
      <anchorfile>classiv_1_1ConfigStream.html</anchorfile>
      <anchor>a47027e7a7b0ae554b10c8bfd15062288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1ConfigStream.html</anchorfile>
      <anchor>a32e371b300f584c4162ef58834cebae1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>config_stream_changed</name>
      <anchorfile>classiv_1_1ConfigStream.html</anchorfile>
      <anchor>aeae04339c9a1f32250562f8b71aa7176</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stream_exists</name>
      <anchorfile>classiv_1_1ConfigStream.html</anchorfile>
      <anchor>aa1d90841e2b0fad7c4fd1b44f701e9bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stream_read</name>
      <anchorfile>classiv_1_1ConfigStream.html</anchorfile>
      <anchor>ab213c0fc41204a76f06b772fe6846168</anchor>
      <arglist>(std::function&lt; void(std::istream &amp;) &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stream_write</name>
      <anchorfile>classiv_1_1ConfigStream.html</anchorfile>
      <anchor>a7041336a3a5b4522cc673e6fa3243e38</anchor>
      <arglist>(std::function&lt; void(std::ostream &amp;) &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_filepath</name>
      <anchorfile>classiv_1_1ConfigStream.html</anchorfile>
      <anchor>a5f42f4abedce678bc3d11ccda7fb874f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1ConfigStream.html</anchorfile>
      <anchor>af9e87d3c0614db1207878329a10a145a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Context</name>
    <filename>classiv_1_1Context.html</filename>
    <class kind="class">iv::Context::Begin</class>
    <class kind="class">iv::Context::End</class>
    <class kind="class">iv::Context::Endl</class>
    <member kind="function">
      <type></type>
      <name>Context</name>
      <anchorfile>classiv_1_1Context.html</anchorfile>
      <anchor>a7b45eec97c42a72641a2d4ccf02a2158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Context</name>
      <anchorfile>classiv_1_1Context.html</anchorfile>
      <anchor>a73cb10ca9bdcc8ff3ff2a5082ae93f0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classiv_1_1Context.html</anchorfile>
      <anchor>ad373cd04568ac8977f7ac776722e5d63</anchor>
      <arglist>(SrcInfo const &amp;info, LogId id, Items const &amp;... items) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>log_enabled</name>
      <anchorfile>classiv_1_1Context.html</anchorfile>
      <anchor>ab21638cdc8dede6a7c6a7498752a7766</anchor>
      <arglist>(LogId id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>classiv_1_1Context.html</anchorfile>
      <anchor>a77d170be1ce3eb72fad55cd0d38bc189</anchor>
      <arglist>(SrcInfo const &amp;info, Items const &amp;... items) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>log_process_enabled</name>
      <anchorfile>classiv_1_1Context.html</anchorfile>
      <anchor>a070aa25d695d5c4b96a8d74ebd3d3dc6</anchor>
      <arglist>(LogId id) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>log_process</name>
      <anchorfile>classiv_1_1Context.html</anchorfile>
      <anchor>ac262d858534382cda721483bf53e9d00</anchor>
      <arglist>(SrcInfo const &amp;info, LogId id, std::string const &amp;message) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Cooldown_Connector</name>
    <filename>classiv_1_1Cooldown__Connector.html</filename>
    <templarg></templarg>
    <base>Transform_ConnectorI&lt; T, T &gt;</base>
    <member kind="function">
      <type></type>
      <name>Cooldown_Connector</name>
      <anchorfile>classiv_1_1Cooldown__Connector.html</anchorfile>
      <anchor>ab913ee31c21659f315f3be7dcb2b9378</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Cooldown_Connector&lt; T &gt; *</type>
      <name>cooldown_increasing</name>
      <anchorfile>classiv_1_1Cooldown__Connector.html</anchorfile>
      <anchor>a419c0440eb0dce75bc2129ffaab936b8</anchor>
      <arglist>(Anim_float)</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>cooldown_increasing</name>
      <anchorfile>classiv_1_1Cooldown__Connector.html</anchorfile>
      <anchor>a3509c5782d3a861aac3f8ae0e4dacbb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cooldown_Connector&lt; T &gt; *</type>
      <name>cooldown_decreasing</name>
      <anchorfile>classiv_1_1Cooldown__Connector.html</anchorfile>
      <anchor>a8291bc5173bb19e6ef3fc97b20b50d0b</anchor>
      <arglist>(Anim_float)</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>cooldown_decreasing</name>
      <anchorfile>classiv_1_1Cooldown__Connector.html</anchorfile>
      <anchor>a2818db6fd66048d0cf53d300f97beeb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdatePass_Down</name>
      <anchorfile>classiv_1_1Cooldown__Connector.html</anchorfile>
      <anchor>ac383f5bdb6b421dcb7568111495a28f8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdatePass_Up</name>
      <anchorfile>classiv_1_1Cooldown__Connector.html</anchorfile>
      <anchor>a082e457ccd31e7ffd493af4f4274e0bc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Cooldown__Connector.html</anchorfile>
      <anchor>a062a96fa0ea8d8875b87cef09aabcb6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DataStream</name>
    <filename>classiv_1_1DataStream.html</filename>
    <base protection="private">iv::StreamResource</base>
    <member kind="function">
      <type></type>
      <name>DataStream</name>
      <anchorfile>classiv_1_1DataStream.html</anchorfile>
      <anchor>a7e691fa4c37153e9716c5a8879f3960d</anchor>
      <arglist>(Instance *inst, StreamResourceProvider const *provider, DataStream_Subprovider const *, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>ResourcePath</type>
      <name>path</name>
      <anchorfile>classiv_1_1DataStream.html</anchorfile>
      <anchor>a7550345798ac4600294a44de9698c17e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>with_stream</name>
      <anchorfile>classiv_1_1DataStream.html</anchorfile>
      <anchor>ac50b7d99f8ca1ab2fba38ced28f7c36f</anchor>
      <arglist>(std::function&lt; void(std::istream &amp;) &gt; const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1DataStream.html</anchorfile>
      <anchor>a0e1a0d41dda216a6e0d03419bc49d043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DataStream.html</anchorfile>
      <anchor>ac6cb0cb2068470685ba3971d7c0ef323</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DataStream_Resource</name>
    <filename>classiv_1_1DataStream__Resource.html</filename>
    <base>SingularResource&lt; DataStream &gt;</base>
    <member kind="function">
      <type></type>
      <name>DataStream_Resource</name>
      <anchorfile>classiv_1_1DataStream__Resource.html</anchorfile>
      <anchor>a8f15083ee34c363ba677a437d9cd7089</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DataStream__Resource.html</anchorfile>
      <anchor>a9c9b5cde789269481fc9eb501ac30b71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DataStream_Subprovider</name>
    <filename>classiv_1_1DataStream__Subprovider.html</filename>
    <base>iv::Plain_StreamResourceSubprovider</base>
    <member kind="function">
      <type></type>
      <name>DataStream_Subprovider</name>
      <anchorfile>classiv_1_1DataStream__Subprovider.html</anchorfile>
      <anchor>a63a073640826027999f909016d4884a9</anchor>
      <arglist>(Instance *inst, StreamResourceProvider const *)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DataStream__Subprovider.html</anchorfile>
      <anchor>ad658281f3f6b1ba8e2a84efefbb0779a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DebugInstanceListener</name>
    <filename>classiv_1_1DebugInstanceListener.html</filename>
    <member kind="function">
      <type></type>
      <name>DebugInstanceListener</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>ae41a931cee7ae9a1569f135128836b31</anchor>
      <arglist>(Instance *inst, InstanceSystem *target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DebugInstanceListener</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>a3ff7f3352dfd8fb03c903f177723299d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>ac56f4070ccdc3b412e696c09ff6a94e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InstanceCreated</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>a4defa9d382dbb2ddd60915fc4366b7be</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InstanceDestroyed</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>a7664bc7975f6940df427ae4043fc41ce</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ClientCreated</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>afe0d6d2e46912925c946ac75c67965dd</anchor>
      <arglist>(ClientMarker const *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ClientDestroyed</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>aab50d95efbe6e4838c6eb09f24e43d37</anchor>
      <arglist>(ClientMarker const *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ClientLog</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>a96404625fd2ea54e73c51dedc5f39460</anchor>
      <arglist>(ClientMarker const *marker, SrcInfo const &amp;info, LogId id, std::string const &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ClientLogEnabled</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>ab34b98fad7ba31e4ceaca9664537a494</anchor>
      <arglist>(ClientMarker const *marker, LogId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SystemLog</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>aad82a3c708327cd5afc71dd7d044a46d</anchor>
      <arglist>(System const *, SrcInfo const &amp;info, LogId id, std::string const &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SystemLogEnabled</name>
      <anchorfile>classiv_1_1DebugInstanceListener.html</anchorfile>
      <anchor>ab6e38d416aa398b04351d7b5e9d820c2</anchor>
      <arglist>(System const *, LogId id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DebugView</name>
    <filename>classiv_1_1DebugView.html</filename>
    <member kind="function">
      <type></type>
      <name>DebugView</name>
      <anchorfile>classiv_1_1DebugView.html</anchorfile>
      <anchor>a38941b555a9cc690dfb161d6fe03a928</anchor>
      <arglist>(Context *context)</arglist>
    </member>
    <member kind="function">
      <type>Context *</type>
      <name>context</name>
      <anchorfile>classiv_1_1DebugView.html</anchorfile>
      <anchor>a6180a81399a14b94a9c1e4cf748b2bd5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DefaultBinder</name>
    <filename>classiv_1_1DefaultBinder.html</filename>
    <base>iv::InputBinder</base>
    <member kind="function">
      <type></type>
      <name>DefaultBinder</name>
      <anchorfile>classiv_1_1DefaultBinder.html</anchorfile>
      <anchor>a42a04110ccc7ec74126ad4536ab1a99e</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DefaultBinder.html</anchorfile>
      <anchor>a36f954557e7172e9b527f912cdd4def8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DefaultLumaStyles</name>
    <filename>classiv_1_1DefaultLumaStyles.html</filename>
    <base>iv::LumaStyler</base>
    <member kind="function">
      <type></type>
      <name>DefaultLumaStyles</name>
      <anchorfile>classiv_1_1DefaultLumaStyles.html</anchorfile>
      <anchor>a0f4f2bfc4dc5a45e7df446fcbc45e030</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Light</name>
      <anchorfile>classiv_1_1DefaultLumaStyles.html</anchorfile>
      <anchor>a883149df65ead69110ad2b68603f94c2</anchor>
      <arglist>(LumaStyleId primary, LumaStyleId secondary=LumaStyleId())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Green</name>
      <anchorfile>classiv_1_1DefaultLumaStyles.html</anchorfile>
      <anchor>a0ab2f5a2e4a38e85871397ec35bdc9a3</anchor>
      <arglist>(LumaStyleId primary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Dark</name>
      <anchorfile>classiv_1_1DefaultLumaStyles.html</anchorfile>
      <anchor>a4c747a932b06066f8f3bd769e18dee80</anchor>
      <arglist>(LumaStyleId primary, LumaStyleId secondary=LumaStyleId())</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DefaultLumaStyles.html</anchorfile>
      <anchor>ac6e0422e0ac67a5a6a3dbdde384834d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DelayedLoad</name>
    <filename>classiv_1_1DelayedLoad.html</filename>
    <member kind="function">
      <type></type>
      <name>DelayedLoad</name>
      <anchorfile>classiv_1_1DelayedLoad.html</anchorfile>
      <anchor>aa0b4e3463c7d7fbcbcc9fc23a68de985</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DelayedLoad</name>
      <anchorfile>classiv_1_1DelayedLoad.html</anchorfile>
      <anchor>a21c71923b5b4d41928fe89f2debf2472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1DelayedLoad.html</anchorfile>
      <anchor>a2920d0b50b848d4c2406534ac0e13d60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadNow</name>
      <anchorfile>classiv_1_1DelayedLoad.html</anchorfile>
      <anchor>a420199167a059d2dddf0f209c2294f74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DelayedLoad.html</anchorfile>
      <anchor>aa5d8cb2db76c799fcd11c38f9ae1ef2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RequestDelayedLoad</name>
      <anchorfile>classiv_1_1DelayedLoad.html</anchorfile>
      <anchor>a21d321b0b3d3368d7371f7aca53419e7</anchor>
      <arglist>(int complexity_bytes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Load</name>
      <anchorfile>classiv_1_1DelayedLoad.html</anchorfile>
      <anchor>a3c04f9a6fbc888370c3ad5a0e28aec6f</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DelayedLoader</name>
    <filename>classiv_1_1DelayedLoader.html</filename>
    <member kind="function">
      <type></type>
      <name>DelayedLoader</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>ac900a940ce1d88b2b85e030ccc9aaecb</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DelayedLoader</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>a9d62c09b81e3403034aa259622d7afb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>a23e0882dc5afecbd3a392ca2fbcd3e12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BlockLoading</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>af7f3e8699f677c41b40fce559f0cb387</anchor>
      <arglist>(bool block)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LoadingRunning</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>af3db2bc1ec3341d489d17ba71aca3967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DelayedLoadStatus &amp;</type>
      <name>LoadingStatus</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>a77daec7ca3e1ce5d9057a0f3354cf0b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>LoadStart</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>ac688574225afd13c6249f6a6abbf4e97</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>LoadFinish</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>a405f686c20b5c5fc42520c86b01ed119</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ItemQueued</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>ac745c183f3ef2d5fdd8139f974281a4d</anchor>
      <arglist>(DelayedLoad const *item, int complexity_bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ItemLoaded</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>af40d7600b2fa4e2d252c2d7448a59e37</anchor>
      <arglist>(DelayedLoad const *item, int complexity_bytes)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DelayedLoader.html</anchorfile>
      <anchor>afb01c238e7736b7edaa0e30c827ebaa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DelayedLoadStatus</name>
    <filename>classiv_1_1DelayedLoadStatus.html</filename>
    <member kind="function">
      <type></type>
      <name>DelayedLoadStatus</name>
      <anchorfile>classiv_1_1DelayedLoadStatus.html</anchorfile>
      <anchor>a30dbddb7b8a4354e6986d1b090ce69a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>items_total</name>
      <anchorfile>classiv_1_1DelayedLoadStatus.html</anchorfile>
      <anchor>a90f8a6f001ace1fee20cb9f58afd7ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>items_done</name>
      <anchorfile>classiv_1_1DelayedLoadStatus.html</anchorfile>
      <anchor>ac8deda9b82d8b3529bbeabc825a1a3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>complexity_total</name>
      <anchorfile>classiv_1_1DelayedLoadStatus.html</anchorfile>
      <anchor>acb92dbba4e0a74aa498f9d6b02c7e3e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>complexity_done</name>
      <anchorfile>classiv_1_1DelayedLoadStatus.html</anchorfile>
      <anchor>a222b20587416f23f186f8303e40ab4a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DelayedLoadSystem</name>
    <filename>classiv_1_1DelayedLoadSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>DelayedLoadSystem</name>
      <anchorfile>classiv_1_1DelayedLoadSystem.html</anchorfile>
      <anchor>ad3cbc62a874541792ec31511efa214b6</anchor>
      <arglist>(SystemContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1DelayedLoadSystem.html</anchorfile>
      <anchor>a3bc5fc7043729050af61fcca57ab5113</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadStep</name>
      <anchorfile>classiv_1_1DelayedLoadSystem.html</anchorfile>
      <anchor>a334268fe219fdf875e9919cf5d4b6d6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>QueueDelayedLoad</name>
      <anchorfile>classiv_1_1DelayedLoadSystem.html</anchorfile>
      <anchor>acf33ee10f8e962ed7a51b0190ee4be9b</anchor>
      <arglist>(DelayedLoad *load, int complexity_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearDelayedLoad</name>
      <anchorfile>classiv_1_1DelayedLoadSystem.html</anchorfile>
      <anchor>abe20ee42570fd735950b2a473c6c3d32</anchor>
      <arglist>(DelayedLoad *load)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loader_register</name>
      <anchorfile>classiv_1_1DelayedLoadSystem.html</anchorfile>
      <anchor>a7124c8b844a5271a590d6c2fd50429e3</anchor>
      <arglist>(DelayedLoader *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loader_unregister</name>
      <anchorfile>classiv_1_1DelayedLoadSystem.html</anchorfile>
      <anchor>a742005b4bf1252d05f3a2e0dabbd0865</anchor>
      <arglist>(DelayedLoader *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BlockLoading</name>
      <anchorfile>classiv_1_1DelayedLoadSystem.html</anchorfile>
      <anchor>ac0b68e118af527d5f1d56c85ba231106</anchor>
      <arglist>(DelayedLoader *, bool block)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LoadingRunning</name>
      <anchorfile>classiv_1_1DelayedLoadSystem.html</anchorfile>
      <anchor>ad55b8ce11bf1a8dc02dc1dc6da250501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DelayedLoadStatus &amp;</type>
      <name>Status</name>
      <anchorfile>classiv_1_1DelayedLoadSystem.html</anchorfile>
      <anchor>aa1067d2f203f392dafc8fed01cb13bf1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Destination_AnimNode</name>
    <filename>classiv_1_1Destination__AnimNode.html</filename>
    <templarg></templarg>
    <base>iv::AnimNode</base>
    <base>iv::Destination_Connector</base>
    <member kind="function">
      <type></type>
      <name>Destination_AnimNode</name>
      <anchorfile>classiv_1_1Destination__AnimNode.html</anchorfile>
      <anchor>a7dfcd4ffce9062eb2fb7f6dd2a93d82e</anchor>
      <arglist>(Instance *inst, T const &amp;initial_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Destination_AnimNode</name>
      <anchorfile>classiv_1_1Destination__AnimNode.html</anchorfile>
      <anchor>a2357315d0ed49b9caa90d447e9b31c37</anchor>
      <arglist>(Instance *inst, Attr&lt; T &gt; *destination, T const &amp;initial_value)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Destination__AnimNode.html</anchorfile>
      <anchor>afe562226df80d9688c262c6259ae3478</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Destination_Connector</name>
    <filename>classiv_1_1Destination__Connector.html</filename>
    <templarg></templarg>
    <base>Destination_ConnectorGI&lt; T, iv::Interpolator&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>iv::Destination_ConnectorGI</name>
    <filename>classiv_1_1Destination__ConnectorGI.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>iv::AnimConnector</base>
    <member kind="function">
      <type></type>
      <name>Destination_ConnectorGI</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a63ae7d9e4e215b1da7b94c116f508d43</anchor>
      <arglist>(Instance *inst, AnimNode&lt; T &gt; *parent=nullptr, Attr&lt; T &gt; *destination=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Destination_ConnectorGI</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>ae94d8dc2a025c628fbc95d71d13edfe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParent</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a751512eb31723855622179b55fc5efed</anchor>
      <arglist>(AnimNode&lt; T &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDestination</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a61e64d0d46183fab58dab77a9c358f36</anchor>
      <arglist>(Attr&lt; T &gt; *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_eachParent</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a2f7177840e0911d14dddb3d587d3df7f</anchor>
      <arglist>(std::function&lt; void(AnimNodeI *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_parentDisconnect</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a714a1770fda34c6e0a4739ca75901146</anchor>
      <arglist>(AnimNodeI *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdatePass_Down</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>ab2739e5c415f9fc3aace425b7888cede</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdatePass_Up</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a2b7aa97c4ab749aeab39f3ef35048968</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a3347f0693f158febd408efb3b1041cdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a5c5f9aba9c005e5c096209d08bd4bd4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Destination_ConnectorGI&lt; T, iv::Interpolator&lt; T &gt; &gt;</name>
    <filename>classiv_1_1Destination__ConnectorGI.html</filename>
    <base>iv::AnimConnector</base>
    <member kind="function">
      <type></type>
      <name>Destination_ConnectorGI</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a63ae7d9e4e215b1da7b94c116f508d43</anchor>
      <arglist>(Instance *inst, AnimNode&lt; T &gt; *parent=nullptr, Attr&lt; T &gt; *destination=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Destination_ConnectorGI</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>ae94d8dc2a025c628fbc95d71d13edfe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParent</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a751512eb31723855622179b55fc5efed</anchor>
      <arglist>(AnimNode&lt; T &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDestination</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a61e64d0d46183fab58dab77a9c358f36</anchor>
      <arglist>(Attr&lt; T &gt; *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_eachParent</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a2f7177840e0911d14dddb3d587d3df7f</anchor>
      <arglist>(std::function&lt; void(AnimNodeI *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_parentDisconnect</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a714a1770fda34c6e0a4739ca75901146</anchor>
      <arglist>(AnimNodeI *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdatePass_Down</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>ab2739e5c415f9fc3aace425b7888cede</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdatePass_Up</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a2b7aa97c4ab749aeab39f3ef35048968</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a3347f0693f158febd408efb3b1041cdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Destination__ConnectorGI.html</anchorfile>
      <anchor>a5c5f9aba9c005e5c096209d08bd4bd4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::runtime_id::Dictionary</name>
    <filename>classiv_1_1runtime__id_1_1Dictionary.html</filename>
    <member kind="function">
      <type></type>
      <name>Dictionary</name>
      <anchorfile>classiv_1_1runtime__id_1_1Dictionary.html</anchorfile>
      <anchor>a4dc154aa2b6c82d8b6cc0d4658a15231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>create</name>
      <anchorfile>classiv_1_1runtime__id_1_1Dictionary.html</anchorfile>
      <anchor>a0b71a5b09845366492ecaabcaa09d052</anchor>
      <arglist>(const char *persistent_name, char const *type_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>runtime_to_persistent</name>
      <anchorfile>classiv_1_1runtime__id_1_1Dictionary.html</anchorfile>
      <anchor>a3d88eaa4b7293e0b6169d081054145e3</anchor>
      <arglist>(int runtime)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>persistent_to_runtime</name>
      <anchorfile>classiv_1_1runtime__id_1_1Dictionary.html</anchorfile>
      <anchor>ac194df2836101f8c092c35d74df3a4bf</anchor>
      <arglist>(const char *persistent)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtime_validate</name>
      <anchorfile>classiv_1_1runtime__id_1_1Dictionary.html</anchorfile>
      <anchor>a75084fe7c6d725accf68a299561c0877</anchor>
      <arglist>(int runtime)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ids_count</name>
      <anchorfile>classiv_1_1runtime__id_1_1Dictionary.html</anchorfile>
      <anchor>a0c0035a87c58afb2370fa513e0bc2388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classiv_1_1runtime__id_1_1Dictionary.html</anchorfile>
      <anchor>adcf0f47659fc4f59aa5dec8948960da6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const constexpr int</type>
      <name>InvalidRuntimeId</name>
      <anchorfile>classiv_1_1runtime__id_1_1Dictionary.html</anchorfile>
      <anchor>a28d7ac22b5ee5f07f78f9d02a898d966</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DirtyAttr</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <templarg></templarg>
    <base protection="private">iv::Local_AEP</base>
    <base>iv::DirtyAttr_I</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, T const &amp;initial_value=T())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; Axis &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; Axis &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, Axis const &amp;initial_value=Axis())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; AxisOrder &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; AxisOrder &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, AxisOrder const &amp;initial_value=AxisOrder())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; bool &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, bool const &amp;initial_value=bool())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; ChildT * &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; ChildT * &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, ChildT * const &amp;initial_value=ChildT *())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; FlatShader::ResizeStage &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; FlatShader::ResizeStage &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, FlatShader::ResizeStage const &amp;initial_value=FlatShader::ResizeStage())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; float &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; float &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, float const &amp;initial_value=float())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; float2 &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; float2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, float2 const &amp;initial_value=float2())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; float3 &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; float3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, float3 const &amp;initial_value=float3())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; float4 &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; float4 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, float4 const &amp;initial_value=float4())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; float4x4 &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; float4x4 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, float4x4 const &amp;initial_value=float4x4())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; floatQuat &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; floatQuat &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, floatQuat const &amp;initial_value=floatQuat())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; iv::FontMesh::Location &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; iv::FontMesh::Location &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, iv::FontMesh::Location const &amp;initial_value=iv::FontMesh::Location())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; iv::ResourcePath &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; iv::ResourcePath &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, iv::ResourcePath const &amp;initial_value=iv::ResourcePath())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; iv::ShaderScissor &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; iv::ShaderScissor &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, iv::ShaderScissor const &amp;initial_value=iv::ShaderScissor())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; SlotChild * &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; SlotChild * &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, SlotChild * const &amp;initial_value=SlotChild *())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; std::optional&lt; float &gt; &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; std::optional&lt; float &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, std::optional&lt; float &gt; const &amp;initial_value=std::optional&lt; float &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; std::optional&lt; float4 &gt; &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; std::optional&lt; float4 &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, std::optional&lt; float4 &gt; const &amp;initial_value=std::optional&lt; float4 &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; std::string &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; std::string &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, std::string const &amp;initial_value=std::string())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr&lt; unsigned &gt;</name>
    <filename>classiv_1_1DirtyAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>DirtyAttr_I&lt; unsigned &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a13bce1b8cc28cd91ff63fb543ac87bfc</anchor>
      <arglist>(ClientMarker *, unsigned const &amp;initial_value=unsigned())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirtyAttr</name>
      <anchorfile>classiv_1_1DirtyAttr.html</anchorfile>
      <anchor>a5c2cc3eb90647384e1a6dccc8823e05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DirtyAttr_I</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <templarg></templarg>
    <base>iv::Attr</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, T const &amp;initial_value=T())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; T &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(T const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; Axis &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; Axis &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, Axis const &amp;initial_value=Axis())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; Axis &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(Axis const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; AxisOrder &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; AxisOrder &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, AxisOrder const &amp;initial_value=AxisOrder())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; AxisOrder &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(AxisOrder const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; bool &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, bool const &amp;initial_value=bool())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; bool &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(bool const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; ChildT * &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; ChildT * &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, ChildT * const &amp;initial_value=ChildT *())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; ChildT * &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(ChildT * const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; FlatShader::ResizeStage &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; FlatShader::ResizeStage &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, FlatShader::ResizeStage const &amp;initial_value=FlatShader::ResizeStage())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; FlatShader::ResizeStage &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(FlatShader::ResizeStage const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; float &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; float &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, float const &amp;initial_value=float())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; float &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(float const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; float2 &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; float2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, float2 const &amp;initial_value=float2())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; float2 &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(float2 const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; float3 &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; float3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, float3 const &amp;initial_value=float3())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; float3 &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(float3 const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; float4 &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; float4 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, float4 const &amp;initial_value=float4())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; float4 &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(float4 const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; float4x4 &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; float4x4 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, float4x4 const &amp;initial_value=float4x4())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; float4x4 &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(float4x4 const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; floatQuat &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; floatQuat &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, floatQuat const &amp;initial_value=floatQuat())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; floatQuat &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(floatQuat const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; iv::FontMesh::Location &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; iv::FontMesh::Location &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, iv::FontMesh::Location const &amp;initial_value=iv::FontMesh::Location())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; iv::FontMesh::Location &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(iv::FontMesh::Location const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; iv::ResourcePath &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; iv::ResourcePath &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, iv::ResourcePath const &amp;initial_value=iv::ResourcePath())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; iv::ResourcePath &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(iv::ResourcePath const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; iv::ShaderScissor &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; iv::ShaderScissor &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, iv::ShaderScissor const &amp;initial_value=iv::ShaderScissor())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; iv::ShaderScissor &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(iv::ShaderScissor const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; SlotChild * &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; SlotChild * &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, SlotChild * const &amp;initial_value=SlotChild *())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; SlotChild * &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(SlotChild * const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; std::optional&lt; float &gt; &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; std::optional&lt; float &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, std::optional&lt; float &gt; const &amp;initial_value=std::optional&lt; float &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; std::optional&lt; float &gt; &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(std::optional&lt; float &gt; const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; std::optional&lt; float4 &gt; &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; std::optional&lt; float4 &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, std::optional&lt; float4 &gt; const &amp;initial_value=std::optional&lt; float4 &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; std::optional&lt; float4 &gt; &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(std::optional&lt; float4 &gt; const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; std::string &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; std::string &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, std::string const &amp;initial_value=std::string())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; std::string &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(std::string const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirtyAttr_I&lt; unsigned &gt;</name>
    <filename>classiv_1_1DirtyAttr__I.html</filename>
    <base>Attr&lt; unsigned &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirtyAttr_I</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a30e48069f9c2afa84bbbb24face4133d</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, unsigned const &amp;initial_value=unsigned())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a5f4d065ce8fa413a4f7725c8242c7f7d</anchor>
      <arglist>(DirtyAttr_I&lt; unsigned &gt; const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a7797cf18986f649389ae406c65ad796e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_dirty</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a78ad390b3a9faf1be9ff5fba3f8fe5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1DirtyAttr__I.html</anchorfile>
      <anchor>a853b14e2e6ce8f06db4a35bfd51595f3</anchor>
      <arglist>(unsigned const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Divider</name>
    <filename>classiv_1_1Divider.html</filename>
    <base>VectorChildrenElem&lt; DividerSlot &gt;</base>
    <base>iv::SlotChild</base>
    <member kind="function">
      <type></type>
      <name>Divider</name>
      <anchorfile>classiv_1_1Divider.html</anchorfile>
      <anchor>a58c59894a361c5028308f513a999dbb6</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Divider.html</anchorfile>
      <anchor>a98529c8514bfe821710b11fcbf1f4af7</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>Divider *</type>
      <name>axis</name>
      <anchorfile>classiv_1_1Divider.html</anchorfile>
      <anchor>a89299a56db4227e1da02f0c0410949db</anchor>
      <arglist>(Axis)</arglist>
    </member>
    <member kind="function">
      <type>Divider *</type>
      <name>axisOrder</name>
      <anchorfile>classiv_1_1Divider.html</anchorfile>
      <anchor>a0b2fe0fe58f4761957119dd7b9e71440</anchor>
      <arglist>(AxisOrder)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Divider.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Divider.html</anchorfile>
      <anchor>a56aa9b90490d7809df423b523357b2ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; Axis &gt;</type>
      <name>attr_axis</name>
      <anchorfile>classiv_1_1Divider.html</anchorfile>
      <anchor>a3c84153a753492d7e994afcf89b6e3bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; AxisOrder &gt;</type>
      <name>attr_axisOrder</name>
      <anchorfile>classiv_1_1Divider.html</anchorfile>
      <anchor>a50c6945680715fbbb39e0e3c939655b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1Divider.html</anchorfile>
      <anchor>aa30ad439833166a3e038194ff065fd33</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1Divider.html</anchorfile>
      <anchor>ac69620273b1534951d30a15534fbc343</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DividerSlot</name>
    <filename>classiv_1_1DividerSlot.html</filename>
    <base>iv::Slot</base>
    <member kind="function">
      <type></type>
      <name>DividerSlot</name>
      <anchorfile>classiv_1_1DividerSlot.html</anchorfile>
      <anchor>a72b42cad27674476b091a1d933e5de96</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1DividerSlot.html</anchorfile>
      <anchor>af33ffe14414042bd8d05d180535d67b6</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>DividerSlot *</type>
      <name>lowerOrder</name>
      <anchorfile>classiv_1_1DividerSlot.html</anchorfile>
      <anchor>add42c8b66647c3d503e9defebbd761b0</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function">
      <type>DividerSlot *</type>
      <name>higherOrder</name>
      <anchorfile>classiv_1_1DividerSlot.html</anchorfile>
      <anchor>a80b727099db2e611acb1ce1044acf1e9</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DividerSlot.html</anchorfile>
      <anchor>a9718e5f547321fc4ab021bab797f60c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; unsigned &gt;</type>
      <name>attr_lowerOrder</name>
      <anchorfile>classiv_1_1DividerSlot.html</anchorfile>
      <anchor>abe8aed54d4776287648250e9388501c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; unsigned &gt;</type>
      <name>attr_higherOrder</name>
      <anchorfile>classiv_1_1DividerSlot.html</anchorfile>
      <anchor>ac6d195bedd0e4dda8e09454de5282dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DVar</name>
    <filename>classiv_1_1DVar.html</filename>
    <templarg></templarg>
    <base protection="private">iv::DVarListenerI</base>
    <member kind="function">
      <type></type>
      <name>DVar</name>
      <anchorfile>classiv_1_1DVar.html</anchorfile>
      <anchor>ab67016da3273cbb65060746dfb1073d1</anchor>
      <arglist>(Instance *inst, DVarIdT&lt; Type &gt; id=DVarIdT&lt; Type &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DVar</name>
      <anchorfile>classiv_1_1DVar.html</anchorfile>
      <anchor>a4438db6877f3ea1aa1823b6d88dc80f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1DVar.html</anchorfile>
      <anchor>a4cb105c946ea5e36f8bf3008ea1ef308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>get</name>
      <anchorfile>classiv_1_1DVar.html</anchorfile>
      <anchor>ac4ef519e72f842da15dd5f24306dac80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dvar</name>
      <anchorfile>classiv_1_1DVar.html</anchorfile>
      <anchor>a9b47df0c98e1d22c81934c51103cd409</anchor>
      <arglist>(DVarIdT&lt; Type &gt; id)</arglist>
    </member>
    <member kind="function">
      <type>DVarIdT&lt; Type &gt;</type>
      <name>dvar</name>
      <anchorfile>classiv_1_1DVar.html</anchorfile>
      <anchor>a796917879886c6375569338403049f9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_changed</name>
      <anchorfile>classiv_1_1DVar.html</anchorfile>
      <anchor>a79796c53ffc409b5072834f320a09756</anchor>
      <arglist>(std::function&lt; void(Type const &amp;newval) &gt; const &amp;, bool call_immediately=false)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DVar.html</anchorfile>
      <anchor>a66bf0d120faa7fd4ed28122623b1adf5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DVar_Field</name>
    <filename>classiv_1_1DVar__Field.html</filename>
    <templarg></templarg>
    <base>Field&lt; Type &gt;</base>
    <base protection="private">iv::DVarListenerI</base>
    <member kind="function">
      <type></type>
      <name>DVar_Field</name>
      <anchorfile>classiv_1_1DVar__Field.html</anchorfile>
      <anchor>ad2ae641992bde7a21aba0409efa4ce91</anchor>
      <arglist>(Instance *inst, DVarIdT&lt; Type &gt; id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DVar_Field</name>
      <anchorfile>classiv_1_1DVar__Field.html</anchorfile>
      <anchor>a9d198c5c37aee75802f7172fa181f75e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1DVar__Field.html</anchorfile>
      <anchor>ae10f5e36cddd30a2867e5b966ffd4f3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DVar__Field.html</anchorfile>
      <anchor>a0c08fe6b053487d7cfb0e9ed7c3b17c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DVarCloner</name>
    <filename>classiv_1_1DVarCloner.html</filename>
    <templarg></templarg>
    <base protection="private">iv::DVarListenerI</base>
  </compound>
  <compound kind="class">
    <name>iv::DVarId</name>
    <filename>classiv_1_1DVarId.html</filename>
    <base>RuntimeId&lt; DVarId &gt;</base>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1DVarId.html</anchorfile>
      <anchor>a9adea6d86c0434d108725bf8b285ddeb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static RuntimeIdDictionary</type>
      <name>Dictionary</name>
      <anchorfile>classiv_1_1DVarId.html</anchorfile>
      <anchor>a13af31be8af6b3ec1e6597aa4c911ad3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DVarIdT</name>
    <filename>classiv_1_1DVarIdT.html</filename>
    <templarg></templarg>
    <base>iv::DVarId</base>
    <member kind="function">
      <type></type>
      <name>DVarIdT</name>
      <anchorfile>classiv_1_1DVarIdT.html</anchorfile>
      <anchor>ae1c935e23ad16c64b85297e69902da5f</anchor>
      <arglist>(DVarId const &amp;id, Type initial)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>initial</name>
      <anchorfile>classiv_1_1DVarIdT.html</anchorfile>
      <anchor>a2c754b90e8c14b16efbecc8105f229e9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DVarIdT&lt; T &gt;</name>
    <filename>classiv_1_1DVarIdT.html</filename>
    <base>iv::DVarId</base>
    <member kind="function">
      <type></type>
      <name>DVarIdT</name>
      <anchorfile>classiv_1_1DVarIdT.html</anchorfile>
      <anchor>ae1c935e23ad16c64b85297e69902da5f</anchor>
      <arglist>(DVarId const &amp;id, T initial)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>initial</name>
      <anchorfile>classiv_1_1DVarIdT.html</anchorfile>
      <anchor>a2c754b90e8c14b16efbecc8105f229e9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DVarListener</name>
    <filename>classiv_1_1DVarListener.html</filename>
    <base>iv::DVarListenerI</base>
    <member kind="function">
      <type></type>
      <name>DVarListener</name>
      <anchorfile>classiv_1_1DVarListener.html</anchorfile>
      <anchor>af0ff760c0a055880dff914d208854446</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DVarListener</name>
      <anchorfile>classiv_1_1DVarListener.html</anchorfile>
      <anchor>a5437ebc3293bb01e5307d4fa1e0fcd47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1DVarListener.html</anchorfile>
      <anchor>a3a7f87c8dc13bccc553dddc5e6ee552c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_dvar_listening</name>
      <anchorfile>classiv_1_1DVarListener.html</anchorfile>
      <anchor>ad1aa25e410151e069b70a977bd8453e5</anchor>
      <arglist>(DVarId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_dvar_listening</name>
      <anchorfile>classiv_1_1DVarListener.html</anchorfile>
      <anchor>a3a126990a37aa168f8eada59f59558eb</anchor>
      <arglist>(DVarId id)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>on_dvar_changed</name>
      <anchorfile>classiv_1_1DVarListener.html</anchorfile>
      <anchor>a65c155f14c3bc970c15244f15fa97f20</anchor>
      <arglist>(DVarId id, std::type_index type, void *value) override=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DVarListenerI</name>
    <filename>classiv_1_1DVarListenerI.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>on_dvar_changed</name>
      <anchorfile>classiv_1_1DVarListenerI.html</anchorfile>
      <anchor>a7829253f9e5dbebcfd32fac2f0d266d2</anchor>
      <arglist>(DVarId id, std::type_index type, void *value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DVarManipulator</name>
    <filename>classiv_1_1DVarManipulator.html</filename>
    <member kind="function">
      <type></type>
      <name>DVarManipulator</name>
      <anchorfile>classiv_1_1DVarManipulator.html</anchorfile>
      <anchor>a4fbd9d93c3fa6536dbb1c8ae97f9e689</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1DVarManipulator.html</anchorfile>
      <anchor>a2dcae265952c6f571da0de0f6d687dc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classiv_1_1DVarManipulator.html</anchorfile>
      <anchor>a88ca21d1b12b4cbd46762862f88bbbcd</anchor>
      <arglist>(DVarIdT&lt; Type &gt; id, Type const &amp;value)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DVarManipulator.html</anchorfile>
      <anchor>a6b10c5e5f2a68dab0e1d5ba9011faa0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DVarProperty</name>
    <filename>classiv_1_1DVarProperty.html</filename>
    <templarg></templarg>
    <base protection="private">iv::DVarListenerI</base>
    <member kind="function">
      <type></type>
      <name>DVarProperty</name>
      <anchorfile>classiv_1_1DVarProperty.html</anchorfile>
      <anchor>af2eda136f7a9be5b61727bf7e393747a</anchor>
      <arglist>(Instance *inst, DVarIdT&lt; T &gt; id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DVarProperty</name>
      <anchorfile>classiv_1_1DVarProperty.html</anchorfile>
      <anchor>a9db7ffdc22128c1036f4e58f1dc88c68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1DVarProperty.html</anchorfile>
      <anchor>a86f37656c63189faf5c886561dceda67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classiv_1_1DVarProperty.html</anchorfile>
      <anchor>a5a9ac9261163e3b7194ef5de502949c8</anchor>
      <arglist>(std::optional&lt; T &gt; const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>classiv_1_1DVarProperty.html</anchorfile>
      <anchor>aa5ebf171b761aa052a31d731da53632f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_changed</name>
      <anchorfile>classiv_1_1DVarProperty.html</anchorfile>
      <anchor>a873f14f773cdfb2735ca5537d0c9f28d</anchor>
      <arglist>(std::function&lt; void(T const &amp;newval) &gt; const &amp;, bool call_immediately=false)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1DVarProperty.html</anchorfile>
      <anchor>a7b5796fad00ba05c3aff2df0932b4508</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::DVarSystem</name>
    <filename>classiv_1_1DVarSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>DVarSystem</name>
      <anchorfile>classiv_1_1DVarSystem.html</anchorfile>
      <anchor>ad4e12be29b4351b989912c6c78903563</anchor>
      <arglist>(SystemContainer *sc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DVarSystem</name>
      <anchorfile>classiv_1_1DVarSystem.html</anchorfile>
      <anchor>a510cc817fd8a96ad97d99d989feb8b22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1DVarSystem.html</anchorfile>
      <anchor>a4fcf7061552b8db7275f9a78beee9a5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classiv_1_1DVarSystem.html</anchorfile>
      <anchor>a6660808c47e49a3cb12fae179fe9a94f</anchor>
      <arglist>(Instance *setter, DVarId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classiv_1_1DVarSystem.html</anchorfile>
      <anchor>a841a9385ff88b1aaf0001fd2b0cbe30e</anchor>
      <arglist>(Instance *setter, DVarId id)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>locked</name>
      <anchorfile>classiv_1_1DVarSystem.html</anchorfile>
      <anchor>a29a4d0d9e8767e2408a94053ce424c3d</anchor>
      <arglist>(DVarId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classiv_1_1DVarSystem.html</anchorfile>
      <anchor>a8619bc78e41f655649b876be81fd5da1</anchor>
      <arglist>(Instance *setter, DVarIdT&lt; Type &gt; id, Type const &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>get</name>
      <anchorfile>classiv_1_1DVarSystem.html</anchorfile>
      <anchor>a54317ff92a023d31e73dfaf6fab21a60</anchor>
      <arglist>(DVarIdT&lt; Type &gt; id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_listener</name>
      <anchorfile>classiv_1_1DVarSystem.html</anchorfile>
      <anchor>a29b886ea2f30cb2fcd6b292ca42060c1</anchor>
      <arglist>(DVarListenerI *listener, DVarId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_listener</name>
      <anchorfile>classiv_1_1DVarSystem.html</anchorfile>
      <anchor>a43acb7e73398567fec109e1404766532</anchor>
      <arglist>(DVarListenerI *listener, DVarId id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Elem</name>
    <filename>classiv_1_1Elem.html</filename>
    <base>iv::InputNode</base>
    <member kind="function">
      <type></type>
      <name>Elem</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a87bd7030d5ce7888552cd91e12e06acc</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Elem</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>aaa9c3e3286ab0ae83bf366e493f6e170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a0ce1ad0c043907033ac672b529e6a059</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elem_setParent</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a2da13b9e30f7b4678b10e61fe211f770</anchor>
      <arglist>(Elem *)</arglist>
    </member>
    <member kind="function">
      <type>Elem *</type>
      <name>elem_getParent</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>aa95a100f04f8b9e7f1497ee293068fa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Camera *</type>
      <name>elem_getRoot</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a498e4643dc716a5526b2299d882e4e9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_eachChild</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a33049189643f17c309cea3f07183cca8</anchor>
      <arglist>(std::function&lt; void(Elem *) &gt; const &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_childDisconnect</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a89d13374e4db6269de1706a8971a3db5</anchor>
      <arglist>(Elem *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first_pass</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>aa8f694e2e600d0badf720334b1052618</anchor>
      <arglist>(ElementRenderer *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>second_pass</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a2e700e73ce996fb4e96f148a1ed33c11</anchor>
      <arglist>(ElementRenderer *)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>first_pass_frame_id</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a4c0a4b06431f200b6ae17c643ad8fd37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>second_pass_frame_id</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>ad6394da4ee9f9c974ad8b597a8732000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Elem *</type>
      <name>enabled</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a1798a25dbab16e8cbabe2d770ac74d92</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quiet</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a5e78921ed5e3097d17224948960d7945</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>quiet</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a4919fb39da9429abb71750b144e858c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float3</type>
      <name>FromLocalSpaceToScreenSpace</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>afaa3aacc5a694645a979c7bc17639bec</anchor>
      <arglist>(float3 local_space)</arglist>
    </member>
    <member kind="function">
      <type>float3</type>
      <name>FromScreenSpaceToLocalSpace</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a3e9bccac9a191115a3b294fac2303714</anchor>
      <arglist>(float3 screen_space)</arglist>
    </member>
    <member kind="function">
      <type>float2</type>
      <name>FromScreenPlaneToLocalPlane</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>acae2bc694f13f61953fd7bf80a42e15b</anchor>
      <arglist>(float2 screen_space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add_InputNode</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a205de5e00d372d575f7df2f86b45b553</anchor>
      <arglist>(InputNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Remove_InputNode</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>ae1f6f1326e811728617210c79641eda8</anchor>
      <arglist>(InputNode *node)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>afda7a9045b779a2ccd0dd50feda0ed8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; bool &gt;</type>
      <name>attr_enabled</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a58adfeccc760502789b09429ae12e28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float4x4 &gt;</type>
      <name>modelTransform</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>acedcb8d88098fa5e99e1e4cfbe5a9c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; ShaderScissor &gt;</type>
      <name>scissor</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a0fa6dba1220d30aade96ff9099973d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_childDisconnect</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>abf0a4dc813b15752c595300c6313c587</anchor>
      <arglist>(InputNode *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_eachChild</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a895bbde37a1d3c9a06b2f5f6653e6c5b</anchor>
      <arglist>(std::function&lt; void(InputNode *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>a3c6fbfd4de7ce44370fd533a1e1b126e</anchor>
      <arglist>(ElementRenderer *)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1Elem.html</anchorfile>
      <anchor>acda6b98e2bc33b3542f828993a2176b3</anchor>
      <arglist>(ElementRenderer *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ElementRenderer</name>
    <filename>classiv_1_1ElementRenderer.html</filename>
    <member kind="function">
      <type></type>
      <name>ElementRenderer</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>adda2d32d530818e2caf69a8242177d63</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>add0ee61b252f17dea6a4c63273a7ed6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_frame</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>a87952f790b5689fa5c7ee3144d2f61a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end_frame</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>a1e0f1f985cf6710cd042a4df22d6c811</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>AddRenderable_Solid</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>aa2a14fe820283d09b85d097f5229c85a</anchor>
      <arglist>(Renderable *, GLuint shader_id, GLuint primary_texture_id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>AddRenderable_Translucent</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>a8a6bb5aa0a41cba5d78c018613055bda</anchor>
      <arglist>(Renderable *, GLuint shader_id, GLuint primary_texture_id)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>QueueSecondPass</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>a10e9fda830e5edc14b934c6df0b54605</anchor>
      <arglist>(Elem *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DequeueSecondPass</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>a4007a1c9e05a2f8f253f22dd912a89e6</anchor>
      <arglist>(Elem *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Notify_FirstPass_Refresh</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>a01283873514848a6d46b56c2733b6500</anchor>
      <arglist>(Elem *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Notify_SecondPass_Refresh</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>a23f375885ea49660108d052a04afaf89</anchor>
      <arglist>(Elem *)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>ae887f96f423270122dfe27f82ece4ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RunSecondPasses</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>a8d704589923ace1e82ba4b75b969a10d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>FrameStart</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>a4dc344579f71742728b76f3172538303</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>RunRender</name>
      <anchorfile>classiv_1_1ElementRenderer.html</anchorfile>
      <anchor>a7993de82a8572f376bd46fc3c46797b7</anchor>
      <arglist>(CameraState const &amp;state)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ElementSystem</name>
    <filename>classiv_1_1ElementSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>ElementSystem</name>
      <anchorfile>classiv_1_1ElementSystem.html</anchorfile>
      <anchor>a4b396ff06e8c5a9c5f3a60604a95b917</anchor>
      <arglist>(SystemContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1ElementSystem.html</anchorfile>
      <anchor>ae74aec529a3934883389523a3ca3d6a4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classiv_1_1ElementSystem.html</anchorfile>
      <anchor>a94b949921b1f6ed3a1ff02b8ae13099c</anchor>
      <arglist>(TextDebugView *view) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>flushSystem</name>
      <anchorfile>classiv_1_1ElementSystem.html</anchorfile>
      <anchor>adc8a70a1ee017bf7436f7affcfa13893</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>camera_created</name>
      <anchorfile>classiv_1_1ElementSystem.html</anchorfile>
      <anchor>a2747ff05a84f4c76c9dc58e5101eb62d</anchor>
      <arglist>(Camera *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>camera_destroyed</name>
      <anchorfile>classiv_1_1ElementSystem.html</anchorfile>
      <anchor>abe0d9bdbb034e68de27b772383a8ba9a</anchor>
      <arglist>(Camera *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elem_register</name>
      <anchorfile>classiv_1_1ElementSystem.html</anchorfile>
      <anchor>a282b2eb0d0ac91ed5deea35ac7f68c02</anchor>
      <arglist>(Elem *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elem_unregister</name>
      <anchorfile>classiv_1_1ElementSystem.html</anchorfile>
      <anchor>aafffb9c0db51580564f0d7c1123bfd8c</anchor>
      <arglist>(Elem *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Context::End</name>
    <filename>classiv_1_1Context_1_1End.html</filename>
  </compound>
  <compound kind="class">
    <name>iv::Context::Endl</name>
    <filename>classiv_1_1Context_1_1Endl.html</filename>
  </compound>
  <compound kind="struct">
    <name>iv::ExponentialTransform</name>
    <filename>structiv_1_1ExponentialTransform.html</filename>
    <member kind="function">
      <type></type>
      <name>ExponentialTransform</name>
      <anchorfile>structiv_1_1ExponentialTransform.html</anchorfile>
      <anchor>a17b0a4e15e5dbd3eefbd2e7fb87d9c1a</anchor>
      <arglist>(Anim_float degree)</arglist>
    </member>
    <member kind="function">
      <type>Anim_float</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1ExponentialTransform.html</anchorfile>
      <anchor>a32e4175fb031f08056bb1d3138f8d882</anchor>
      <arglist>(Anim_float x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Pratt::Expression</name>
    <filename>structiv_1_1Pratt_1_1Expression.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Expression</name>
      <anchorfile>structiv_1_1Pratt_1_1Expression.html</anchorfile>
      <anchor>a560dc9623fd34d932fbaf7ca0eb6d1d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Unary *</type>
      <name>ToUnary</name>
      <anchorfile>structiv_1_1Pratt_1_1Expression.html</anchorfile>
      <anchor>a20ced808d5d38e1572571ce22885cdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Binary *</type>
      <name>ToBinary</name>
      <anchorfile>structiv_1_1Pratt_1_1Expression.html</anchorfile>
      <anchor>a839a015d5716c0d0ae86fe5239d6597e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Value *</type>
      <name>ToValue</name>
      <anchorfile>structiv_1_1Pratt_1_1Expression.html</anchorfile>
      <anchor>aa89fe13bf769bc75eff700ab6372abae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>line</name>
      <anchorfile>structiv_1_1Pratt_1_1Expression.html</anchorfile>
      <anchor>a35e11a8f96298363c5b59486c07efd71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>column</name>
      <anchorfile>structiv_1_1Pratt_1_1Expression.html</anchorfile>
      <anchor>a28d7b912ac8489bae346b172f0942a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>name</name>
      <anchorfile>structiv_1_1Pratt_1_1Expression.html</anchorfile>
      <anchor>a665e10c6f0272a3dce3107d11b50039c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Field</name>
    <filename>classiv_1_1Field.html</filename>
    <templarg></templarg>
    <base>iv::FieldI</base>
    <base protection="private">iv::AttributeListener</base>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ac97dd9bf6eff431e1685a8938de63cdb</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Field</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a6c5d7df7cf0d22234d136473aa851872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a870091bd0cfc2f0094caf29111227075</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Release_Attribute</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ac32821824b0abf7deafd2bd8226ab895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_Attribute_R</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ad748ccf026859cebc38eef00de3964ce</anchor>
      <arglist>(Attr&lt; T &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_Attribute_RW</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a5cf527a90d6f9e15056b1286445316e5</anchor>
      <arglist>(Attr&lt; T &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_Constant</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a876768c7a4158c62b2a2753e1feebed4</anchor>
      <arglist>(T const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a4194f0fd56a14780879017a1aab9bacd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>aa52c0f124b5b194b3a8c8d2e94505215</anchor>
      <arglist>(T const &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a8db71af2ddd144d6919653570c435e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>OnChanged</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a5e109dafdbaec0b2a35ffda51e536940</anchor>
      <arglist>(bool real)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Instance *</type>
      <name>inst</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ade4194681d9134fd9d0c3ecd7fc48446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::optional&lt; T &gt;</type>
      <name>constant</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>aeae4a87198f71bba5af4ae8e19a213a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Attr&lt; T &gt; *</type>
      <name>source_r</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>acf978ef4a8773279e4bf818a1fc5b60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Attr&lt; T &gt; *</type>
      <name>source_rw</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a480612aef2f64cc55286a2cc4c3d350b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Field&lt; Activator &gt;</name>
    <filename>classiv_1_1Field.html</filename>
    <base>iv::FieldI</base>
    <base protection="private">iv::AttributeListener</base>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ac97dd9bf6eff431e1685a8938de63cdb</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Field</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a6c5d7df7cf0d22234d136473aa851872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a870091bd0cfc2f0094caf29111227075</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Release_Attribute</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ac32821824b0abf7deafd2bd8226ab895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_Attribute_R</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ad748ccf026859cebc38eef00de3964ce</anchor>
      <arglist>(Attr&lt; Activator &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_Attribute_RW</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a5cf527a90d6f9e15056b1286445316e5</anchor>
      <arglist>(Attr&lt; Activator &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_Constant</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a876768c7a4158c62b2a2753e1feebed4</anchor>
      <arglist>(Activator const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Activator</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a4194f0fd56a14780879017a1aab9bacd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>aa52c0f124b5b194b3a8c8d2e94505215</anchor>
      <arglist>(Activator const &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a8db71af2ddd144d6919653570c435e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>OnChanged</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a5e109dafdbaec0b2a35ffda51e536940</anchor>
      <arglist>(bool real)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Instance *</type>
      <name>inst</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ade4194681d9134fd9d0c3ecd7fc48446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::optional&lt; Activator &gt;</type>
      <name>constant</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>aeae4a87198f71bba5af4ae8e19a213a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Attr&lt; Activator &gt; *</type>
      <name>source_r</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>acf978ef4a8773279e4bf818a1fc5b60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Attr&lt; Activator &gt; *</type>
      <name>source_rw</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a480612aef2f64cc55286a2cc4c3d350b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Field&lt; Type &gt;</name>
    <filename>classiv_1_1Field.html</filename>
    <base>iv::FieldI</base>
    <base protection="private">iv::AttributeListener</base>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ac97dd9bf6eff431e1685a8938de63cdb</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Field</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a6c5d7df7cf0d22234d136473aa851872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a870091bd0cfc2f0094caf29111227075</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Release_Attribute</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ac32821824b0abf7deafd2bd8226ab895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_Attribute_R</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ad748ccf026859cebc38eef00de3964ce</anchor>
      <arglist>(Attr&lt; Type &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_Attribute_RW</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a5cf527a90d6f9e15056b1286445316e5</anchor>
      <arglist>(Attr&lt; Type &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_Constant</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a876768c7a4158c62b2a2753e1feebed4</anchor>
      <arglist>(Type const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>Get</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a4194f0fd56a14780879017a1aab9bacd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>aa52c0f124b5b194b3a8c8d2e94505215</anchor>
      <arglist>(Type const &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a8db71af2ddd144d6919653570c435e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>OnChanged</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a5e109dafdbaec0b2a35ffda51e536940</anchor>
      <arglist>(bool real)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Instance *</type>
      <name>inst</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>ade4194681d9134fd9d0c3ecd7fc48446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::optional&lt; Type &gt;</type>
      <name>constant</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>aeae4a87198f71bba5af4ae8e19a213a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Attr&lt; Type &gt; *</type>
      <name>source_r</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>acf978ef4a8773279e4bf818a1fc5b60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Attr&lt; Type &gt; *</type>
      <name>source_rw</name>
      <anchorfile>classiv_1_1Field.html</anchorfile>
      <anchor>a480612aef2f64cc55286a2cc4c3d350b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FieldI</name>
    <filename>classiv_1_1FieldI.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Assignment</name>
      <anchorfile>classiv_1_1FieldI.html</anchorfile>
      <anchor>a66bd04fa22ba09879949931b76bd2e59</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1FieldI.html" anchor="a66bd04fa22ba09879949931b76bd2e59a3476bf9c3af766198bfbd4f065a51e69">Unassigned</enumvalue>
      <enumvalue file="classiv_1_1FieldI.html" anchor="a66bd04fa22ba09879949931b76bd2e59acb17869fe51048b5a5c4c6106551a255">Constant</enumvalue>
      <enumvalue file="classiv_1_1FieldI.html" anchor="a66bd04fa22ba09879949931b76bd2e59ae3221b7ee1dca5e9e03f03b9c7996fc1">Attribute_R</enumvalue>
      <enumvalue file="classiv_1_1FieldI.html" anchor="a66bd04fa22ba09879949931b76bd2e59a7ccef977fac5139e0ca5f3b07095bb37">Attribute_RW</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldI</name>
      <anchorfile>classiv_1_1FieldI.html</anchorfile>
      <anchor>aa66406b3f20daf4b9c3b12dcfa29749b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldI</name>
      <anchorfile>classiv_1_1FieldI.html</anchorfile>
      <anchor>a20ff843b7f8b6a46f6361287f566e950</anchor>
      <arglist>(FieldI const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FieldI &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1FieldI.html</anchorfile>
      <anchor>a5236547332186b1f2587351426261310</anchor>
      <arglist>(FieldI const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_AnyAttribute_R</name>
      <anchorfile>classiv_1_1FieldI.html</anchorfile>
      <anchor>a84caaf5dd92cd5aa5fa4306e57bca9ac</anchor>
      <arglist>(Attribute *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign_AnyAttribute_RW</name>
      <anchorfile>classiv_1_1FieldI.html</anchorfile>
      <anchor>aa1755c83590ae74c4661374c535869f0</anchor>
      <arglist>(Attribute *)</arglist>
    </member>
    <member kind="function">
      <type>std::type_index</type>
      <name>Type</name>
      <anchorfile>classiv_1_1FieldI.html</anchorfile>
      <anchor>a73f49824944ff34dd3140b1279d31ffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Attribute::ValueMode</type>
      <name>Mode</name>
      <anchorfile>classiv_1_1FieldI.html</anchorfile>
      <anchor>a77eda125c5dc127f8cccdd6a42445457</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Assignment</type>
      <name>AssignmentState</name>
      <anchorfile>classiv_1_1FieldI.html</anchorfile>
      <anchor>abf4a356d9188067feacf46c03041dc9c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FixedOrder_Camera</name>
    <filename>classiv_1_1FixedOrder__Camera.html</filename>
    <base>iv::Camera</base>
    <member kind="function">
      <type></type>
      <name>FixedOrder_Camera</name>
      <anchorfile>classiv_1_1FixedOrder__Camera.html</anchorfile>
      <anchor>a94c20ae3f00ad3fce1d68e5ca89b294a</anchor>
      <arglist>(Instance *, iv::RenderTarget::Geometry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FrameStart</name>
      <anchorfile>classiv_1_1FixedOrder__Camera.html</anchorfile>
      <anchor>a57e1dd37a8b0cd9af693fe140291b16c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AddRenderable_Solid</name>
      <anchorfile>classiv_1_1FixedOrder__Camera.html</anchorfile>
      <anchor>a571d4cd1ef560d9144d9b9d733e091f6</anchor>
      <arglist>(Renderable *, GLuint shader_id, GLuint primary_texture_id) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AddRenderable_Translucent</name>
      <anchorfile>classiv_1_1FixedOrder__Camera.html</anchorfile>
      <anchor>a6e00782bb0c65b1ef9904c1fa65eece9</anchor>
      <arglist>(Renderable *, GLuint shader_id, GLuint primary_texture_id) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunRender</name>
      <anchorfile>classiv_1_1FixedOrder__Camera.html</anchorfile>
      <anchor>aef34564104f99bf9eff0359160523331</anchor>
      <arglist>(CameraState const &amp;state) override</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1FixedOrder__Camera.html</anchorfile>
      <anchor>a8be296565fb473351602be50e9d2b430</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FixedUpdateClient</name>
    <filename>classiv_1_1FixedUpdateClient.html</filename>
    <member kind="function">
      <type></type>
      <name>FixedUpdateClient</name>
      <anchorfile>classiv_1_1FixedUpdateClient.html</anchorfile>
      <anchor>a47b01707d73c94559e0f60219ba91f3f</anchor>
      <arglist>(Instance *inst, TimeId time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FixedUpdateClient</name>
      <anchorfile>classiv_1_1FixedUpdateClient.html</anchorfile>
      <anchor>a507925fe5812f507e75c7500dfbea418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1FixedUpdateClient.html</anchorfile>
      <anchor>a823aec32f23b17cb53d084be02185725</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixed_update_pause</name>
      <anchorfile>classiv_1_1FixedUpdateClient.html</anchorfile>
      <anchor>a502e857f626deaba91e242df1d378ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixed_update_resume</name>
      <anchorfile>classiv_1_1FixedUpdateClient.html</anchorfile>
      <anchor>a01ef3336ce1ffd2f49b1c9a4a5bc8b0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fixed_update</name>
      <anchorfile>classiv_1_1FixedUpdateClient.html</anchorfile>
      <anchor>a597588dbd1087b1fd9ee6c9b6dad9b2c</anchor>
      <arglist>(TimeId time, int time_step, int steps)=0</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1FixedUpdateClient.html</anchorfile>
      <anchor>ad45b04df73e90ee257a93bf957ff55e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FlatShader</name>
    <filename>classiv_1_1FlatShader.html</filename>
    <base protection="private">iv::GlListener</base>
    <class kind="struct">iv::FlatShader::Params</class>
    <member kind="enumeration">
      <type></type>
      <name>FittingStage</name>
      <anchorfile>classiv_1_1FlatShader.html</anchorfile>
      <anchor>af98e48ab07060df252861a6536772c6b</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="af98e48ab07060df252861a6536772c6ba6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PixelizeStage</name>
      <anchorfile>classiv_1_1FlatShader.html</anchorfile>
      <anchor>a440fc3a6ce19d7526e783841aa7eb2ce</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a440fc3a6ce19d7526e783841aa7eb2cea6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a440fc3a6ce19d7526e783841aa7eb2cea8fc93ac531c716935eb04d7fb2e18189">Squares</enumvalue>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a440fc3a6ce19d7526e783841aa7eb2cea0b746483cd6f7830702edd6ee7d8d4b9">Circles</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResizeStage</name>
      <anchorfile>classiv_1_1FlatShader.html</anchorfile>
      <anchor>a1e7ec475a4e62d47e9565a16b15c49f3</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a1e7ec475a4e62d47e9565a16b15c49f3a85a7cd587d6142dbfc1a4de05af7b75d">Scale</enumvalue>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a1e7ec475a4e62d47e9565a16b15c49f3a4457d440870ad6d42bab9082d9bf9b61">Fixed</enumvalue>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a1e7ec475a4e62d47e9565a16b15c49f3a7020426cfb0a204051be4b3053d2acc8">Repeat</enumvalue>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a1e7ec475a4e62d47e9565a16b15c49f3a3bb3e8c8a24891ba0f7608bcc96f8b0a">Frame</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FilteringStage</name>
      <anchorfile>classiv_1_1FlatShader.html</anchorfile>
      <anchor>a565cf481a67f1941a6de335a09e6dd35</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a565cf481a67f1941a6de335a09e6dd35a4cd8413207629a963225f4314b53adcd">Plain</enumvalue>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a565cf481a67f1941a6de335a09e6dd35a445d2da1c71c1c06b70ddd90e7297d7f">Msdf</enumvalue>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a565cf481a67f1941a6de335a09e6dd35afa1c38fc2aafcdeae08f5f1eeec40d9d">AlphaThreshold</enumvalue>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a565cf481a67f1941a6de335a09e6dd35a664bf66ce3bf1838577aab84d2bfd1e8">AlphaThresholdWidth</enumvalue>
      <enumvalue file="classiv_1_1FlatShader.html" anchor="a565cf481a67f1941a6de335a09e6dd35a5ae2a1456489a6b8ac90bbf22ad8306a">AlphaThresholdWidthSmooth</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>FlatShader</name>
      <anchorfile>classiv_1_1FlatShader.html</anchorfile>
      <anchor>afcf50c1474db26f0b24737db0443366a</anchor>
      <arglist>(Instance *inst, VirtualResourceProvider const *, FlatShader_Subprovider const *, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>program_id</name>
      <anchorfile>classiv_1_1FlatShader.html</anchorfile>
      <anchor>a91d39bd3ca9792c1f33f0c919d276550</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Render</name>
      <anchorfile>classiv_1_1FlatShader.html</anchorfile>
      <anchor>a20679a1e9136bd9e01e5717f95cc1573</anchor>
      <arglist>(ClientMarker const &amp;log_target, CameraState const &amp;camera, std::optional&lt; float &gt; depth_override, float4x4 const &amp;model, ShaderScissor const &amp;scissor, float4 preblend, bool translucent, GlMesh const *mesh, float3 mesh_resize, float2 mesh_texcoord_density, GlTexture const *texture, float texture_density_rel, float texture_msdf_pixelRange, Params const &amp;params) const</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1FlatShader.html</anchorfile>
      <anchor>aba042a08c1f394406d523bab1add02a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1FlatShader.html</anchorfile>
      <anchor>a451d68f8bbb702b0c18f3045e4e3ed0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FlatShader_Resource</name>
    <filename>classiv_1_1FlatShader__Resource.html</filename>
    <base>SingularResource&lt; FlatShader &gt;</base>
    <member kind="function">
      <type></type>
      <name>FlatShader_Resource</name>
      <anchorfile>classiv_1_1FlatShader__Resource.html</anchorfile>
      <anchor>a63c4b0c4c318f27f951dfa3f87c58970</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1FlatShader__Resource.html</anchorfile>
      <anchor>a81b1252df9ff246649161a52d0a6aa58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FlatShader_Subprovider</name>
    <filename>classiv_1_1FlatShader__Subprovider.html</filename>
    <member kind="function">
      <type></type>
      <name>FlatShader_Subprovider</name>
      <anchorfile>classiv_1_1FlatShader__Subprovider.html</anchorfile>
      <anchor>a447ab7065a8bfb33482c38495a48918d</anchor>
      <arglist>(Instance *inst, VirtualResourceProvider const *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>each_resource</name>
      <anchorfile>classiv_1_1FlatShader__Subprovider.html</anchorfile>
      <anchor>aa78dfda786a0cb48b2d3deff0d8d0594</anchor>
      <arglist>(std::function&lt; void(ResourcePath const &amp;) &gt; const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_resource</name>
      <anchorfile>classiv_1_1FlatShader__Subprovider.html</anchorfile>
      <anchor>a84679da1721a181a37526a9799d7a3fb</anchor>
      <arglist>(ResourcePath const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1FlatShader__Subprovider.html</anchorfile>
      <anchor>a011f9309dd34323f500be9de8f12ce2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1FlatShader__Subprovider.html</anchorfile>
      <anchor>abfcd8c85c93b5db018e5ca4aa6f1cf3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Font</name>
    <filename>classiv_1_1Font.html</filename>
    <class kind="struct">iv::Font::Glyph</class>
    <class kind="struct">iv::Font::Info</class>
    <class kind="struct">iv::Font::Variant</class>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classiv_1_1Font.html</anchorfile>
      <anchor>aab2a81fcf76cf6e6a8c319470183d83b</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1Font.html" anchor="aab2a81fcf76cf6e6a8c319470183d83ba3743b388be5d518e5ff6e12ce2b95d0b">Hinted</enumvalue>
      <enumvalue file="classiv_1_1Font.html" anchor="aab2a81fcf76cf6e6a8c319470183d83ba445d2da1c71c1c06b70ddd90e7297d7f">Msdf</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classiv_1_1Font.html</anchorfile>
      <anchor>ac9f3d38e9de5d078e90d8fec3b3b7d3a</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Font.html</anchorfile>
      <anchor>adfcbeb111063602457b65dba188c15b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Info &amp;</type>
      <name>GetInfo</name>
      <anchorfile>classiv_1_1Font.html</anchorfile>
      <anchor>ac7347c12d519faf9b8e69d74f113e503</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>SelectVariant</name>
      <anchorfile>classiv_1_1Font.html</anchorfile>
      <anchor>a425c556da68dc38e753b3ad00fce96a5</anchor>
      <arglist>(unsigned font_size) const</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>SelectVariantMsdf</name>
      <anchorfile>classiv_1_1Font.html</anchorfile>
      <anchor>a200ad57d7a363efe47055d18b2687674</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Font.html</anchorfile>
      <anchor>a59bb136f1366764dc947b5d2888f3573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Info</type>
      <name>_info</name>
      <anchorfile>classiv_1_1Font.html</anchorfile>
      <anchor>a4500d8eb29ec40f81cf58138c2d6db92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; unsigned, Variant &gt;</type>
      <name>_variant_fixed</name>
      <anchorfile>classiv_1_1Font.html</anchorfile>
      <anchor>ab940f721278e1f63d1026ce9572a3ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Variant</type>
      <name>_variant_msdf</name>
      <anchorfile>classiv_1_1Font.html</anchorfile>
      <anchor>a7113d41f042416e9783432e3cbc26953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Font_Resource</name>
    <filename>classiv_1_1Font__Resource.html</filename>
    <base>SingularResource&lt; Font &gt;</base>
    <member kind="function">
      <type></type>
      <name>Font_Resource</name>
      <anchorfile>classiv_1_1Font__Resource.html</anchorfile>
      <anchor>ada724533f1afedf47426c43545edae41</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path=ResourcePath())</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Font__Resource.html</anchorfile>
      <anchor>adfd1b46b9b1a91e187573149f19664a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FontMesh</name>
    <filename>classiv_1_1FontMesh.html</filename>
    <class kind="struct">iv::FontMesh::Geometry</class>
    <class kind="struct">iv::FontMesh::LineState</class>
    <class kind="struct">iv::FontMesh::Location</class>
    <member kind="function">
      <type></type>
      <name>FontMesh</name>
      <anchorfile>classiv_1_1FontMesh.html</anchorfile>
      <anchor>a4bdb32f0ac2ab8240fae87b7ff904e1f</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1FontMesh.html</anchorfile>
      <anchor>ad5df734fa3e92eb4a0ddb4b605e1cecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>font_path</name>
      <anchorfile>classiv_1_1FontMesh.html</anchorfile>
      <anchor>a40d055b30aee934ea2ba56ddc17536c0</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>program_id</name>
      <anchorfile>classiv_1_1FontMesh.html</anchorfile>
      <anchor>a3bca1db85b863e94e17dca86d2d149f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>texture_id</name>
      <anchorfile>classiv_1_1FontMesh.html</anchorfile>
      <anchor>ae0b51a8be3d67ad606ab114fb214044c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>ComputeGeometry</name>
      <anchorfile>classiv_1_1FontMesh.html</anchorfile>
      <anchor>ac7ce35a956d8d5cd39cf2672dba77002</anchor>
      <arglist>(std::string const &amp;text, float font_size, Location const &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateMesh</name>
      <anchorfile>classiv_1_1FontMesh.html</anchorfile>
      <anchor>a2445b60894cb7a067d212eace8207953</anchor>
      <arglist>(std::string const &amp;text, float font_size, Location const &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Render</name>
      <anchorfile>classiv_1_1FontMesh.html</anchorfile>
      <anchor>a7b7c0a02cba88a2961e72035ac611e77</anchor>
      <arglist>(CameraState const &amp;camera, float4x4 const &amp;model_transform, float4 color, float4 preblend, bool translucent, std::optional&lt; float &gt; depth_override, ShaderScissor const &amp;scissor)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1FontMesh.html</anchorfile>
      <anchor>a54d7794f085538fefc9e473e37b59a52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FrameUpdateClient</name>
    <filename>classiv_1_1FrameUpdateClient.html</filename>
    <member kind="function">
      <type></type>
      <name>FrameUpdateClient</name>
      <anchorfile>classiv_1_1FrameUpdateClient.html</anchorfile>
      <anchor>a1c04acb4bdf04fdfa75fe69c57a94501</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FrameUpdateClient</name>
      <anchorfile>classiv_1_1FrameUpdateClient.html</anchorfile>
      <anchor>ab7c13f8edcfd8ee0e077599f68eb019d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1FrameUpdateClient.html</anchorfile>
      <anchor>a59fd69db8e2ff5c3f884988c2ab50f23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>frame_update</name>
      <anchorfile>classiv_1_1FrameUpdateClient.html</anchorfile>
      <anchor>a4b87d5b68fc8bc528afa4d37806d4f89</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame_update_pause</name>
      <anchorfile>classiv_1_1FrameUpdateClient.html</anchorfile>
      <anchor>a7522e1201d6e11f091d9e75a1fd6b29b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame_update_resume</name>
      <anchorfile>classiv_1_1FrameUpdateClient.html</anchorfile>
      <anchor>a839a1a112700a19b9ea708feafc3d652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame_update_inc</name>
      <anchorfile>classiv_1_1FrameUpdateClient.html</anchorfile>
      <anchor>ae683522230dc1ffd94292ae13dfbb736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame_update_dec</name>
      <anchorfile>classiv_1_1FrameUpdateClient.html</anchorfile>
      <anchor>a939e48d7a3ea5c1b49c39f8f51c25b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>frame_update_active</name>
      <anchorfile>classiv_1_1FrameUpdateClient.html</anchorfile>
      <anchor>ad76a4c0120f47ffcc779c86663612fc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1FrameUpdateClient.html</anchorfile>
      <anchor>a7f70b02d0702120c97ba77e25b0dd7b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FSResourceProvider</name>
    <filename>classiv_1_1FSResourceProvider.html</filename>
    <base protection="private">iv::StreamResourceProvider</base>
    <member kind="function">
      <type></type>
      <name>FSResourceProvider</name>
      <anchorfile>classiv_1_1FSResourceProvider.html</anchorfile>
      <anchor>a65e5010640d52e98ed3cf168a03c9f60</anchor>
      <arglist>(Instance *inst, size_t priority, const char *root_dir)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>with_stream</name>
      <anchorfile>classiv_1_1FSResourceProvider.html</anchorfile>
      <anchor>a09fdceba965308fcac913995450e94ca</anchor>
      <arglist>(ResourcePath const &amp;path, std::function&lt; void(std::istream &amp;) &gt; const &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>with_metadata_stream</name>
      <anchorfile>classiv_1_1FSResourceProvider.html</anchorfile>
      <anchor>a5af18e8fe47e517419ef760c84aceeff</anchor>
      <arglist>(std::function&lt; void(std::istream &amp;) &gt; const &amp;) const override</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1FSResourceProvider.html</anchorfile>
      <anchor>a32e989c335aa76334ca0f1cf116401c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FunctorActivatorAttribute</name>
    <filename>classiv_1_1FunctorActivatorAttribute.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>Attr&lt; Activator &gt;</base>
    <member kind="function">
      <type></type>
      <name>FunctorActivatorAttribute</name>
      <anchorfile>classiv_1_1FunctorActivatorAttribute.html</anchorfile>
      <anchor>aa64263b7059dd4c6cd2bd112ecd237db</anchor>
      <arglist>(ClientMarker *cm, std::function&lt; void() &gt; const &amp;on_activated=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FunctorActivatorAttribute</name>
      <anchorfile>classiv_1_1FunctorActivatorAttribute.html</anchorfile>
      <anchor>a23f3bb314dcf5059dc6fc8e9a531fade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_activated</name>
      <anchorfile>classiv_1_1FunctorActivatorAttribute.html</anchorfile>
      <anchor>a178eef0ccc2b9f476d78cca0b5920742</anchor>
      <arglist>(std::function&lt; void() &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttributeMode</name>
      <anchorfile>classiv_1_1FunctorActivatorAttribute.html</anchorfile>
      <anchor>a29e5c952ecb8ae58df7c8ea601a987bb</anchor>
      <arglist>(Attribute::ValueMode mode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1FunctorActivatorAttribute.html</anchorfile>
      <anchor>abf61a98100791f246fdabef97bd977be</anchor>
      <arglist>(Activator &amp;out) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1FunctorActivatorAttribute.html</anchorfile>
      <anchor>aea3a9b558b940a0075b96d6d23abf032</anchor>
      <arglist>(Activator const &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FunctorActivatorField</name>
    <filename>classiv_1_1FunctorActivatorField.html</filename>
    <base>Field&lt; Activator &gt;</base>
    <member kind="function">
      <type></type>
      <name>FunctorActivatorField</name>
      <anchorfile>classiv_1_1FunctorActivatorField.html</anchorfile>
      <anchor>ab1dbe634e5da090b88dd3e45b32f2984</anchor>
      <arglist>(Instance *inst, std::function&lt; void() &gt; const &amp;on_activated=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_activated</name>
      <anchorfile>classiv_1_1FunctorActivatorField.html</anchorfile>
      <anchor>a8ae986f16672b531f2454f76c79e9c71</anchor>
      <arglist>(std::function&lt; void() &gt; const &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1FunctorActivatorField.html</anchorfile>
      <anchor>a83b3d7c8f30754f632ad45d80180e027</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnChanged</name>
      <anchorfile>classiv_1_1FunctorActivatorField.html</anchorfile>
      <anchor>a43fd05ef52f22ee810c1747de7e3f68c</anchor>
      <arglist>(bool real) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::FunctorField</name>
    <filename>classiv_1_1FunctorField.html</filename>
    <templarg></templarg>
    <base>iv::Field</base>
    <member kind="function">
      <type></type>
      <name>FunctorField</name>
      <anchorfile>classiv_1_1FunctorField.html</anchorfile>
      <anchor>a6110d9a9cf0b8016f7f5bec330c6b4e0</anchor>
      <arglist>(Instance *inst, std::function&lt; void(bool real) &gt; const &amp;OnChange=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OnChange</name>
      <anchorfile>classiv_1_1FunctorField.html</anchorfile>
      <anchor>adbc74cd446ab8cf45baec222d7d7b795</anchor>
      <arglist>(std::function&lt; void(bool real) &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Get</name>
      <anchorfile>classiv_1_1FunctorField.html</anchorfile>
      <anchor>a584a912672ee7bd666d0fc02ce21a63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1FunctorField.html</anchorfile>
      <anchor>acb7ecd956449aa2c70feceb2711e95c8</anchor>
      <arglist>(T const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnChanged</name>
      <anchorfile>classiv_1_1FunctorField.html</anchorfile>
      <anchor>a28390c44d7cfa7511e660787ee54f170</anchor>
      <arglist>(bool real) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Game</name>
    <filename>classiv_1_1Game.html</filename>
    <base protection="protected">iv::WindowListener</base>
    <member kind="function">
      <type></type>
      <name>Game</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>a5b1d2555c42d21f824774bfb527fb839</anchor>
      <arglist>(Window *window, GameIdentity const &amp;identity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Game</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>a5b8433c97ad1a7c2941c03012a0dcd6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SystemContainer *</type>
      <name>system_container</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>a0e441ae055ae66482f69856c0efb3545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RenderTarget::Geometry</type>
      <name>geometry</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>a586c401d4b09e2b8ceb5c2af0ebe3df3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RenderTarget *</type>
      <name>render_target</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>a81fa4baec954ea027a413fa58a02b973</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>game_geometryChanged</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>ad4c81c60fc772742da5caa241093f265</anchor>
      <arglist>(RenderTarget::Geometry geometry)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>game_draw</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>a521a622f576465369a269f61ed52f188</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>game_focusLost</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>a7a02f3749d22f94afea5bf18830a73db</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>game_input</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>a778476dced26097f045b53004be85a65</anchor>
      <arglist>(Input const *input)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>input</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>af5e012c6681303ad935360f169fe4be7</anchor>
      <arglist>(Input const *input) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>focus_lost</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>a8930cde2b987238645582faa5d52c8e8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>afca7d6e42890cf2b1251f13db277e774</anchor>
      <arglist>(uint64_t delta_ms) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>extra_update</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>ad079f2b4729f6cd2f60d04cf07a921a8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>aad4bd7ae4b1035555c67ee888d01e116</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>gpu</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>a3206526a7b8e643f9ced6faa3e6c45fa</anchor>
      <arglist>(bool enabled, bool dropped) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resized</name>
      <anchorfile>classiv_1_1Game.html</anchorfile>
      <anchor>aa6362d66644e6319f86dc623f2c44e6d</anchor>
      <arglist>(RenderTarget::Geometry) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::GameIdentity</name>
    <filename>structiv_1_1GameIdentity.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>configuration_tag</name>
      <anchorfile>structiv_1_1GameIdentity.html</anchorfile>
      <anchor>a84099386587b283c4de39e7a05cf94eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::RenderTarget::Geometry</name>
    <filename>structiv_1_1RenderTarget_1_1Geometry.html</filename>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>structiv_1_1RenderTarget_1_1Geometry.html</anchorfile>
      <anchor>ad1ea62a66e65e8adfcd147c56a48ab6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>structiv_1_1RenderTarget_1_1Geometry.html</anchorfile>
      <anchor>abbef56170bfeed197048b4f8c2f13565</anchor>
      <arglist>(float2 size, float density)</arglist>
    </member>
    <member kind="variable">
      <type>int2</type>
      <name>size</name>
      <anchorfile>structiv_1_1RenderTarget_1_1Geometry.html</anchorfile>
      <anchor>a4c764f3c00ad25b55e08f7bb9c3bff5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>density</name>
      <anchorfile>structiv_1_1RenderTarget_1_1Geometry.html</anchorfile>
      <anchor>a463aac5d1957a3d01ad0e8fcf7277b6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::FontMesh::Geometry</name>
    <filename>structiv_1_1FontMesh_1_1Geometry.html</filename>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>structiv_1_1FontMesh_1_1Geometry.html</anchorfile>
      <anchor>a7cd1514c2b32d0ab6510ca15882c3cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>characters</name>
      <anchorfile>structiv_1_1FontMesh_1_1Geometry.html</anchorfile>
      <anchor>a9c43a53b6edf68fc219a3dff52ad04d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fits</name>
      <anchorfile>structiv_1_1FontMesh_1_1Geometry.html</anchorfile>
      <anchor>a819a12a5f67eff90de89a1106358e830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>max_width</name>
      <anchorfile>structiv_1_1FontMesh_1_1Geometry.html</anchorfile>
      <anchor>ab2ff1cb02a60ab1fb2cc6a21c1d3123b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LineState</type>
      <name>line_state</name>
      <anchorfile>structiv_1_1FontMesh_1_1Geometry.html</anchorfile>
      <anchor>ac452295606a3499dde18899e193dfecb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::GlfmRenderTarget</name>
    <filename>classiv_1_1GlfmRenderTarget.html</filename>
    <base>iv::RenderTarget</base>
    <member kind="function">
      <type>void</type>
      <name>set_geometry</name>
      <anchorfile>classiv_1_1GlfmRenderTarget.html</anchorfile>
      <anchor>a9f4cb6b407f81fea9f046c706c33f66c</anchor>
      <arglist>(Geometry geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame_setup</name>
      <anchorfile>classiv_1_1GlfmRenderTarget.html</anchorfile>
      <anchor>a899cd729c949f9b5bf6f1fac4503f843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame_close</name>
      <anchorfile>classiv_1_1GlfmRenderTarget.html</anchorfile>
      <anchor>a35f024960703cb2c3dd2e91bf8cf98d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::GlfmWindow</name>
    <filename>classiv_1_1GlfmWindow.html</filename>
    <base>iv::Window</base>
    <member kind="function">
      <type></type>
      <name>GlfmWindow</name>
      <anchorfile>classiv_1_1GlfmWindow.html</anchorfile>
      <anchor>a2b954d4984e1ca9f8f004d36351d4fcb</anchor>
      <arglist>(GLFMDisplay *display)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlfmWindow</name>
      <anchorfile>classiv_1_1GlfmWindow.html</anchorfile>
      <anchor>aeb8d8eb8b6603ec2a518f488e94ff7c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_listener</name>
      <anchorfile>classiv_1_1GlfmWindow.html</anchorfile>
      <anchor>a65a6df63703701a3f5307a7601972617</anchor>
      <arglist>(WindowListener *listener) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RenderTarget::Geometry</type>
      <name>geometry</name>
      <anchorfile>classiv_1_1GlfmWindow.html</anchorfile>
      <anchor>a6c211deb98ac7cb32bfae11843b43f78</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RenderTarget *</type>
      <name>render_target</name>
      <anchorfile>classiv_1_1GlfmWindow.html</anchorfile>
      <anchor>a1c3e5bc369d3751376a18ef0d138500f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>gpu_enabled</name>
      <anchorfile>classiv_1_1GlfmWindow.html</anchorfile>
      <anchor>a42b1e2cc38e22952470ebc97bba29f4f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int2</type>
      <name>input_position</name>
      <anchorfile>classiv_1_1GlfmWindow.html</anchorfile>
      <anchor>a29b54b7fe707fe1ae8da5e04d407810e</anchor>
      <arglist>(Input::Key key, int device_id) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>input_value</name>
      <anchorfile>classiv_1_1GlfmWindow.html</anchorfile>
      <anchor>a3afc769fc56089fb1c93d7912da279aa</anchor>
      <arglist>(Input::Key key, int device_id) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>input_character</name>
      <anchorfile>classiv_1_1GlfmWindow.html</anchorfile>
      <anchor>aea8b7ed38f92ab48298127a9a5971219</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::GlfwRenderTarget</name>
    <filename>classiv_1_1GlfwRenderTarget.html</filename>
    <base>iv::RenderTarget</base>
    <member kind="function">
      <type>void</type>
      <name>set_geometry</name>
      <anchorfile>classiv_1_1GlfwRenderTarget.html</anchorfile>
      <anchor>a9f4cb6b407f81fea9f046c706c33f66c</anchor>
      <arglist>(Geometry geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame_setup</name>
      <anchorfile>classiv_1_1GlfwRenderTarget.html</anchorfile>
      <anchor>a899cd729c949f9b5bf6f1fac4503f843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame_close</name>
      <anchorfile>classiv_1_1GlfwRenderTarget.html</anchorfile>
      <anchor>a35f024960703cb2c3dd2e91bf8cf98d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::GlfwWindow</name>
    <filename>classiv_1_1GlfwWindow.html</filename>
    <base>iv::Window</base>
    <member kind="function">
      <type></type>
      <name>GlfwWindow</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a9a7c29554b9af646f6fcd93385b948ca</anchor>
      <arglist>(std::string const &amp;window_title)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlfwWindow</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>ab9c32326e701ca4ded5559a1159aaddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loop</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a4120eb801bc658e01c4730a0fede0b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_listener</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>af4cc8732dd702526d3152be83b2502fa</anchor>
      <arglist>(WindowListener *listener) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RenderTarget::Geometry</type>
      <name>geometry</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a136df8a52abbdfed67174db25fa29b45</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RenderTarget *</type>
      <name>render_target</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a31de9f27f8f893273dbd6714281d9ae2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>gpu_enabled</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>ac4053cc08f7d9d025ae1d634297166d9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int2</type>
      <name>input_position</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a9e57d4ba79d1f57a2bbef0ed3bd7df71</anchor>
      <arglist>(Input::Key key, int device_id) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>input_value</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>ac450600a0a1bf8cef7acf73d994f355a</anchor>
      <arglist>(Input::Key key, int device_id) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>input_character</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a1db3275fa81a52ef8a5f78955fc247b2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FocusCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a841de4d90d089ced3e3863d2904cffc3</anchor>
      <arglist>(int focused)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ContentScaleCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a97a1199ecd9b0c3ad6df1729674e0bcf</anchor>
      <arglist>(float xscale, float yscale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SizeCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a5eb323b47e754c28fc8d0c94f38e32d7</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FBSizeCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a367167c1853cc56f2bd65727b4bf4297</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>KeyCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a3bb0e42cade50f15f7d6043fc7d1b1b0</anchor>
      <arglist>(int key, int scancode, int action, int mods)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MouseButtonCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a21d0186bd24ecd460440578bc54484f1</anchor>
      <arglist>(int button, int action, int mods)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScrollCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a91bc8017904844f7c64944599b457347</anchor>
      <arglist>(double xoffset, double yoffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CharCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a6012dc56413e6b4e058237d90a6ceaf5</anchor>
      <arglist>(unsigned int codepoint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>S_FocusCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a20be8ef83f68bdbb9ff4020dc0a23e21</anchor>
      <arglist>(GLFWwindow *window, int focused)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>S_ContentScaleCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>aac1981ab417cb91070113d609912e688</anchor>
      <arglist>(GLFWwindow *window, float xscale, float yscale)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>S_SizeCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>acdaba75d864728cd00604540771ce737</anchor>
      <arglist>(GLFWwindow *window, int width, int height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>S_FBSizeCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>ad36a3b2b68a8ea039181fdbb45f56460</anchor>
      <arglist>(GLFWwindow *window, int width, int height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>S_KeyCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a88494d35b030c8431b7ac93ee53e1505</anchor>
      <arglist>(GLFWwindow *window, int key, int scancode, int action, int mods)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>S_MouseButtonCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a0accebb9102e27311d6c0cba7eb33ba2</anchor>
      <arglist>(GLFWwindow *window, int button, int action, int mods)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>S_ScrollCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>af1a43fe05e783a47ef39de28f78b55bc</anchor>
      <arglist>(GLFWwindow *window, double xoffset, double yoffset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>S_CharCallback</name>
      <anchorfile>classiv_1_1GlfwWindow.html</anchorfile>
      <anchor>a21b632fe4d8186489b4b041a0af8e96e</anchor>
      <arglist>(GLFWwindow *window, unsigned int codepoint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::GlInfo</name>
    <filename>classiv_1_1GlInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>GlInfo</name>
      <anchorfile>classiv_1_1GlInfo.html</anchorfile>
      <anchor>a52ef294fcc4dd5e8b7e082f361320159</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1GlInfo.html</anchorfile>
      <anchor>aba042a08c1f394406d523bab1add02a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GlIsEnabled</name>
      <anchorfile>classiv_1_1GlInfo.html</anchorfile>
      <anchor>aac95acdd646fd7b49a8849e75616adaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RenderTarget *</type>
      <name>render_target</name>
      <anchorfile>classiv_1_1GlInfo.html</anchorfile>
      <anchor>ab0e4231a8a9f876b176bb12b1572a276</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::GlListener</name>
    <filename>classiv_1_1GlListener.html</filename>
    <base>iv::GlInfo</base>
    <member kind="function">
      <type></type>
      <name>GlListener</name>
      <anchorfile>classiv_1_1GlListener.html</anchorfile>
      <anchor>a48b8b415b2ff4ecaa971185b7ce4a986</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlListener</name>
      <anchorfile>classiv_1_1GlListener.html</anchorfile>
      <anchor>a42a1caea49f4ff51b86fa52966840d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GlEnable</name>
      <anchorfile>classiv_1_1GlListener.html</anchorfile>
      <anchor>a33475cbf0ba4f4c4800d4a26dce92f2d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GlDisable</name>
      <anchorfile>classiv_1_1GlListener.html</anchorfile>
      <anchor>a330a8a378c13d5413c4d5f4da51fe045</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GlDrop</name>
      <anchorfile>classiv_1_1GlListener.html</anchorfile>
      <anchor>a35895ce1a9d729dc93f1089aa0e37e47</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::GlMesh</name>
    <filename>classiv_1_1GlMesh.html</filename>
    <member kind="function">
      <type></type>
      <name>GlMesh</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>aec2584be2b1d6e7ffe42da590aafd31f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CreateMesh</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>ad0730ef9fab1a6ac0651bf873c0b5d15</anchor>
      <arglist>(Context const *logger)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Load_Positions</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>a94914f198a85a700f1d99f52fd3a0972</anchor>
      <arglist>(Context const *logger, float const *data, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Load_TexCoords</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>ae681a56054a576f7effddd36278f1e1a</anchor>
      <arglist>(Context const *logger, float const *data, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Load_Indices</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>af0005bca19ea070e3f7bb7090289a7d6</anchor>
      <arglist>(Context const *logger, GLuint const *data, size_t length, GLenum draw_mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Load_All</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>a256f28a5010c8f5e7375c49f352c5542</anchor>
      <arglist>(Context const *logger, GlMeshData const &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DestroyMesh</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>ad7d693b065d078c5b845749b86766940</anchor>
      <arglist>(Context const *logger)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DropMesh</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>ab00bbfc1e63cce11bb786d9d7878354c</anchor>
      <arglist>(Context const *logger)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DrawElements</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>a12ed263f55d53db806da3265c5d5d60d</anchor>
      <arglist>(Context const *logger) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>indices_cnt</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>a5dde2a0a65629818a9de0df3a0dbd04b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const constexpr GLuint</type>
      <name>PrimitiveRestart</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>a809675e99c1cf9d7cb60ef07dd43919e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const constexpr GLuint</type>
      <name>AttributeLoc_Position</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>ae90ac9146e5bc07ed72d7c262e044913</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const constexpr GLuint</type>
      <name>AttributeLoc_Texcoord</name>
      <anchorfile>classiv_1_1GlMesh.html</anchorfile>
      <anchor>a5c3ec83756297fcbe45e0ac86568e3f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::GlMeshData</name>
    <filename>structiv_1_1GlMeshData.html</filename>
    <member kind="variable">
      <type>std::vector&lt; float &gt;</type>
      <name>positions</name>
      <anchorfile>structiv_1_1GlMeshData.html</anchorfile>
      <anchor>ac18ed3e2e604d6ed6fbee7f53ee7dff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; float &gt;</type>
      <name>texcoords</name>
      <anchorfile>structiv_1_1GlMeshData.html</anchorfile>
      <anchor>a351ab78dc916ede103bf9ec3de18031c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GLuint &gt;</type>
      <name>indices</name>
      <anchorfile>structiv_1_1GlMeshData.html</anchorfile>
      <anchor>a04b1e40ad4cf9717c9040226bd7367cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLenum</type>
      <name>draw_mode</name>
      <anchorfile>structiv_1_1GlMeshData.html</anchorfile>
      <anchor>ad20a68156118462a716c26f3bbb1c1a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::GlProgram</name>
    <filename>classiv_1_1GlProgram.html</filename>
    <member kind="function">
      <type></type>
      <name>GlProgram</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>a032ec710d55eae46d8aa259b53d2fc66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CreateProgram</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>a12049d0a84e5210762d3113611ac44a6</anchor>
      <arglist>(ClientMarker const *logger)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Load_VertexShader</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>adf31e6614bc19a894e94a52c1fdfec81</anchor>
      <arglist>(ClientMarker const *logger, std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Load_FragmentShader</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>aebbd8e7aa565212cd4001bec8321e0ac</anchor>
      <arglist>(ClientMarker const *logger, std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BindAttribute</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>a97f7e9316b23910fa051161fb0547679</anchor>
      <arglist>(ClientMarker const *logger, GLuint location, const char *attrib_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PositionAttributeName</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>ae78091de5ebb81632e398ca36a2e62ba</anchor>
      <arglist>(ClientMarker const *logger, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LinkProgram</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>aec303d811fc46b3a1c13f7ee50cc59be</anchor>
      <arglist>(ClientMarker const *logger)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DestroyProgram</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>a694a9a995ea905728a4f96782f5bb331</anchor>
      <arglist>(ClientMarker const *logger)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DropProgram</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>a5f84b5a787425bb977e6325e678358ad</anchor>
      <arglist>(ClientMarker const *logger)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>program_id</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>ac47973a7ab1250e70826793ed72cafb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>GetUniformLocation</name>
      <anchorfile>classiv_1_1GlProgram.html</anchorfile>
      <anchor>aabfbab4d14736c3a25e66198bfd7a1a7</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::GlSystem</name>
    <filename>classiv_1_1GlSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>GlSystem</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>ad863d991e56f71fa41da8a199cab5c67</anchor>
      <arglist>(SystemContainer *sc, RenderTarget *rt, bool gl_enabled)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlSystem</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a3efc0dc882511076ed75eed5d513130e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gl_enable</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a8d8d231038dcf424d14b847c6547da08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gl_disable</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a2c89f52be77a4890a5187c27ca730ca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gl_drop</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a7e66587add598cc66fcae5e961596a84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>aff8502c553694c2c21b22089a23b9309</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddGlListener</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>ac7e480a3e4f45e0af05b5bdfc9c6959c</anchor>
      <arglist>(GlListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveGlListener</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a2f13b13d6972969cdb28bcfd23947897</anchor>
      <arglist>(GlListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GlIsEnabled</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>af6b2eab308599a1f321b4c99171d8795</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RenderTarget *</type>
      <name>render_target</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a5519be0987fcce67f8b8e1443304f774</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlSystem</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>ad863d991e56f71fa41da8a199cab5c67</anchor>
      <arglist>(SystemContainer *sc, RenderTarget *rt, bool gl_enabled)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlSystem</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a3efc0dc882511076ed75eed5d513130e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gl_enable</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a8d8d231038dcf424d14b847c6547da08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gl_disable</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a2c89f52be77a4890a5187c27ca730ca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gl_drop</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a7e66587add598cc66fcae5e961596a84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>aff8502c553694c2c21b22089a23b9309</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddGlListener</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>ac7e480a3e4f45e0af05b5bdfc9c6959c</anchor>
      <arglist>(GlListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveGlListener</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a2f13b13d6972969cdb28bcfd23947897</anchor>
      <arglist>(GlListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GlIsEnabled</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>af6b2eab308599a1f321b4c99171d8795</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RenderTarget *</type>
      <name>render_target</name>
      <anchorfile>classiv_1_1GlSystem.html</anchorfile>
      <anchor>a5519be0987fcce67f8b8e1443304f774</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::GlTexture</name>
    <filename>classiv_1_1GlTexture.html</filename>
    <member kind="function">
      <type></type>
      <name>GlTexture</name>
      <anchorfile>classiv_1_1GlTexture.html</anchorfile>
      <anchor>ab145bcbdf1f9cecdd1865779c2340432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CreateTexture</name>
      <anchorfile>classiv_1_1GlTexture.html</anchorfile>
      <anchor>a2281210c9c0810990cc99a6a72c442b2</anchor>
      <arglist>(Context const *logger, RenderTarget *target, int2 size, GlMinFiltering, GlMagFiltering, bool repeat, PixelFormat storage_format, ColorSpace color_space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadData</name>
      <anchorfile>classiv_1_1GlTexture.html</anchorfile>
      <anchor>a7ffe4fedd219308b5e3a08ad7f62b080</anchor>
      <arglist>(Context const *logger, RenderTarget *target, uint8_t *values, size_t values_size, PixelFormat data_format)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DestroyTexture</name>
      <anchorfile>classiv_1_1GlTexture.html</anchorfile>
      <anchor>a7f8d23526e3b5b292c96ac7b2ed7b630</anchor>
      <arglist>(Context const *logger, RenderTarget *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DropTexture</name>
      <anchorfile>classiv_1_1GlTexture.html</anchorfile>
      <anchor>a083f34ba64b2ccc4f79dac0a07ac39d9</anchor>
      <arglist>(Context const *logger, RenderTarget *target)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allocated</name>
      <anchorfile>classiv_1_1GlTexture.html</anchorfile>
      <anchor>afb6f037e2e603467c06e9512fc3d898b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>size</name>
      <anchorfile>classiv_1_1GlTexture.html</anchorfile>
      <anchor>a36ca2e53d88483a950844a58688e2105</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>texture_id</name>
      <anchorfile>classiv_1_1GlTexture.html</anchorfile>
      <anchor>af5fef569e9fb13b07d4090c7991a1c7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColorSpace</type>
      <name>gpu_color_space</name>
      <anchorfile>classiv_1_1GlTexture.html</anchorfile>
      <anchor>adc68c2d926ec0fdd789aeb7d2b7673ab</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Font::Glyph</name>
    <filename>structiv_1_1Font_1_1Glyph.html</filename>
    <member kind="function">
      <type></type>
      <name>Glyph</name>
      <anchorfile>structiv_1_1Font_1_1Glyph.html</anchorfile>
      <anchor>a06950ce5feb577efbe83f06cd5b7624a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>code</name>
      <anchorfile>structiv_1_1Font_1_1Glyph.html</anchorfile>
      <anchor>afbdcb93527b14949c05d7b66285330c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>pos_x</name>
      <anchorfile>structiv_1_1Font_1_1Glyph.html</anchorfile>
      <anchor>a39a16836d7abf77350e4e7367d34d1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>pos_y</name>
      <anchorfile>structiv_1_1Font_1_1Glyph.html</anchorfile>
      <anchor>a041bce48a3d3a8a72e74e0a081021dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>width</name>
      <anchorfile>structiv_1_1Font_1_1Glyph.html</anchorfile>
      <anchor>ab63b40ff372446329ddb2b096632a936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>height</name>
      <anchorfile>structiv_1_1Font_1_1Glyph.html</anchorfile>
      <anchor>a4b74e8b3a0dd05efa7a6d8dec06b1eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>bearing_x</name>
      <anchorfile>structiv_1_1Font_1_1Glyph.html</anchorfile>
      <anchor>ac816021244a1a7044b9bb1ef0d29951d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>bearing_y</name>
      <anchorfile>structiv_1_1Font_1_1Glyph.html</anchorfile>
      <anchor>a838bfe3d4adb5f4da9cf1fe1759345a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::has_interpolate</name>
    <filename>structiv_1_1has__interpolate.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>iv::has_interpolate&lt; T, typename interpolator::to_void&lt; typename T::interpolate &gt;::type &gt;</name>
    <filename>structiv_1_1has__interpolate_3_01T_00_01typename_01interpolator_1_1to__void_3_01typename_01T_1_1interpolate_01_4_1_1type_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>iv::hash</name>
    <filename>structiv_1_1hash.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>size_t</type>
      <name>result_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac6d11219f5e46183693d8ea0d1ec8c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Type</type>
      <name>argument_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac72d2a309b5dea555f700a58e16b12f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>a18509adb9a3a6a8d5c9b9328088e3345</anchor>
      <arglist>(Type const &amp;value) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::hash&lt; Enum, typename std::enable_if&lt; std::is_enum&lt; Enum &gt;::value &gt;::type &gt;</name>
    <filename>structiv_1_1hash_3_01Enum_00_01typename_01std_1_1enable__if_3_01std_1_1is__enum_3_01Enum_01_4_1_1value_01_4_1_1type_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash_3_01Enum_00_01typename_01std_1_1enable__if_3_01std_1_1is__enum_3_01Enum_01_4_1_1value_01_4_1_1type_01_4.html</anchorfile>
      <anchor>af8ff02ff9cfaa5ef23065462c2fad861</anchor>
      <arglist>(Enum const &amp;value) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; iv::client_ptr&lt; TypedClient &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01iv_1_1client__ptr_3_01TypedClient_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01iv_1_1client__ptr_3_01TypedClient_01_4_01_4.html</anchorfile>
      <anchor>a3809e05704b7f1ea93671d98da37ad61</anchor>
      <arglist>(iv::client_ptr&lt; TypedClient &gt; &amp;ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hash&lt; iv::DVarId &gt;</name>
    <filename>structiv_1_1hash.html</filename>
    <member kind="typedef">
      <type>size_t</type>
      <name>result_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac6d11219f5e46183693d8ea0d1ec8c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iv::DVarId</type>
      <name>argument_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac72d2a309b5dea555f700a58e16b12f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>a18509adb9a3a6a8d5c9b9328088e3345</anchor>
      <arglist>(iv::DVarId const &amp;value) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; iv::DVarId &gt;</name>
    <filename>structstd_1_1hash_3_01iv_1_1DVarId_01_4.html</filename>
    <base>hash&lt; iv::DVarId &gt;</base>
  </compound>
  <compound kind="class">
    <name>hash&lt; iv::InputId &gt;</name>
    <filename>structiv_1_1hash.html</filename>
    <member kind="typedef">
      <type>size_t</type>
      <name>result_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac6d11219f5e46183693d8ea0d1ec8c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iv::InputId</type>
      <name>argument_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac72d2a309b5dea555f700a58e16b12f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>a18509adb9a3a6a8d5c9b9328088e3345</anchor>
      <arglist>(iv::InputId const &amp;value) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; iv::InputId &gt;</name>
    <filename>structstd_1_1hash_3_01iv_1_1InputId_01_4.html</filename>
    <base>hash&lt; iv::InputId &gt;</base>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; iv::instance_ptr &gt;</name>
    <filename>structstd_1_1hash_3_01iv_1_1instance__ptr_01_4.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01iv_1_1instance__ptr_01_4.html</anchorfile>
      <anchor>a53456f87a03878932a3d0bedc02e284b</anchor>
      <arglist>(iv::instance_ptr const &amp;v) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::hash&lt; iv::int2 &gt;</name>
    <filename>structiv_1_1hash_3_01iv_1_1int2_01_4.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash_3_01iv_1_1int2_01_4.html</anchorfile>
      <anchor>a7f28b258e33ca774e7350a65235e4b80</anchor>
      <arglist>(iv::int2 const &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::hash&lt; iv::int3 &gt;</name>
    <filename>structiv_1_1hash_3_01iv_1_1int3_01_4.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash_3_01iv_1_1int3_01_4.html</anchorfile>
      <anchor>af43ac66c1b537774a9570afb79902246</anchor>
      <arglist>(iv::int3 const &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; iv::LogId &gt;</name>
    <filename>structstd_1_1hash_3_01iv_1_1LogId_01_4.html</filename>
    <base>hash&lt; iv::LogId &gt;</base>
  </compound>
  <compound kind="class">
    <name>hash&lt; iv::LogId &gt;</name>
    <filename>structiv_1_1hash.html</filename>
    <member kind="typedef">
      <type>size_t</type>
      <name>result_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac6d11219f5e46183693d8ea0d1ec8c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iv::LogId</type>
      <name>argument_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac72d2a309b5dea555f700a58e16b12f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>a18509adb9a3a6a8d5c9b9328088e3345</anchor>
      <arglist>(iv::LogId const &amp;value) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; iv::LumaStyleId &gt;</name>
    <filename>structstd_1_1hash_3_01iv_1_1LumaStyleId_01_4.html</filename>
    <base>iv::hash</base>
  </compound>
  <compound kind="class">
    <name>hash&lt; iv::LumaStyleId &gt;</name>
    <filename>structiv_1_1hash.html</filename>
    <member kind="typedef">
      <type>size_t</type>
      <name>result_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac6d11219f5e46183693d8ea0d1ec8c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iv::LumaStyleId</type>
      <name>argument_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac72d2a309b5dea555f700a58e16b12f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>a18509adb9a3a6a8d5c9b9328088e3345</anchor>
      <arglist>(iv::LumaStyleId const &amp;value) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; iv::RandomId &gt;</name>
    <filename>structstd_1_1hash_3_01iv_1_1RandomId_01_4.html</filename>
    <base>hash&lt; iv::RandomId &gt;</base>
  </compound>
  <compound kind="class">
    <name>hash&lt; iv::RandomId &gt;</name>
    <filename>structiv_1_1hash.html</filename>
    <member kind="typedef">
      <type>size_t</type>
      <name>result_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac6d11219f5e46183693d8ea0d1ec8c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iv::RandomId</type>
      <name>argument_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac72d2a309b5dea555f700a58e16b12f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>a18509adb9a3a6a8d5c9b9328088e3345</anchor>
      <arglist>(iv::RandomId const &amp;value) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; iv::ResourcePath &gt;</name>
    <filename>structstd_1_1hash_3_01iv_1_1ResourcePath_01_4.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01iv_1_1ResourcePath_01_4.html</anchorfile>
      <anchor>aebfda880d4975a11a1892be434f7f786</anchor>
      <arglist>(iv::ResourcePath const &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hash&lt; iv::TableId &gt;</name>
    <filename>structiv_1_1hash.html</filename>
    <member kind="typedef">
      <type>size_t</type>
      <name>result_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac6d11219f5e46183693d8ea0d1ec8c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iv::TableId</type>
      <name>argument_type</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>ac72d2a309b5dea555f700a58e16b12f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash.html</anchorfile>
      <anchor>a18509adb9a3a6a8d5c9b9328088e3345</anchor>
      <arglist>(iv::TableId const &amp;value) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; iv::TableId &gt;</name>
    <filename>structstd_1_1hash_3_01iv_1_1TableId_01_4.html</filename>
    <base>hash&lt; iv::TableId &gt;</base>
  </compound>
  <compound kind="struct">
    <name>iv::hash&lt; Me, std::enable_if_t&lt; std::is_base_of&lt; iv::RuntimeId&lt; Me &gt;, Me &gt;::value &gt; &gt;</name>
    <filename>structiv_1_1hash_3_01Me_00_01std_1_1enable__if__t_3_01std_1_1is__base__of_3_01iv_1_1RuntimeId_3_a0f0156059adae859900b4ad0123db3e.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash_3_01Me_00_01std_1_1enable__if__t_3_01std_1_1is__base__of_3_01iv_1_1RuntimeId_3_a0f0156059adae859900b4ad0123db3e.html</anchorfile>
      <anchor>a60443bc83f0a1376ff198a12f0d87446</anchor>
      <arglist>(Me const &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::hash&lt; std::pair&lt; First, Second &gt; &gt;</name>
    <filename>structiv_1_1hash_3_01std_1_1pair_3_01First_00_01Second_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash_3_01std_1_1pair_3_01First_00_01Second_01_4_01_4.html</anchorfile>
      <anchor>abe26eb66ba395deea5ec6bf40b3401bf</anchor>
      <arglist>(std::pair&lt; First, Second &gt; const &amp;value) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::hash&lt; std::tuple&lt; TupleTypes... &gt; &gt;</name>
    <filename>structiv_1_1hash_3_01std_1_1tuple_3_01TupleTypes_8_8_8_01_4_01_4.html</filename>
    <templarg>TupleTypes</templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1hash_3_01std_1_1tuple_3_01TupleTypes_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>ac5a866e18ba461228c102585d0ee538f</anchor>
      <arglist>(std::tuple&lt; TupleTypes... &gt; const &amp;value) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::priv::HashValueImpl</name>
    <filename>structiv_1_1priv_1_1HashValueImpl.html</filename>
    <templarg></templarg>
    <templarg>Index</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structiv_1_1priv_1_1HashValueImpl.html</anchorfile>
      <anchor>ad2e76a75b6d4cf2bf6de306737daca0d</anchor>
      <arglist>(size_t &amp;seed, Tuple const &amp;tuple)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::priv::HashValueImpl&lt; Tuple, 0 &gt;</name>
    <filename>structiv_1_1priv_1_1HashValueImpl_3_01Tuple_00_010_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structiv_1_1priv_1_1HashValueImpl_3_01Tuple_00_010_01_4.html</anchorfile>
      <anchor>a1c3fbf71d21bd07258fe596b8774e72b</anchor>
      <arglist>(size_t &amp;seed, Tuple const &amp;tuple)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Heap</name>
    <filename>classiv_1_1Heap.html</filename>
    <member kind="function">
      <type></type>
      <name>Heap</name>
      <anchorfile>classiv_1_1Heap.html</anchorfile>
      <anchor>a62320be6bfefccb5bba618f2aefeccd5</anchor>
      <arglist>(Instance *inst=nullptr, ClientMarker *cm=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Heap</name>
      <anchorfile>classiv_1_1Heap.html</anchorfile>
      <anchor>a5fae7852905b6b532d96b8833dbac6fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classiv_1_1Heap.html</anchorfile>
      <anchor>a4d84fe8bc1875f925d1af76fbedd8062</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classiv_1_1Heap.html</anchorfile>
      <anchor>a87908216834254809a9b9c8274103f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>create</name>
      <anchorfile>classiv_1_1Heap.html</anchorfile>
      <anchor>a4235153675b5659d1ebc39c12549fab9</anchor>
      <arglist>(CArgs const &amp;...)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createInstance</name>
      <anchorfile>classiv_1_1Heap.html</anchorfile>
      <anchor>aaf591005eb895b29b1dffd1e52e3c4fa</anchor>
      <arglist>(std::string const &amp;name, CArgs const &amp;...)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createClient</name>
      <anchorfile>classiv_1_1Heap.html</anchorfile>
      <anchor>ae6845b55766de7bdc6301260dac83a26</anchor>
      <arglist>(CArgs const &amp;...)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>create</name>
      <anchorfile>classiv_1_1Heap.html</anchorfile>
      <anchor>ab694d8552c63acddfd2f2b57e035eda5</anchor>
      <arglist>(CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createInstance</name>
      <anchorfile>classiv_1_1Heap.html</anchorfile>
      <anchor>a28a133ee5958c7f0f76949b0d44e25a0</anchor>
      <arglist>(std::string const &amp;name, CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createClient</name>
      <anchorfile>classiv_1_1Heap.html</anchorfile>
      <anchor>ab5fe3dc8af8cf22569dc2a4e591ecad8</anchor>
      <arglist>(CArgs const &amp;... cargs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::table_debug_context::HintData</name>
    <filename>structiv_1_1table__debug__context_1_1HintData.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structiv_1_1table__debug__context_1_1HintData.html</anchorfile>
      <anchor>a3afbec52c78c59a78a8457679d6e185b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::any</type>
      <name>hint</name>
      <anchorfile>structiv_1_1table__debug__context_1_1HintData.html</anchorfile>
      <anchor>af47655cdec805541c7073bb65b664145</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::I</name>
    <filename>classiv_1_1I.html</filename>
    <templarg></templarg>
    <base>iv::Instance</base>
    <member kind="function">
      <type></type>
      <name>I</name>
      <anchorfile>classiv_1_1I.html</anchorfile>
      <anchor>aa8f0ba9c963accc703e1999708657f6e</anchor>
      <arglist>(std::string const &amp;name, SystemContainer *sc, CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I</name>
      <anchorfile>classiv_1_1I.html</anchorfile>
      <anchor>acb0b279eda55e29c121f7a7fcca46af9</anchor>
      <arglist>(std::string const &amp;name, Instance *parent, CArgs const &amp;... cargs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I&lt; iv::ResourcesRoot &gt;</name>
    <filename>classiv_1_1I.html</filename>
    <base>iv::Instance</base>
    <base>iv::ResourcesRoot</base>
    <member kind="function">
      <type></type>
      <name>I</name>
      <anchorfile>classiv_1_1I.html</anchorfile>
      <anchor>aa8f0ba9c963accc703e1999708657f6e</anchor>
      <arglist>(std::string const &amp;name, SystemContainer *sc, CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I</name>
      <anchorfile>classiv_1_1I.html</anchorfile>
      <anchor>acb0b279eda55e29c121f7a7fcca46af9</anchor>
      <arglist>(std::string const &amp;name, Instance *parent, CArgs const &amp;... cargs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Image</name>
    <filename>classiv_1_1Image.html</filename>
    <base>iv::Elem</base>
    <base>iv::SlotChild</base>
    <base>iv::TranslucentElem</base>
    <base>iv::Renderable</base>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a07388538ef79081e051c08499c8a433f</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a3836b4b310f7e9b7add401751729c66d</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>ab36f88fec3ad79e37a59b82cc3dd0bef</anchor>
      <arglist>(CameraState const &amp;camera, std::optional&lt; float &gt; depth_override) override</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>enabled</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>ae7e4828499bb1892669e696247bce81a</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>preblend</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>ac547a38716d5a9c31c599b6c840583da</anchor>
      <arglist>(float4 val)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>translucent</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a1b16a973e91771daffc0aed6ba7d1fed</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>filename</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a43e5cf2335f8be47319ceb944f55047c</anchor>
      <arglist>(ResourcePath const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>fittingStage</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a1c49d60151275d5eb4b5ec4bdc17658b</anchor>
      <arglist>(FlatShader::FittingStage v)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>pixelizeStage</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a81c422593e9652e6d228611d42aed7bf</anchor>
      <arglist>(FlatShader::PixelizeStage v)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>pixelizeSize</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>aba01a97e879769f82e16c38733613f8a</anchor>
      <arglist>(float2 v)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>pixelizeOffset</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>ae51a7fbd7846daa5027399230c53973f</anchor>
      <arglist>(float2 v)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>resizeStage</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>ad37f15bfb786cd2f29d0167a84042a50</anchor>
      <arglist>(FlatShader::ResizeStage v)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>resizeAnchor</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a9d14de6b7f933840dd8cc0cf0361983c</anchor>
      <arglist>(float2 v)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>filteringStage</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>aaf7a61ae1ff143b05aac0a1c9b29f112</anchor>
      <arglist>(FlatShader::FilteringStage v)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>filteringAlphaThreshold</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>ab865e8bb38d60a7f0815b289f649769c</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>filteringAlphaWidth</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>aaab92aa75f78f057ffa1179a4170e038</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>alpha</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a60d57dde36f0e0fadabbe4cf35b034dc</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>colorTransform</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>aa8d6f8edf7da5c979fb61f145702e31d</anchor>
      <arglist>(float4x4 const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>ac1372e71847f3b45a070df8c33ba0686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; ResourcePath &gt;</type>
      <name>attr_filename</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>aaa37c6392363bcbf2c251752c991b3c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FlatShader::Params</type>
      <name>shading</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a4e9a9a0fc1d130730f491851b692b19c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>a0e2d1ee7579e6739710cde12346d1b1a</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>afba7d6585e5e9b2318f5ffc57b6f86d0</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>picking_test_pixel_perfect</name>
      <anchorfile>classiv_1_1Image.html</anchorfile>
      <anchor>aac85e0f48f4a80f87b310c09dbf08678</anchor>
      <arglist>(float2 local_pos) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::ImageLoader_Metadata</name>
    <filename>structiv_1_1ImageLoader__Metadata.html</filename>
    <member kind="variable">
      <type>int2</type>
      <name>size</name>
      <anchorfile>structiv_1_1ImageLoader__Metadata.html</anchorfile>
      <anchor>a2f3b95ac9497f3d3b43bd826a64db707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PixelFormat</type>
      <name>pixel_format</name>
      <anchorfile>structiv_1_1ImageLoader__Metadata.html</anchorfile>
      <anchor>ae9b1feea6f2da8c39291d0dcaf7ea08e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Font::Info</name>
    <filename>structiv_1_1Font_1_1Info.html</filename>
    <member kind="function">
      <type></type>
      <name>Info</name>
      <anchorfile>structiv_1_1Font_1_1Info.html</anchorfile>
      <anchor>aebde60b7cfb070f5d1468fb594e5a4e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>line_height</name>
      <anchorfile>structiv_1_1Font_1_1Info.html</anchorfile>
      <anchor>af95ba48e0ed0bf8de93812fd0e13216b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>ascender</name>
      <anchorfile>structiv_1_1Font_1_1Info.html</anchorfile>
      <anchor>ae6d11c0d40d7264add024ae5043a3ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>descender</name>
      <anchorfile>structiv_1_1Font_1_1Info.html</anchorfile>
      <anchor>acacb5ef88ac329e53a48b0ae07720b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>max_advance</name>
      <anchorfile>structiv_1_1Font_1_1Info.html</anchorfile>
      <anchor>ab5f4cee469d82eb89797a70a5c1f636d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; uint32_t, float &gt;</type>
      <name>advances</name>
      <anchorfile>structiv_1_1Font_1_1Info.html</anchorfile>
      <anchor>aac68fec4976b094d8a4bfaac5c3ea3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; uint32_t, float &gt;</type>
      <name>widths</name>
      <anchorfile>structiv_1_1Font_1_1Info.html</anchorfile>
      <anchor>ad776bfdc527cdac25f2c247a1b560eca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Input</name>
    <filename>classiv_1_1Input.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Key</name>
      <anchorfile>classiv_1_1Input.html</anchorfile>
      <anchor>a3cff41868e855afe8b237db2c1d38a36</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a76a40e4f974fd895a0a2598c1cee28b4">Character</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a6338174ec99ea053b942b8d869c2c259">KEYBOARD_BEGIN</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ad511f8439ecde36647437fbba67a4394">Space</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ab6ac6f84bcb33f9b5186bda6b4c8b399">Apostrophe</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a58be47db9455679e6a44df2eff9c9fa6">Comma</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a453fb623e752c5993f65bc410fd74fe5">Minus</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a1901606ea069a83dc7beea17881ef95a">Period</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a358cfe58715d680d9ab09f82e4010cbc">Slash</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a691f50215c1b19854d3dd5d95231dacf">Num_0</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a8a90fc151b80fddba85a388a84207cf8">Num_1</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36af910f0b0d2efba77aac93047000ac744">Num_2</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36aae57bb2c20c1e74e932b15112a97041d">Num_3</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ac77d73e5f024be67c64164106292ab4c">Num_4</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a6105fb2098a65ff6ba0bbfddab00d5c2">Num_5</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36aabfe04da556c2905da118cf470d3e0aa">Num_6</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a0869f0e8db52670b4407e5da2c9bc8e9">Num_7</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36aac35ad283bdfb42eb93fcfc62d0bc3c8">Num_8</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a9faf527e39ca72a03ff25f453aeb9c67">Num_9</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a9806fa37a3ecd39bf637c203aa011ed0">Semicolon</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36af5f286e73bda105e538310b3190f75c5">Equal</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a0732548dc0421be782ed8feb41e5782a">Char_A</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a42e0030b62b2a25dd1658676bd4a3d2f">Char_B</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ae243fd9100366c4f02ea83b281de9762">Char_C</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a8f7ef3221b822d5c3b08887989636cf6">Char_D</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a1d07941d98df41cb099e33cba817f73c">Char_E</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36adf51d7a9ca2926b76dacf18cef2fd1ef">Char_F</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a3de8550c655c7571c97d31b0481c5635">Char_G</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36af8dd00b0393a3f83188a890c402b184f">Char_H</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a8749c2d140e8ddb923916601492ab685">Char_I</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a012c8a9023a28a629112784aef5f65c8">Char_J</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ab0c27a32c61a708daaacfd2519cf9471">Char_K</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ad1b3b65004d935916739ff9330479420">Char_L</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a25280d72f8b6ff5b825c89329964afbb">Char_M</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36aeebc5e5d14ab36e99e5aa26670d38b90">Char_N</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36acebd4c466dc845e344a39db0f6278ce2">Char_O</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ad0b3c63b64e8f2acda18e028814f908c">Char_P</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a7c3c693225b919e6c356f72eb90a0c35">Char_Q</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36af925b5c7b1de863cf8e643faf9e44a45">Char_R</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ab5af728b7a820aebb37d1b9014cd9c5d">Char_S</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a5e6869a343838703064b2681171f2096">Char_T</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ae5c584c62b03785c46f02b98e449f8fe">Char_U</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a5256d8c0235be69cac2f683288bef3fb">Char_V</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a6bd83a670ffdd55e5589bcf1900283cb">Char_W</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a1131c09b87e87132c73a40d86d623be9">Char_X</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a5bea1fb52b45bc0b6fd9b295f05a5bc9">Char_Y</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a355724e960e956b2cbd36ac84b28024f">Char_Z</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a486a936954e9aab9368a9c1095d4493d">Left_Bracket</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36af6c6379402dce27659f7cffee6bc1f00">Backslash</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a59f2bfd0703f2ef165152b947fbe8a88">Right_Bracket</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a2a37c4bfa823a4953840844466a8db82">Grave_Accent</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36adec10fe42763f89ef845ff6511fdd623">World_1</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a398fd63c3377d75cd9e0fac70621ea8a">World_2</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a013ec032d3460d4be4431c6ab1f8f224">Escape</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36af1851d5600eae616ee802a31ac74701b">Enter</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a5c6ba25104401c9ee0650230fc6ba413">Tab</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36acd7d13ceea728b08555f7c818cfb13ef">Backspace</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36aa458be0f08b7e4ff3c0f633c100176c0">Insert</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36af2a6c498fb90ee345d997f888fce3b18">Delete</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a92b09c7c48c520c3c55e497875da437c">Right</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a945d5e233cf7d6240f6b783b36a374ff">Left</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a08a38277b0309070706f6652eeae9a53">Down</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a258f49887ef8d14ac268c92b02503aaa">Up</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ae159fa7467938719c473830720d3a902">Page_Up</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a0d3e1697dc94b35c5c59fc2277b1543b">Page_Down</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a8cf04a9734132302f96da8e113e80ce5">Home</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a87557f11575c0ad78e4e28abedc13b6e">End</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a445d82fecf2cc4c8ff6bd602597543ba">Caps_Lock</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36adb667b8694f88b904a526c02d8273362">Scroll_Lock</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a823da7450c76e6a9f422618029a6b792">Num_Lock</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36aeb5349bfe08aa41029a93477e2074c10">Print_Screen</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a105b296a83f9c105355403f3332af50f">Pause</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ae1dffc8709f31a4987c8a88334107e89">F1</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36afe5c3684dce76cdd9f7f42430868aa74">F2</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a4b6bf4b531770872d4328ce69bef5627">F3</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ae7e0e72401a9f2718ed0f39f2861d702">F4</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a37f438df6a6d5ba4c17ef8ca58562f00">F5</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a1faf42f2823f184eb2c9f0dffe5d73f2">F6</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a47489eb597b7db34caa24b1fc78fc839">F7</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a4787509ad9f9d747a81a30e9dde3d4a7">F8</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a892a245e287c163080b23db737d3c4c9">F9</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ab213ce22ca6ad4eda8db82966b9b6e5a">F10</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a643b0662422d1d0dffa3fca2e2bf28a8">F11</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ae902674982fc99aa343cdd94da7476c3">F12</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a95dfde4807d4d6a9eec499203b3c24a0">F13</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a2468649b6215c4cdd2aef5095b3f5932">F14</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ae53b55851b9ff4979f2c3ff434a4a138">F15</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a56d8353718e6fdc78b8d69078a2cdb94">F16</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36affa5882d1ddcf903bf0d0dbc30bfc604">F17</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a810b30cdfc07fd7fff553a94b828ff78">F18</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36acd7c2a221ef5d0a34acc0bcd679b2054">F19</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36afc335adb3d69d3d8270769e1923ea4dc">F20</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a77e9eee7c579eef5f3731ecf1053c02e">F21</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a7fa06ead699fcbd63132370ffe13335a">F22</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a889645d530078147e7dc69a9caadc31e">F23</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36aebd7820c520d05eca2d775c37d141273">F24</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36aabf9846f265ae3dea4bf9d740f5cb1aa">F25</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ae7a3fad613d402e5839f9471dcdc01e2">KeyPad_0</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a39d222b9b2e4bfb969f1c312b241b64c">KeyPad_1</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a3969978e0176403491db3a1abeac4b6c">KeyPad_2</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36afc2c0994ef809181c22d22e303b48408">KeyPad_3</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a52af925ae84dae1cd7fc6a52a851cb83">KeyPad_4</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a4168aa9e55762148289dabb063eaa9c9">KeyPad_5</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a81d582284ba36a69f4e285996520c9c4">KeyPad_6</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ad44bc286257e17fdff2ef14aede9c750">KeyPad_7</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a0033d5f5ebea1cd26732201cf3a6b7e3">KeyPad_8</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36aae68d781006103117cd3e469e8484e22">KeyPad_9</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a2f4e0e8b1dfce2790d9e38fa96d1bdff">KeyPad_Decimal</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a7f9ee1d6ec066d82ec494ffbf713c3f7">KeyPad_Divide</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a77aa7c7ec9e4ae16cdce572ce72fd256">KeyPad_Multiply</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a2e4cfed60fe27ff4410182f67bea9335">KeyPad_Subtract</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ad833b1ee817413bb7184fd22b6fa95ab">KeyPad_Add</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a0ec9f480bfece9ebf93524454f38dd64">KeyPad_Enter</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a04b46a55ccb210c2f2c92168eff28463">KeyPad_Equal</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ac9185222e3defa9231c738c9463d54c5">Left_Shift</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ab992be8b8ad6522d06404dd90677255f">Left_Control</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ab9ae5318001cebe3b72035b9bdc75fce">Left_Alt</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a86de78784c053c8da30d182e718eecec">Left_Super</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36abcd3620879203f794fe1eb0fcccc833b">Right_Shift</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a4d3d4a727c37a18d85fd7a80c9d540ac">Right_Control</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ab27e7037a7cf797698dbde8b7d9c5f05">Right_Alt</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a293caf82415099a69c5b4de94f6fb1f0">Right_Super</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ab61541208db7fa7dba42c85224405911">Menu</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36aa8469b24f9d4263d73aa60b87c89c6c3">KEYBOARD_END</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a3f4571d6abaa713eddb5fa68757d251a">MOUSE_BEGIN</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36af2a47c6809d88e175dade0ef7b16aa13">Mouse</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36abce0118bd8f5bf5e7f849dff486de57f">MouseLeft</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a64be76bfebee9b86f0963be88b3de177">MouseRight</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a9d30e0a64a4f80ad2159949d3f316626">MouseMiddle</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a508c31fc36a2d7685e18e493bb5022b3">MouseBack</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a9bf4edf58f08da65dd95218e9ccaa143">MouseForward</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a5f0b32fe584b25cfb62a4da7e5e62849">MouseScrollUp</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a7ce341ad8577d039eb2d00aa122f1d36">MouseScrollDown</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36ad99effa702007f0cef59cc81484ef32e">MouseScrollLeft</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a7ac46b13163cb2277b1f62ae38092222">MouseScrollRight</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36a787f6bda44b71647246ef9cca656ef7b">MOUSE_END</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="a3cff41868e855afe8b237db2c1d38a36af0f31c9700c6b10d8a20dc487b2ae6a8">Touch</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classiv_1_1Input.html</anchorfile>
      <anchor>adea0085a18b7437915446f88a1e3490f</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1Input.html" anchor="adea0085a18b7437915446f88a1e3490fa0610123bdd4ffc191a3ea05a847e1307">Press</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="adea0085a18b7437915446f88a1e3490fab8e7b465df7c5979dc731d06e84ce2cf">Release</enumvalue>
      <enumvalue file="classiv_1_1Input.html" anchor="adea0085a18b7437915446f88a1e3490faf698f67f5666aff10729d8a1cb1c14d2">Trigger</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Input::Key, int &gt;</type>
      <name>DeviceKey</name>
      <anchorfile>classiv_1_1Input.html</anchorfile>
      <anchor>accac978dbd4e873dcee7087d8868f4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iv::hash&lt; std::pair&lt; Input::Key, int &gt; &gt;</type>
      <name>DeviceKey_Hash</name>
      <anchorfile>classiv_1_1Input.html</anchorfile>
      <anchor>aa9bb445b32e1a4f2459ef2faf3ff3f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Input</name>
      <anchorfile>classiv_1_1Input.html</anchorfile>
      <anchor>af0565a8bb2cd751d6e40c67429d4e322</anchor>
      <arglist>(Type type, Input::Key key, int device_id, bool real)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>type</name>
      <anchorfile>classiv_1_1Input.html</anchorfile>
      <anchor>ac57fa15c4faa9c87f2e89bc9908885b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Input::Key</type>
      <name>key</name>
      <anchorfile>classiv_1_1Input.html</anchorfile>
      <anchor>a5cac5483182f958cdfa819ea93f4133c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>device_id</name>
      <anchorfile>classiv_1_1Input.html</anchorfile>
      <anchor>abf7980d0914a493ef8c57633e8fe6bce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>real</name>
      <anchorfile>classiv_1_1Input.html</anchorfile>
      <anchor>ad3fc9dd50e769bc911e8210d15f02ca9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputBinder</name>
    <filename>classiv_1_1InputBinder.html</filename>
    <member kind="function">
      <type></type>
      <name>InputBinder</name>
      <anchorfile>classiv_1_1InputBinder.html</anchorfile>
      <anchor>a2370308e2a6ef39bd455a464ba5804a1</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1InputBinder.html</anchorfile>
      <anchor>a316460101e3f96fe99686eeaba09c6a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BindKey</name>
      <anchorfile>classiv_1_1InputBinder.html</anchorfile>
      <anchor>aacfb14540a0a960fe34d47121f8f5000</anchor>
      <arglist>(InputId inputId, Input::Key key, int device_id=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnbindKey</name>
      <anchorfile>classiv_1_1InputBinder.html</anchorfile>
      <anchor>a5577c583c9cf7128c75f519b9e17993c</anchor>
      <arglist>(InputId inputId, Input::Key key, int device_id=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BindHoverKey</name>
      <anchorfile>classiv_1_1InputBinder.html</anchorfile>
      <anchor>ae2085efb4cf0235ad0285e4da9364446</anchor>
      <arglist>(InputId inputId, Input::Key key, int device_id=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnbindHoverKey</name>
      <anchorfile>classiv_1_1InputBinder.html</anchorfile>
      <anchor>a59434a90112e413f4894ea1b909a68e0</anchor>
      <arglist>(InputId inputId, Input::Key key, int device_id=-1)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1InputBinder.html</anchorfile>
      <anchor>a1cb48d176894462c9d97b8f6bf29b3e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputBindingListener</name>
    <filename>classiv_1_1InputBindingListener.html</filename>
    <member kind="function">
      <type></type>
      <name>InputBindingListener</name>
      <anchorfile>classiv_1_1InputBindingListener.html</anchorfile>
      <anchor>affac757d540a4a18b9b4d92b3724ead5</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InputBindingListener</name>
      <anchorfile>classiv_1_1InputBindingListener.html</anchorfile>
      <anchor>a06cca1e0f387905ab491c56c77d70e6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1InputBindingListener.html</anchorfile>
      <anchor>a42118a36ed3a92211f549ccf6076477f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>on_binding_changed</name>
      <anchorfile>classiv_1_1InputBindingListener.html</anchorfile>
      <anchor>a2b3d29963cd2ec3b1146d02bb953e6e6</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputBindingQuery</name>
    <filename>classiv_1_1InputBindingQuery.html</filename>
    <member kind="function">
      <type></type>
      <name>InputBindingQuery</name>
      <anchorfile>classiv_1_1InputBindingQuery.html</anchorfile>
      <anchor>aa70078ec0cfdd8ac2d20a112e876ba41</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InputBindingQuery</name>
      <anchorfile>classiv_1_1InputBindingQuery.html</anchorfile>
      <anchor>a56c42739c376f9767b37f1a3bfcb979d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1InputBindingQuery.html</anchorfile>
      <anchor>ab3826716ecd85abce66461bbf860a9f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBound</name>
      <anchorfile>classiv_1_1InputBindingQuery.html</anchorfile>
      <anchor>a32fe323f088cd60ef9a8c22a40460f4e</anchor>
      <arglist>(InputId inputId, Input::DeviceKey device_key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsHoverBound</name>
      <anchorfile>classiv_1_1InputBindingQuery.html</anchorfile>
      <anchor>acd721c5254cdb7b3ab53976104288a47</anchor>
      <arglist>(InputId inputId, Input::DeviceKey device_key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForeachBinding</name>
      <anchorfile>classiv_1_1InputBindingQuery.html</anchorfile>
      <anchor>aa51433df642526ae74b9fab228ac8391</anchor>
      <arglist>(InputId inputId, Callable callable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForeachHoverBinding</name>
      <anchorfile>classiv_1_1InputBindingQuery.html</anchorfile>
      <anchor>ad5344780ec08f17da271a6e929b01a3a</anchor>
      <arglist>(InputId inputId, Callable callable)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1InputBindingQuery.html</anchorfile>
      <anchor>ac701e1e8004fd3146cea47c560371b48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputBindingSystem</name>
    <filename>classiv_1_1InputBindingSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>InputBindingSystem</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>a3f406635d29c1978f080600e6128b8bc</anchor>
      <arglist>(SystemContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>a501fb4c38484819403db0dcdbe8f95b0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>a597f22695e45261b7114d234a41e5309</anchor>
      <arglist>(TextDebugView *view) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_listener</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>a66007c162434f4d19b42808f4ccbc377</anchor>
      <arglist>(InputBindingListener *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregister_listener</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>ad28f4b04687601c7b29fb675bb4e4a28</anchor>
      <arglist>(InputBindingListener *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BindKey</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>a3b3fcc44d2e419d52c43391931989925</anchor>
      <arglist>(InputId inputId, Input::Key key, int device_index=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnbindKey</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>ab23c5b1ae7cfd1869ff8fec0bd17b0ab</anchor>
      <arglist>(InputId inputId, Input::Key key, int device_index=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BindHoverKey</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>a66ff8379639358a971e4392f4f480771</anchor>
      <arglist>(InputId inputId, Input::Key key, int device_index=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnbindHoverKey</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>a820ae223c23140f0b364477219e869b9</anchor>
      <arglist>(InputId inputId, Input::Key key, int device_index=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBound</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>a34c247e368a13d0956b51d01b2aa4c58</anchor>
      <arglist>(InputId inputId, Input::Key key, int device_index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsHoverBound</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>a17f4adf24d806293620f5e527f1694c9</anchor>
      <arglist>(InputId inputId, Input::Key key, int device_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForeachHoverBinding</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>af696645e8545d278d4052651904ae302</anchor>
      <arglist>(InputId inputId, Callable callable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForeachBinding</name>
      <anchorfile>classiv_1_1InputBindingSystem.html</anchorfile>
      <anchor>a361b0e97a2fbb31c64f80bff5e6789f2</anchor>
      <arglist>(InputId inputId, Callable callable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputEvent</name>
    <filename>classiv_1_1InputEvent.html</filename>
    <base protection="private">PrivField_Owner&lt; Activator &gt;</base>
    <base protection="private">PrivField_Owner&lt; SumAgg&lt; int &gt; &gt;</base>
    <base protection="protected">iv::PrivValAttr_Owner</base>
    <member kind="function">
      <type></type>
      <name>InputEvent</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>ac489872a8662b4a990d34e20230e0660</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InputEvent</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>ac598361a3b97f698a49dc0756f711728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>a59025c6308ccbeb5dc6cb3495791474b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>a4db0e4dc29fe9bd6bc3d7f2378fb3943</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>ad7b45d01c6b86ca0d61e0b45917d8e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivValAttr&lt; bool &gt;</type>
      <name>attr_eventEnabled</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>a2d5dae84fa7a19ea0336e1efa1a9eddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivValAttr&lt; Activator &gt;</type>
      <name>attr_activation</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>a5e05edf943a47c25b6710bfd8ddc40dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivValAttr&lt; bool &gt;</type>
      <name>attr_hot</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>ab82764203e7e2811f6da71d10dea7c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivField&lt; Activator &gt;</type>
      <name>field_press</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>ad84c0514ff9cc7392c5ef984be361c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivField&lt; Activator &gt;</type>
      <name>field_release</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>a94392f814689d8a46b7276152d5ed670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivField&lt; SumAgg&lt; int &gt; &gt;</type>
      <name>field_duration</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>afb13110c5b0ccda0a74196665414bc9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ie_start_duration</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>afda6b59a768d2c71300b3689330525bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ie_stop_duration</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>ace735782dc4fce17ae87befc69d06c67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ie_trigger</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>a620698c02fde5d5dad86a3c041afb944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ie_start_activation</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>a7848e1351dbe780d557339d0dce2a487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ie_stop_activation</name>
      <anchorfile>classiv_1_1InputEvent.html</anchorfile>
      <anchor>aca64fd48fe1dffc0d93b4694af1ecd73</anchor>
      <arglist>(bool real)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputId</name>
    <filename>classiv_1_1InputId.html</filename>
    <base>RuntimeId&lt; InputId &gt;</base>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1InputId.html</anchorfile>
      <anchor>a16444ce04ffb1015a46b4415f3407298</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static RuntimeIdDictionary</type>
      <name>Dictionary</name>
      <anchorfile>classiv_1_1InputId.html</anchorfile>
      <anchor>a66dd3942addcbf90eeab7cf4712d0600</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputNode</name>
    <filename>classiv_1_1InputNode.html</filename>
    <member kind="function">
      <type></type>
      <name>InputNode</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>ac59f810991aca6558d2026f7caaceeeb</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InputNode</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>aeb63b84a327fb2efccd370867c039150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a599f4f38a2c3d929f95e848d4450d379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a0723173f51abc6c956ae5e92fb2a95a5</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inputEnabled</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>ade877594d1b77a23419b8e5d57ad64b8</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inputEnabled</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a5847364f73572d8b4b9c3af403f626b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quiet</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a157505d110b164ceba544bde99dbdd15</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>quiet</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a521fc34704c722803afaba6034bfe354</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>input_deactivate</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a5ac5be628b679d0e84204b58f0fcb8dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>input_treeRefresh</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a99966b8814f5b1f5f27d17f85d376661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>input_setParent</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a5ba17dc5e6e8346fa19d8644c5b08d8e</anchor>
      <arglist>(InputNode *)</arglist>
    </member>
    <member kind="function">
      <type>InputNode *</type>
      <name>input_getParent</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>ac85284d4e16bae2d035498e214b65a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InputRoot *</type>
      <name>input_getRoot</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a6a66f5e047b109efc12305d2f4f9696e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>input_eachChild</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a862deb29a31c8d55fffc23ddb1308454</anchor>
      <arglist>(std::function&lt; void(InputNode *) &gt; const &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>input_childDisconnect</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a0f2827720d1a472ffcec8f90954d6bcd</anchor>
      <arglist>(InputNode *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>input_trigger_visit</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>af2acf0138a0a726d3335fac7d61bce82</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>input_visit</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>ac9cb0b269ef877a051dcd52143090dc1</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key, bool &amp;press, bool &amp;real, bool &amp;offspace)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a1f638657217c0fd759aad5e3a29b9ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>input_trigger_process</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>ac3e793cd8b86ed74d51aa5f91917ef5b</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_process</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a574779ed645889fe3a7f4e1c30ac1bc8</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key, bool &amp;press, bool &amp;real, bool &amp;offspace)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>InputSystem</name>
      <anchorfile>classiv_1_1InputNode.html</anchorfile>
      <anchor>a6d6fb929d8afbbe0c165564e9b9ab596</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputQuery</name>
    <filename>classiv_1_1InputQuery.html</filename>
    <member kind="function">
      <type></type>
      <name>InputQuery</name>
      <anchorfile>classiv_1_1InputQuery.html</anchorfile>
      <anchor>a408e96a7a4f72615640d9d25dbe72447</anchor>
      <arglist>(iv::Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>iv::Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1InputQuery.html</anchorfile>
      <anchor>acfadd151afcd627d817850f12f8582be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>input_position</name>
      <anchorfile>classiv_1_1InputQuery.html</anchorfile>
      <anchor>a5c4aaa7d50b2e851307447c1ba7f5ecf</anchor>
      <arglist>(Input::Key key, int device_id)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>input_value</name>
      <anchorfile>classiv_1_1InputQuery.html</anchorfile>
      <anchor>a4d528ff7efaf2fd318f9715c93e7e174</anchor>
      <arglist>(Input::Key key, int device_id)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>input_character</name>
      <anchorfile>classiv_1_1InputQuery.html</anchorfile>
      <anchor>a783f442d89404394b58497cec231fe8c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputRoot</name>
    <filename>classiv_1_1InputRoot.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>treeRefresh</name>
      <anchorfile>classiv_1_1InputRoot.html</anchorfile>
      <anchor>a51afc5d17ff20eb092425c3873b9c69c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deactivateSubtree</name>
      <anchorfile>classiv_1_1InputRoot.html</anchorfile>
      <anchor>abf865e1f0f546d4a912f34c8961a5736</anchor>
      <arglist>(InputNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reserve_key</name>
      <anchorfile>classiv_1_1InputRoot.html</anchorfile>
      <anchor>a9b6314befc62c9fb672b93ded91d3692</anchor>
      <arglist>(Input::DeviceKey key, bool reserve)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputSource</name>
    <filename>classiv_1_1InputSource.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int2</type>
      <name>input_position</name>
      <anchorfile>classiv_1_1InputSource.html</anchorfile>
      <anchor>a69a7e042f30650c49e1140d0da4344c7</anchor>
      <arglist>(Input::Key key, int device_id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>input_value</name>
      <anchorfile>classiv_1_1InputSource.html</anchorfile>
      <anchor>a496cac6e816412e1b38047520e755e44</anchor>
      <arglist>(Input::Key key, int device_id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>input_character</name>
      <anchorfile>classiv_1_1InputSource.html</anchorfile>
      <anchor>ae57262f7f14c301e23a99977a5c34f6f</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InputSystem</name>
    <filename>classiv_1_1InputSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>InputSystem</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>abc7ec82811a50f337695191124a2816d</anchor>
      <arglist>(SystemContainer *sc, InputSource *source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputSystem</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>a6ad416ff105027d0c749d61c13d96a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>a01ca916a6ab856288825a4db15ff1a0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>aa0fc57fdfea3511b615361dc2f4bc3f3</anchor>
      <arglist>(TextDebugView *view) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>flushSystem</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>acb6b6ccdc41c04d57b163f734141f3bc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>window_size</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>a004ab4a5db66abd8d433b9b6f89b1dea</anchor>
      <arglist>(int2)</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>window_size</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>a07dce02efaa4e247bd3970c0fb926b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>input_position</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>a47e31a135284909cc9958f7493a1f67f</anchor>
      <arglist>(Input::Key key, int device_id)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>input_value</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>a3211b3299158dec8b167500a84a16101</anchor>
      <arglist>(Input::Key key, int device_id)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>input_character</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>a3506dbda9c4bb7506a1632cf59b4ff85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>node_register</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>a9668cceaef9bfe7bbf8863a0824190cc</anchor>
      <arglist>(InputNode *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>node_unregister</name>
      <anchorfile>classiv_1_1InputSystem.html</anchorfile>
      <anchor>a4c59dd919d9bfac4153826d766175dc5</anchor>
      <arglist>(InputNode *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Instance</name>
    <filename>classiv_1_1Instance.html</filename>
    <member kind="function">
      <type></type>
      <name>Instance</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a8366638a412335810bd0e59b994e6429</anchor>
      <arglist>(const SystemContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Instance</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a5bd61344850ca61ed19eb20af1c68069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>ab2dbe441309277a857a81d1f309bcaf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SystemContainer *</type>
      <name>getSystemContainer</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>ad2e292ada0d23c19e2bbfd63889ee9cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SystemContainer *</type>
      <name>duplicateSystemContainer</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a2f25e96687b4e848bc4085032bf840a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypedSystem *</type>
      <name>getSystem</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a6562c19d880a109245b253d20eeafedb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>frame_id</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>af5b93feff543d04845322f16c1b373a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>instance_name</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a96bcda1148e8011445031d7432ad25e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>instance_parent</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a8520b8b88007bae8875d901724ea80ad</anchor>
      <arglist>(Instance *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>instance_finalize</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a6df3a4bca48843e9b1e256c069371881</anchor>
      <arglist>(std::string const &amp;inst_name, ClientMarker const *root_client)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>client_register</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a8b38be02dbe8c3df7c223a5425a4f64d</anchor>
      <arglist>(ClientMarker const *marker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>client_unregister</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>abd2c2c4aa5098b27fb637c435addf15e</anchor>
      <arglist>(ClientMarker const *marker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>client_log</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>ac94c9d3eceaeb51f11d5cfbaa06dfabe</anchor>
      <arglist>(ClientMarker const *cm, SrcInfo const &amp;info, LogId id, std::string const &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>client_log_enabled</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a2d2247ca619fe2814601543f871deee7</anchor>
      <arglist>(ClientMarker const *cm, LogId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debug_print_clients</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a3ffcfaa6700309e618d5db3db544908f</anchor>
      <arglist>(TextDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>Debug_Parent</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>ae28e6106cd8c3b0bebbc820ac8965a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_set&lt; Instance * &gt; &amp;</type>
      <name>Debug_Children</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a6c216a4b667da4d953ab48cf41a7bd5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ClientMarker *</type>
      <name>Debug_RootClient</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>ac5eede0bb5160999c0cb2d0deba85975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_set&lt; ClientMarker const * &gt; &amp;</type>
      <name>Debug_Clients</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>aef1d24795123dddfb23e84b12ebebce9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Debug_ForeachClient</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>a53d1764ee2493b12f5d6ff8a06d5cf94</anchor>
      <arglist>(std::function&lt; void(TypedClient *) &gt; const &amp;lambda)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>instance_ptr_interface</name>
      <anchorfile>classiv_1_1Instance.html</anchorfile>
      <anchor>aa6c6a66a462448b614c47c35b4b8ee19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::instance_ptr</name>
    <filename>classiv_1_1instance__ptr.html</filename>
    <base>iv::instance_ptr_interface</base>
    <member kind="function">
      <type></type>
      <name>instance_ptr</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>a60aa6fa50010aa21ef0ac1aa411b7d37</anchor>
      <arglist>(Instance *inst=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>instance_ptr</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>a23aee51d10d686f1881278c93d7c9cae</anchor>
      <arglist>(instance_ptr const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~instance_ptr</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>a2b9493e401c3091f387baa516a4ebac0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>instance_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>aa9def79091d5ecb751a04274cdecaa8b</anchor>
      <arglist>(instance_ptr const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>instance_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>ac64869e9c84b80d96a0edb9fa7c65166</anchor>
      <arglist>(Instance *instance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>ab52fe866fce4dec84166d559b5a5b318</anchor>
      <arglist>(instance_ptr const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>af73a127ff99ebb0ae3b7f4c3f88623a4</anchor>
      <arglist>(instance_ptr const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>a95abb4d79d03781ac5cf084e419fd246</anchor>
      <arglist>(instance_ptr const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>a5c5d46155e4960850e85e650482b9e0b</anchor>
      <arglist>(instance_ptr const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>abaee1a5658a38b59fda2cd28d6bc7dfd</anchor>
      <arglist>(instance_ptr const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>adba0650423d05a47448fa690a0b158fc</anchor>
      <arglist>(instance_ptr const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>get</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>a3ccb6e5fce413a6eacd762c979424d86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Instance &amp;</type>
      <name>operator*</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>afef4fe6df38ed2ee4048db41522bfa0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>aedbf359efcd8ba92e02f155cb63a197e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>acc7462132b1f35263b3f0bb7b100659a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classiv_1_1instance__ptr.html</anchorfile>
      <anchor>a1e7b0d6762e4ba27383071f8b5fae2d0</anchor>
      <arglist>(Instance *inst) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::instance_ptr_interface</name>
    <filename>classiv_1_1instance__ptr__interface.html</filename>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classiv_1_1instance__ptr__interface.html</anchorfile>
      <anchor>adb1d42552bab4dea53a1d0063ef6eaef</anchor>
      <arglist>(Instance *inst)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addSelfToSC</name>
      <anchorfile>classiv_1_1instance__ptr__interface.html</anchorfile>
      <anchor>acfd75326de70957c4abc4af5f0caafba</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeSelfFromSC</name>
      <anchorfile>classiv_1_1instance__ptr__interface.html</anchorfile>
      <anchor>abadeb4bc2ca9c083824dd9c8d7133162</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Instance</name>
      <anchorfile>classiv_1_1instance__ptr__interface.html</anchorfile>
      <anchor>aea90763cbe6c91bbcd6e9bf0d66dc500</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::InstanceSystem</name>
    <filename>classiv_1_1InstanceSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>InstanceSystem</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>a7e27224247666fb072d8ec038f75b2ed</anchor>
      <arglist>(SystemContainer *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>af046bc6cdafb810d855cf2a861115b1e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>a6bed6544486fbc25027cb5c0fb95358b</anchor>
      <arglist>(TextDebugView *view) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>flushSystem</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>a95fa1a4c6724874a39d1f5e5c06dca02</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClientLog</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>a5d3702d4bac13bbbcd4a64311024e1da</anchor>
      <arglist>(ClientMarker const *cm, SrcInfo const &amp;info, LogId id, std::string const &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ClientLogEnabled</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>a38ea86a41fc3cfcad5be92646bff1627</anchor>
      <arglist>(ClientMarker const *cm, LogId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SystemLog</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>aef9a3ebe8c7c08b850416524430cb5e3</anchor>
      <arglist>(System const *system, SrcInfo const &amp;info, LogId id, std::string const &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SystemLogEnabled</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>ac1d19880f3da582711ee736f3c25efef</anchor>
      <arglist>(System const *system, LogId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_instance</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>a8a1f4806757de556ca16e9fd4f89858b</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregister_instance</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>abacecb12417f53574f65f50daba548d3</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function">
      <type>volatile_set&lt; DebugInstanceListener * &gt; &amp;</type>
      <name>debug_listeners</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>a4c48a1d538a6c98028d8618d91fd6f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDebugListener</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>a625f75e104b5625907b726922ad5fe48</anchor>
      <arglist>(DebugInstanceListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveDebugListener</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>ac17bf1452ad1212978e0cfeb5ae1ecbf</anchor>
      <arglist>(DebugInstanceListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_set&lt; Instance * &gt; &amp;</type>
      <name>Debug_Instances</name>
      <anchorfile>classiv_1_1InstanceSystem.html</anchorfile>
      <anchor>a1562b6975ca7cb70546dfeba1e8442e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::int2_CompareByX</name>
    <filename>structiv_1_1int2__CompareByX.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1int2__CompareByX.html</anchorfile>
      <anchor>a46a00e51469b6bf5502cdbfe9f8885c1</anchor>
      <arglist>(int2 const &amp;left, int2 const &amp;right) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::int2_CompareByY</name>
    <filename>structiv_1_1int2__CompareByY.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1int2__CompareByY.html</anchorfile>
      <anchor>a48af030bde718c03c085483d43499feb</anchor>
      <arglist>(int2 const &amp;left, int2 const &amp;right) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Interpolator</name>
    <filename>structiv_1_1Interpolator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>Interpolator_float</type>
      <name>Distance</name>
      <anchorfile>structiv_1_1Interpolator.html</anchorfile>
      <anchor>ad476746708ea78b1865de00bb4ce4490</anchor>
      <arglist>(Type const &amp;from, Type const &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Type, Interpolator_float &gt;</type>
      <name>Interpolate</name>
      <anchorfile>structiv_1_1Interpolator.html</anchorfile>
      <anchor>aef7b31c9958f87f28f6ff1fac1c81b6d</anchor>
      <arglist>(Type const &amp;from, Type const &amp;to, Interpolator_float distance) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Interpolator&lt; Float, std::enable_if_t&lt; std::is_floating_point&lt; Float &gt;::value &gt; &gt;</name>
    <filename>structiv_1_1Interpolator_3_01Float_00_01std_1_1enable__if__t_3_01std_1_1is__floating__point_3_01Float_01_4_1_1value_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Interpolator_float</type>
      <name>Distance</name>
      <anchorfile>structiv_1_1Interpolator_3_01Float_00_01std_1_1enable__if__t_3_01std_1_1is__floating__point_3_01Float_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>ad701605c4036eeff20fb4588abf3723f</anchor>
      <arglist>(Float const &amp;from, Float const &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Float, Interpolator_float &gt;</type>
      <name>Interpolate</name>
      <anchorfile>structiv_1_1Interpolator_3_01Float_00_01std_1_1enable__if__t_3_01std_1_1is__floating__point_3_01Float_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>a38d3a39b674c70dc43a6d4ec9ee2c8b7</anchor>
      <arglist>(Float const &amp;from, Float const &amp;to, Interpolator_float distance) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Interpolator&lt; float3 &gt;</name>
    <filename>structiv_1_1Interpolator_3_01float3_01_4.html</filename>
    <member kind="function">
      <type>Interpolator_float</type>
      <name>Distance</name>
      <anchorfile>structiv_1_1Interpolator_3_01float3_01_4.html</anchorfile>
      <anchor>a695baeac181c35c1dfeb3e9a7a6b8d17</anchor>
      <arglist>(float3 const &amp;from, float3 const &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; float3, Interpolator_float &gt;</type>
      <name>Interpolate</name>
      <anchorfile>structiv_1_1Interpolator_3_01float3_01_4.html</anchorfile>
      <anchor>ae9415cb2a4c4732328bd8fcfc5c7b950</anchor>
      <arglist>(float3 const &amp;from, float3 const &amp;to, Interpolator_float distance) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Interpolator&lt; float4x4 &gt;</name>
    <filename>structiv_1_1Interpolator_3_01float4x4_01_4.html</filename>
    <member kind="function">
      <type>Interpolator_float</type>
      <name>Distance</name>
      <anchorfile>structiv_1_1Interpolator_3_01float4x4_01_4.html</anchorfile>
      <anchor>a7946f75e50d6613fbec07bfabc59c611</anchor>
      <arglist>(float4x4 const &amp;from, float4x4 const &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; float4x4, Interpolator_float &gt;</type>
      <name>Interpolate</name>
      <anchorfile>structiv_1_1Interpolator_3_01float4x4_01_4.html</anchorfile>
      <anchor>a19d0ad0586f7765cd57a2b57d238bcd0</anchor>
      <arglist>(float4x4 const &amp;from, float4x4 const &amp;to, Interpolator_float distance) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Interpolator&lt; Int, std::enable_if_t&lt; std::is_integral&lt; Int &gt;::value &gt; &gt;</name>
    <filename>structiv_1_1Interpolator_3_01Int_00_01std_1_1enable__if__t_3_01std_1_1is__integral_3_01Int_01_4_1_1value_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Interpolator_float</type>
      <name>Distance</name>
      <anchorfile>structiv_1_1Interpolator_3_01Int_00_01std_1_1enable__if__t_3_01std_1_1is__integral_3_01Int_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>a48ef84343f6c08b0b8e0ab06737f8ff4</anchor>
      <arglist>(Int const &amp;from, Int const &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Int, Interpolator_float &gt;</type>
      <name>Interpolate</name>
      <anchorfile>structiv_1_1Interpolator_3_01Int_00_01std_1_1enable__if__t_3_01std_1_1is__integral_3_01Int_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>a8b868f5fc0efdc0d5ff2547808679c32</anchor>
      <arglist>(Int const &amp;from, Int const &amp;to, Interpolator_float distance) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Interpolator&lt; std::optional&lt; T &gt; &gt;</name>
    <filename>structiv_1_1Interpolator_3_01std_1_1optional_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Interpolator_float</type>
      <name>Distance</name>
      <anchorfile>structiv_1_1Interpolator_3_01std_1_1optional_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ac2a76aa7a2da834ef62393415f025ab7</anchor>
      <arglist>(std::optional&lt; T &gt; const &amp;from, std::optional&lt; T &gt; const &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::optional&lt; T &gt;, Interpolator_float &gt;</type>
      <name>Interpolate</name>
      <anchorfile>structiv_1_1Interpolator_3_01std_1_1optional_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a0143d6e68b17624d50cdd56caa44774a</anchor>
      <arglist>(std::optional&lt; T &gt; const &amp;from, std::optional&lt; T &gt; const &amp;to, Interpolator_float distance) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Interpolator&lt; std::string &gt;</name>
    <filename>structiv_1_1Interpolator_3_01std_1_1string_01_4.html</filename>
    <member kind="function">
      <type>Interpolator_float</type>
      <name>Distance</name>
      <anchorfile>structiv_1_1Interpolator_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a7e9177e26d55cea4dff86dd603b219fe</anchor>
      <arglist>(std::string const &amp;from, std::string const &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::string, Interpolator_float &gt;</type>
      <name>Interpolate</name>
      <anchorfile>structiv_1_1Interpolator_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a539ca8f488ced9471bba0553da63427a</anchor>
      <arglist>(std::string const &amp;from, std::string const &amp;to, Interpolator_float distance) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::JsonLex</name>
    <filename>classiv_1_1JsonLex.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Token</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Integer</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a6dd6104651118b2a193a76a750f81406</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Double</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a4e97cd2626270ccff435db2f3fbb4b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>String</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961adf4beb416251dda587e12b6125c5df26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Bool</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961af4887946aa0e397671a5bb96e25a2cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Null</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a587e7bcb6727ed6ed5069799ffbe9683</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArrayBegin</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a250dae0eb0079e1ed360ee1c3fe68f24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArrayEnd</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a44deb859a6109c312d295054c7f89e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TableBegin</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a8cbc4c5cef10d0b2511aab70dbad2ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TableEnd</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a9b32451b396fc3ae429153c284f92728</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TableKey</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961ab3e35c37d24752630d891751e6adcb73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Eof</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961af5acac55534e32b644aa6cb13df8e761</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Integer</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a6dd6104651118b2a193a76a750f81406</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Double</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a4e97cd2626270ccff435db2f3fbb4b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>String</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961adf4beb416251dda587e12b6125c5df26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Bool</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961af4887946aa0e397671a5bb96e25a2cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Null</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a587e7bcb6727ed6ed5069799ffbe9683</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArrayBegin</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a250dae0eb0079e1ed360ee1c3fe68f24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArrayEnd</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a44deb859a6109c312d295054c7f89e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TableBegin</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a8cbc4c5cef10d0b2511aab70dbad2ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TableEnd</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961a9b32451b396fc3ae429153c284f92728</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TableKey</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961ab3e35c37d24752630d891751e6adcb73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Eof</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5101e4bc2bc0fab2ed8923de1017a961af5acac55534e32b644aa6cb13df8e761</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonLex</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>afba09e4fd71279ff9ce3e88fb082617d</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a4f2c42c563abdc60dcfd1b0f59a8758f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Lex &amp;</type>
      <name>lex</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a65817548b737f58fdcf862362fcccca0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>ae906917b80541f01ff38ca9155883703</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Failed</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>ab409afc8d66c86ccae54b8507f829408</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LogicFail</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a9b2570ade3459c5004816f4c2927c580</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNext</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a5b1c4d338c2858bf4de0904c0e23eaa3</anchor>
      <arglist>(Token)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>af76cf222d9309d4e14ac2352d4b35365</anchor>
      <arglist>(Token)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>AcceptTableKey</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>acfd22f3d651671a94c3434c327e81741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AcceptInteger</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>aa69a02886390cd7ee57967a266962044</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AcceptDouble</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>aca7b8ec9554f859b43d557fd2b0d246f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>AcceptString</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a3b28f39d31d1ca47ab9a059f68c9afdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AcceptBool</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>aa14a4b1749074f646ced2d4f5442a338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AcceptNull</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a24f8ac0d390985a9865f545202334618</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1JsonLex.html</anchorfile>
      <anchor>a84d68a1551ee051b462f25de1666caaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Key_InputNode</name>
    <filename>classiv_1_1Key__InputNode.html</filename>
    <base>iv::InputNode</base>
    <base>iv::InputEvent</base>
    <member kind="function">
      <type></type>
      <name>Key_InputNode</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>aeedf6c1e5235fdf12f223132a74add5a</anchor>
      <arglist>(Instance *inst, InputId val=InputId())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Key_InputNode</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>a9b1c635a750355acc5ea9c1ada283293</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>ac4c333fa66300c13f2820791067b18fb</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>input_id</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>a970ee055d3515580c62cb1e6ba17a90a</anchor>
      <arglist>(InputId)</arglist>
    </member>
    <member kind="function">
      <type>InputId</type>
      <name>input_id</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>a61a88a32491fdbadb00bb0475a4d151c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fallthrough_enabled</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>ac5f40d71ddcfbbc53809f408b3c1178b</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fallthrough_enabled</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>a0cb272f8cb83bb8841d79dc761655084</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interruptActivation</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>ac24e42217f1708ee050fb666e6f007d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>a59025c6308ccbeb5dc6cb3495791474b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>ada958910790e67c36b8fd22768c7d85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_process</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>affd64efd626b4cd16770593ba5ca6b33</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key, bool &amp;press, bool &amp;real, bool &amp;offspace) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>input_trigger_process</name>
      <anchorfile>classiv_1_1Key__InputNode.html</anchorfile>
      <anchor>adbe0f8dd11480139c49b2dbf9932c129</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Lambda_Connector</name>
    <filename>classiv_1_1Lambda__Connector.html</filename>
    <base protection="private">iv::AnimConnector</base>
    <member kind="function">
      <type></type>
      <name>Lambda_Connector</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>a8b6e1d61848e32f20e8899aafbe24195</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lambda_Connector</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>ad4cef9702bf5dae90ca86aae947947e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_eachChild</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>a7a50e386863d4a81c928b93c2f66ec58</anchor>
      <arglist>(std::function&lt; void(AnimNodeI *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_childDisconnect</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>aa7eec2b32df8a6230b1dc4f97cfb0579</anchor>
      <arglist>(AnimNodeI *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_eachParent</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>a13debf5335ec80f9c6678a0b2ae38dee</anchor>
      <arglist>(std::function&lt; void(AnimNodeI *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_parentDisconnect</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>a2eaa89ad189611a54498ad081e286aaa</anchor>
      <arglist>(AnimNodeI *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdatePass_Down</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>a824e5a3824eeedbe8fd65511796399ec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdatePass_Up</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>aabdbdfcb3e0a07433d6c9ec91670c82f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Lambda_Connector *</type>
      <name>AddParent</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>a38a96301c6ed00420859e794a89de895</anchor>
      <arglist>(AnimNodeI *node)</arglist>
    </member>
    <member kind="function">
      <type>Lambda_Connector *</type>
      <name>AddChild</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>af17626a64d1af2b1ff2bfe8c27f56f9b</anchor>
      <arglist>(AnimNodeI *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Retargeting</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>a6afa83591384ad888a29782848740c25</anchor>
      <arglist>(std::function&lt; void(bool warping) &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Retarget</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>a86a49f995bb74a4458dae9c0a532fbfd</anchor>
      <arglist>(bool warping=false)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>a3347f0693f158febd408efb3b1041cdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Lambda__Connector.html</anchorfile>
      <anchor>a082d489f47e746d9f81ef33b61aa918b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LambdaLogTrace</name>
    <filename>classiv_1_1LambdaLogTrace.html</filename>
    <base>iv::LogTrace</base>
    <member kind="function">
      <type></type>
      <name>LambdaLogTrace</name>
      <anchorfile>classiv_1_1LambdaLogTrace.html</anchorfile>
      <anchor>aa9814d2f746f4296076ca2d628395982</anchor>
      <arglist>(std::function&lt; void(std::ostream &amp;) &gt; const &amp;f)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTraceLine</name>
      <anchorfile>classiv_1_1LambdaLogTrace.html</anchorfile>
      <anchor>a7f6b8ec6cde28eb91fe247d54dd4b12f</anchor>
      <arglist>(std::ostream &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::XcfInfo::Layer</name>
    <filename>structiv_1_1XcfInfo_1_1Layer.html</filename>
    <member kind="function">
      <type></type>
      <name>Layer</name>
      <anchorfile>structiv_1_1XcfInfo_1_1Layer.html</anchorfile>
      <anchor>acd22b041eefbee9e85fde9671ebffe48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>float2</type>
      <name>size</name>
      <anchorfile>structiv_1_1XcfInfo_1_1Layer.html</anchorfile>
      <anchor>ae9cb55c00f768e801c23708501fc4c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>global_left</name>
      <anchorfile>structiv_1_1XcfInfo_1_1Layer.html</anchorfile>
      <anchor>ad879530df6a0b760d73ea72c1ccae26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>global_right</name>
      <anchorfile>structiv_1_1XcfInfo_1_1Layer.html</anchorfile>
      <anchor>a844a726005265e0bd3fae0ce3688719b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>global_top</name>
      <anchorfile>structiv_1_1XcfInfo_1_1Layer.html</anchorfile>
      <anchor>a1af4d7dec8ceb1c7e2800f9ac7929f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>global_bottom</name>
      <anchorfile>structiv_1_1XcfInfo_1_1Layer.html</anchorfile>
      <anchor>ad96493063a95bab7db989c045b727a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>local_left</name>
      <anchorfile>structiv_1_1XcfInfo_1_1Layer.html</anchorfile>
      <anchor>adc8b5e6f8047b7edfcf7a0be06229dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>local_right</name>
      <anchorfile>structiv_1_1XcfInfo_1_1Layer.html</anchorfile>
      <anchor>ac230522210592d9b65d57520da23e32b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>local_top</name>
      <anchorfile>structiv_1_1XcfInfo_1_1Layer.html</anchorfile>
      <anchor>a9ae302019e995bf23af5134eb0f5a4f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>local_bottom</name>
      <anchorfile>structiv_1_1XcfInfo_1_1Layer.html</anchorfile>
      <anchor>a7f19fad58c41a21cf9f4c4af71f20aaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Lex</name>
    <filename>classiv_1_1Lex.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Token</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Keyword</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a54bcde5ff831e16c10bc870fbdf9611a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Operator</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9ae654c4ba3fbc468f34c0134144a3f21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Newline</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a7078209a5af9ebc09b49cc11d2309323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Eof</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a330bfdc6145e35eb22b9240f675f2c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>String</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a48e3c5515ba6f297b1fa11b8d718d6bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Name</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a6172b5f5d1565f74a2307c85e9b47842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Integer</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a2649985135e41820bb67391db199b16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Double</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a5614e0cc1e5735c9304a5cf1152e9cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Keyword</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a54bcde5ff831e16c10bc870fbdf9611a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Operator</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9ae654c4ba3fbc468f34c0134144a3f21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Newline</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a7078209a5af9ebc09b49cc11d2309323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Eof</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a330bfdc6145e35eb22b9240f675f2c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>String</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a48e3c5515ba6f297b1fa11b8d718d6bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Name</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a6172b5f5d1565f74a2307c85e9b47842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Integer</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a2649985135e41820bb67391db199b16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Double</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af03ee8eef7d6fb8327389c0bb5ba38f9a5614e0cc1e5735c9304a5cf1152e9cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lex</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a63ccbd98a52494d31bce04fe4e0a99f0</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a97a0df53017768a9fb4b6057296fbdc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefineKeyword</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a2468ae04857fb8fb3ce48e9fb068f262</anchor>
      <arglist>(const char *keyword)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefineOperator</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a9305ca1ff926046ba51bbe2ecbc175de</anchor>
      <arglist>(const char *op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>numbers_enabled</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a67490314c90e9622f5229c19d240be27</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a4198600c63e79822fa6eb200e8ade39b</anchor>
      <arglist>(std::istream &amp;in, bool single_line=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Close</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a3a32200a51214c792a701366973ea966</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DisableNewlineSkipping</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a9908d50427654982166625477bf5e04c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableNewlineSkipping</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a9e1385004dbb4c2b43342568eef509a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNext</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>aa626fcab55b3283bb8fff4b5e517b115</anchor>
      <arglist>(Token token)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNextKeyword</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a8b5276fc982f42c5be4b843e6f83eb00</anchor>
      <arglist>(const char *keyword)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNextOperator</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a36375dbdaa1a6cc276139812f54afafa</anchor>
      <arglist>(const char *op)</arglist>
    </member>
    <member kind="function">
      <type>Token</type>
      <name>GetNextToken</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>acde10a2fedc29c176d2b9b407f36eab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetNextTokenValue</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a4b7c728781c96ebbe8be4e3d19a19988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Accept</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>ac5138e2f0f7d90cd2c509ec1b8686b0a</anchor>
      <arglist>(Token token)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AcceptKeyword</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>ac5c3656ab64c29c15e3bf28d310aa3af</anchor>
      <arglist>(const char *keyword)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AcceptOperator</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>afe3850158e0d5ab07bfa6bd3ec851173</anchor>
      <arglist>(const char *op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AcceptFail</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a5682ceb123e77edc48e0c03fd8680fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>AcceptString</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>aa11456cc9f1ff4626422f54bd57d528e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>AcceptName</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a2a49cc3c0216aed148abbae8ed8d436c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AcceptInteger</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>aadf8ad232481c916e291d925da22fa94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AcceptDouble</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a0eee318ef8e021cdc430bdfb0565994f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Recover</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a1a89eddbc851bc6a329ba19bcb9e6d4a</anchor>
      <arglist>(Token token)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RecoverKeyword</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a56d050af35338bd691274945b90433bf</anchor>
      <arglist>(const char *keyword)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RecoverOperator</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a411be1e5ec206dfcfc5b6ff5d000e601</anchor>
      <arglist>(const char *op)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetLine</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a63e51fa0d59bb9f5d4fde70913337584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetColumn</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>af12033c3855e5be4dd8f5458fb25c01b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LogicFail</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>ac101fc39efd8d184e7c7ad6e7f4cb3d9</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParserFail</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>acf35a8d5711fc2541f1dce858f5cd2b2</anchor>
      <arglist>(const char *prefix=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Failed</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a3bddd3c1f4105333373c4624ed3b6929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Lex.html</anchorfile>
      <anchor>a4e9a79018f3b1cda193d5189ac67adaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Lex_LogTrace</name>
    <filename>classiv_1_1Lex__LogTrace.html</filename>
    <base>iv::LogTrace</base>
    <member kind="function">
      <type></type>
      <name>Lex_LogTrace</name>
      <anchorfile>classiv_1_1Lex__LogTrace.html</anchorfile>
      <anchor>a330f5fd0743713090403375867a96e5b</anchor>
      <arglist>(Lex const &amp;lex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTraceLine</name>
      <anchorfile>classiv_1_1Lex__LogTrace.html</anchorfile>
      <anchor>affd3cc7a5b3e2e6a2f7a544908b0b451</anchor>
      <arglist>(std::ostream &amp;out) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::LinearTransform</name>
    <filename>structiv_1_1LinearTransform.html</filename>
    <member kind="function">
      <type>Anim_float</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1LinearTransform.html</anchorfile>
      <anchor>adf94022dd88707d4fe7c68d53456b746</anchor>
      <arglist>(Anim_float x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::FontMesh::LineState</name>
    <filename>structiv_1_1FontMesh_1_1LineState.html</filename>
    <member kind="function">
      <type></type>
      <name>LineState</name>
      <anchorfile>structiv_1_1FontMesh_1_1LineState.html</anchorfile>
      <anchor>acc8a449c0c422106b68924cb5ca83154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structiv_1_1FontMesh_1_1LineState.html</anchorfile>
      <anchor>ace508ce1bfe7828c512e6fc3ad3ad401</anchor>
      <arglist>(LineState const &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>float2</type>
      <name>basepoint</name>
      <anchorfile>structiv_1_1FontMesh_1_1LineState.html</anchorfile>
      <anchor>a26d21e46e1c68939276d0e813dd941ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>preadvance</name>
      <anchorfile>structiv_1_1FontMesh_1_1LineState.html</anchorfile>
      <anchor>ad083c04275397d614942ae3bbdcde08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>baseline_fixed</name>
      <anchorfile>structiv_1_1FontMesh_1_1LineState.html</anchorfile>
      <anchor>a990bb1621037ba65b66366e669d8ac5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>ascender</name>
      <anchorfile>structiv_1_1FontMesh_1_1LineState.html</anchorfile>
      <anchor>a7147b39705a3077756655a4714aa9bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>descender</name>
      <anchorfile>structiv_1_1FontMesh_1_1LineState.html</anchorfile>
      <anchor>a6fb4bb4c15220907be30e3df6912aab3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Local_AEP</name>
    <filename>classiv_1_1Local__AEP.html</filename>
    <base>iv::AttributeEventProcessor</base>
    <member kind="function">
      <type></type>
      <name>Local_AEP</name>
      <anchorfile>classiv_1_1Local__AEP.html</anchorfile>
      <anchor>a73a97fa4cdbaec874b5b32377093b81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Local_AEP</name>
      <anchorfile>classiv_1_1Local__AEP.html</anchorfile>
      <anchor>a42c7d0520b71317182193e8251d52c9d</anchor>
      <arglist>(Local_AEP const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Local_AEP &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1Local__AEP.html</anchorfile>
      <anchor>af4a2cc53351b405be84a9ca925888598</anchor>
      <arglist>(Local_AEP const &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AttributeEvent</name>
      <anchorfile>classiv_1_1Local__AEP.html</anchorfile>
      <anchor>af7721ec131fad305570ea8bbbbe4ed8e</anchor>
      <arglist>(AttributeEventProcessor::Event event, Attribute *attr, AttributeListener *listener) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::FontMesh::Location</name>
    <filename>structiv_1_1FontMesh_1_1Location.html</filename>
    <member kind="function">
      <type></type>
      <name>Location</name>
      <anchorfile>structiv_1_1FontMesh_1_1Location.html</anchorfile>
      <anchor>a2c41d082719c558fe36d4e8d401093d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structiv_1_1FontMesh_1_1Location.html</anchorfile>
      <anchor>a89d3597f29f79d2cfd254244f441c6e0</anchor>
      <arglist>(Location const &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>float2</type>
      <name>size</name>
      <anchorfile>structiv_1_1FontMesh_1_1Location.html</anchorfile>
      <anchor>a2ca873d93b049116ed7caf322d2d815b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>line_spacing</name>
      <anchorfile>structiv_1_1FontMesh_1_1Location.html</anchorfile>
      <anchor>a654e0168192fde5c17daefbfe8db5db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LineState</type>
      <name>line_state</name>
      <anchorfile>structiv_1_1FontMesh_1_1Location.html</anchorfile>
      <anchor>a12a599a32f2dd340014474249d6b9df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>skip_characters</name>
      <anchorfile>structiv_1_1FontMesh_1_1Location.html</anchorfile>
      <anchor>aca77a6189d1b9d33965cd17c99edb383</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LogId</name>
    <filename>classiv_1_1LogId.html</filename>
    <base>RuntimeId&lt; LogId &gt;</base>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1LogId.html</anchorfile>
      <anchor>a346850a6029ca03727f76d9aae5eea00</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static RuntimeIdDictionary</type>
      <name>Dictionary</name>
      <anchorfile>classiv_1_1LogId.html</anchorfile>
      <anchor>a4fef62dec9f4167a920ff3a1cd247518</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LogTrace</name>
    <filename>classiv_1_1LogTrace.html</filename>
    <member kind="function">
      <type></type>
      <name>LogTrace</name>
      <anchorfile>classiv_1_1LogTrace.html</anchorfile>
      <anchor>a29ac57630873f40978d615e601a7c1b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogTrace</name>
      <anchorfile>classiv_1_1LogTrace.html</anchorfile>
      <anchor>a5448686c291fcd39f85cf69d829c6a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogTrace</name>
      <anchorfile>classiv_1_1LogTrace.html</anchorfile>
      <anchor>ab77f6120a188db6ba2693b26061724ea</anchor>
      <arglist>(LogTrace const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>LogTrace &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1LogTrace.html</anchorfile>
      <anchor>a475bfbf64565fce239b852bd5a18dc24</anchor>
      <arglist>(LogTrace const &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>PrintTrace</name>
      <anchorfile>classiv_1_1LogTrace.html</anchorfile>
      <anchor>adb216b86c367a394376340af9e4b28cc</anchor>
      <arglist>(std::ostream &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>GetChangeCounter</name>
      <anchorfile>classiv_1_1LogTrace.html</anchorfile>
      <anchor>a2dfdb37f27cbcca05bc36d762fb5719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>PrintTraceLine</name>
      <anchorfile>classiv_1_1LogTrace.html</anchorfile>
      <anchor>af1f7aca32bfc732c79e278f364c1d49a</anchor>
      <arglist>(std::ostream &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LumaButton</name>
    <filename>classiv_1_1LumaButton.html</filename>
    <base>iv::PickableSlot</base>
    <base>iv::LumaListener</base>
    <base>iv::TranslucentElem</base>
    <member kind="function">
      <type></type>
      <name>LumaButton</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a649963318f52bd87d484d7a2cf754d64</anchor>
      <arglist>(Instance *inst, LumaStyleId style=LumaStyleId())</arglist>
    </member>
    <member kind="function">
      <type>LumaButton *</type>
      <name>sufraceNeutralColor</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>aa588ce4a1b774305373fb3db64da40dc</anchor>
      <arglist>(std::optional&lt; float4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>LumaButton *</type>
      <name>overlayNeutralColor</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>aa7f0102c89abe7db53a5e6e34617e4cb</anchor>
      <arglist>(std::optional&lt; float4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>LumaButton *</type>
      <name>resizeStage</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a6651dee132732408f5752f95739f9502</anchor>
      <arglist>(FlatShader::ResizeStage)</arglist>
    </member>
    <member kind="function">
      <type>LumaButton *</type>
      <name>surface</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a16408f7cf2bb5debc49ab45201638739</anchor>
      <arglist>(ResourcePath)</arglist>
    </member>
    <member kind="function">
      <type>LumaButton *</type>
      <name>overlay</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>aa24c25277126443565c4a45cfcdc659b</anchor>
      <arglist>(ResourcePath)</arglist>
    </member>
    <member kind="function">
      <type>LumaButton *</type>
      <name>hot</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a4f9decc1e01257eef85995e3d4e5d118</anchor>
      <arglist>(ResourcePath)</arglist>
    </member>
    <member kind="function">
      <type>LumaButton *</type>
      <name>preblend</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a769d675a5aba1a6ed685d63a639f8d07</anchor>
      <arglist>(float4 val)</arglist>
    </member>
    <member kind="function">
      <type>LumaButton *</type>
      <name>translucent</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a82c34e84877e823c83c1168cee3d6ebb</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a504d64debea332b77c22723b526fc96d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float4 &gt; &gt;</type>
      <name>attr_sufraceNeutralColor</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a03bc63b2ab9531b9040e081c078b1cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float4 &gt; &gt;</type>
      <name>attr_overlayNeutralColor</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a657647d73628d5f50decae4af86c3e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; FlatShader::ResizeStage &gt;</type>
      <name>attr_resizeStage</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>ad4119db7edd5e248f2334070ab405ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; ResourcePath &gt;</type>
      <name>attr_surface</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a393d346cfaa2d2cf73bbefbe88fad1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; ResourcePath &gt;</type>
      <name>attr_overlay</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a4adee11f6f728f80c3094b5489a4244a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; ResourcePath &gt;</type>
      <name>attr_hot</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a9a4f4a8911c038fc95e0dda7e378da7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const constexpr int</type>
      <name>DefaultShadowHeightPx</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a8d8944a1edc0133c156cddfac1fe3fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>aa2bd346e2ce7fd1d3f1d521311d9a3dc</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ColorsChanged</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a3f83e2329821704f49df35af1a385527</anchor>
      <arglist>(float4 surface, float4 on_surface)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CallColorsChanged</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a9747d3a4ba59c00eeee39195b0d25a75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>LumaStyleChanged</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>a73e90658fbb9d6bce9e37eb84b9c5c01</anchor>
      <arglist>(LumaStyle const &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Slot</type>
      <name>surface_slot</name>
      <anchorfile>classiv_1_1LumaButton.html</anchorfile>
      <anchor>ade9310f982db739ee09a649caf03d7c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LumaFrame</name>
    <filename>classiv_1_1LumaFrame.html</filename>
    <base>iv::ProtectedSlot</base>
    <base protection="protected">iv::PrivValAttr_Owner</base>
    <member kind="function">
      <type></type>
      <name>LumaFrame</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>aadd4ee2d52fca6a9b9fdc6dc715672aa</anchor>
      <arglist>(iv::Instance *)</arglist>
    </member>
    <member kind="function">
      <type>LumaFrame *</type>
      <name>frame</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>a9a041583438dbd8e44637325c603f0cc</anchor>
      <arglist>(iv::ResourcePath)</arglist>
    </member>
    <member kind="function">
      <type>LumaFrame *</type>
      <name>frameWidth</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>a57b292a92f9fc69644194f5dff4fc93a</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <type>LumaFrame *</type>
      <name>open</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>a98b2c01ca85f94e35f2279e1f92fde73</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="variable">
      <type>iv::ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>a5ae06e18686d512d99886955266adf81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iv::DirtyAttr&lt; iv::ResourcePath &gt;</type>
      <name>attr_frame</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>a1844efff37fe6dd5b29142042bd9f8a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iv::DirtyAttr&lt; float &gt;</type>
      <name>attr_frameWidth</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>a464fc74f43bd34a4f5112c4a8b3ec63c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iv::DirtyAttr&lt; bool &gt;</type>
      <name>attr_open</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>a96d7abc0268d082f03c1535d7df8af6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iv::PrivValAttr&lt; iv::SlotChild * &gt;</type>
      <name>child</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>a47dc756ba19338f40464f7c2aac434ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>af83bd72c49937d71529d6a47b98a2a9d</anchor>
      <arglist>(iv::ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrivValAttr_Modified</name>
      <anchorfile>classiv_1_1LumaFrame.html</anchorfile>
      <anchor>ae707420708526d37dfa552898029179f</anchor>
      <arglist>(Attribute *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LumaListener</name>
    <filename>classiv_1_1LumaListener.html</filename>
    <member kind="function">
      <type></type>
      <name>LumaListener</name>
      <anchorfile>classiv_1_1LumaListener.html</anchorfile>
      <anchor>aa16b623cfe13c8fbe66da9e7f147086f</anchor>
      <arglist>(Instance *inst, LumaStyleId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LumaListener</name>
      <anchorfile>classiv_1_1LumaListener.html</anchorfile>
      <anchor>ab02275888ecea7720a70fa8ecac704bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1LumaListener.html</anchorfile>
      <anchor>a243dfb50bc28de00f6168ec792bb1f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LumaStyleId</type>
      <name>style_id</name>
      <anchorfile>classiv_1_1LumaListener.html</anchorfile>
      <anchor>a52c80ecb2ed9c70617e3a7fc9b9f08fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LumaStyle &amp;</type>
      <name>style</name>
      <anchorfile>classiv_1_1LumaListener.html</anchorfile>
      <anchor>ad22b3b44d111b8fa72094cad69ea962a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>LumaStyleChanged</name>
      <anchorfile>classiv_1_1LumaListener.html</anchorfile>
      <anchor>a6065eae4bb99b3c097d245d5a2a5863e</anchor>
      <arglist>(LumaStyle const &amp;)=0</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1LumaListener.html</anchorfile>
      <anchor>a54e45e2a4949c5577bfeaa2757a04b39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LumaScroller</name>
    <filename>classiv_1_1LumaScroller.html</filename>
    <base>iv::ProtectedSlot</base>
    <base protection="protected">iv::PrivValAttr_Owner</base>
    <member kind="function">
      <type></type>
      <name>LumaScroller</name>
      <anchorfile>classiv_1_1LumaScroller.html</anchorfile>
      <anchor>afb492f92854f7007bb7213ddbfe3eff4</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild</name>
      <anchorfile>classiv_1_1LumaScroller.html</anchorfile>
      <anchor>a6bfe0d14de3dbfbb0d5b647190be80a9</anchor>
      <arglist>(CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1LumaScroller.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1LumaScroller.html</anchorfile>
      <anchor>a2046a7e00f6e1464243b319381d1f860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivValAttr&lt; SlotChild * &gt;</type>
      <name>child</name>
      <anchorfile>classiv_1_1LumaScroller.html</anchorfile>
      <anchor>aee29e3144d8c97061c1d8726db7b13d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1LumaScroller.html</anchorfile>
      <anchor>ae4bc1ad9e4a350ec2a76b3a24eda899e</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrivValAttr_Modified</name>
      <anchorfile>classiv_1_1LumaScroller.html</anchorfile>
      <anchor>aaa54191a6ce4a150212a3ef14fa659f9</anchor>
      <arglist>(Attribute *) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::LumaStyle</name>
    <filename>structiv_1_1LumaStyle.html</filename>
    <member kind="function">
      <type></type>
      <name>LumaStyle</name>
      <anchorfile>structiv_1_1LumaStyle.html</anchorfile>
      <anchor>ad15b50d1e8a0623d5600763ff0dfbaf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>iv::float4</type>
      <name>surface</name>
      <anchorfile>structiv_1_1LumaStyle.html</anchorfile>
      <anchor>a8d0027c843ac0ef907493bee9663680f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iv::float4</type>
      <name>highlight</name>
      <anchorfile>structiv_1_1LumaStyle.html</anchorfile>
      <anchor>aea0dd45e4cd6fae0d47fb3c2eb028755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iv::float4</type>
      <name>error</name>
      <anchorfile>structiv_1_1LumaStyle.html</anchorfile>
      <anchor>a4229062b4114b1a83eadb9025de3fae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iv::float4</type>
      <name>on_surface</name>
      <anchorfile>structiv_1_1LumaStyle.html</anchorfile>
      <anchor>a804e8fbb55d6edcbb21eb99d81df1f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iv::float4</type>
      <name>on_highlight</name>
      <anchorfile>structiv_1_1LumaStyle.html</anchorfile>
      <anchor>a0e7a053f0ab802771159130266565c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iv::float4</type>
      <name>on_error</name>
      <anchorfile>structiv_1_1LumaStyle.html</anchorfile>
      <anchor>ab60653b9211deb4039e424b9dc5efe3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ResourcePath</type>
      <name>font_normal</name>
      <anchorfile>structiv_1_1LumaStyle.html</anchorfile>
      <anchor>ab7ffe80f3434989f20a21d4197d642fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ResourcePath</type>
      <name>font_monospace</name>
      <anchorfile>structiv_1_1LumaStyle.html</anchorfile>
      <anchor>af0d90823d645b0f7dbbcec00d87fd483</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LumaStyleId</name>
    <filename>classiv_1_1LumaStyleId.html</filename>
    <base>RuntimeId&lt; LumaStyleId &gt;</base>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1LumaStyleId.html</anchorfile>
      <anchor>a9aac4f373bdde611aced2cc796e76f2c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static iv::RuntimeIdDictionary</type>
      <name>Dictionary</name>
      <anchorfile>classiv_1_1LumaStyleId.html</anchorfile>
      <anchor>a54c05625138d261d9dd645be534ab5c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LumaStyler</name>
    <filename>classiv_1_1LumaStyler.html</filename>
    <member kind="function">
      <type></type>
      <name>LumaStyler</name>
      <anchorfile>classiv_1_1LumaStyler.html</anchorfile>
      <anchor>a44014ea183e2be3b1d9a1d4d392c9428</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1LumaStyler.html</anchorfile>
      <anchor>abc76e057716228e8fa21d6fbca97fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>current_style</name>
      <anchorfile>classiv_1_1LumaStyler.html</anchorfile>
      <anchor>a1016ec0ba7634ce9f647164e9fcd744c</anchor>
      <arglist>(LumaStyleId)</arglist>
    </member>
    <member kind="function">
      <type>LumaStyleId</type>
      <name>current_style</name>
      <anchorfile>classiv_1_1LumaStyler.html</anchorfile>
      <anchor>ad0c3526f3ee032ef557403c1e7e0baba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>style</name>
      <anchorfile>classiv_1_1LumaStyler.html</anchorfile>
      <anchor>aac3b64d93e4a3a7cf5d342898e858b29</anchor>
      <arglist>(LumaStyleId, LumaStyle const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const LumaStyle &amp;</type>
      <name>style</name>
      <anchorfile>classiv_1_1LumaStyler.html</anchorfile>
      <anchor>a54e535770589081b59be53db3a562dfa</anchor>
      <arglist>(LumaStyleId) const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1LumaStyler.html</anchorfile>
      <anchor>a2f7b4b942f69b5c21723fa6dbdb23b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LumaSystem</name>
    <filename>classiv_1_1LumaSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>LumaSystem</name>
      <anchorfile>classiv_1_1LumaSystem.html</anchorfile>
      <anchor>aa272c166d2de5970a972e601033b679e</anchor>
      <arglist>(SystemContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1LumaSystem.html</anchorfile>
      <anchor>a0a122e761951f24564d1110c6abfc468</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>current_style</name>
      <anchorfile>classiv_1_1LumaSystem.html</anchorfile>
      <anchor>ad07f7edc90da959f7354ec69f0066ec0</anchor>
      <arglist>(LumaStyleId)</arglist>
    </member>
    <member kind="function">
      <type>LumaStyleId</type>
      <name>current_style</name>
      <anchorfile>classiv_1_1LumaSystem.html</anchorfile>
      <anchor>ae1c42f26712560e0324c01ecb4093780</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>style</name>
      <anchorfile>classiv_1_1LumaSystem.html</anchorfile>
      <anchor>a542f5f891f111821fc4f138f6a31e621</anchor>
      <arglist>(LumaStyleId, LumaStyle const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const LumaStyle &amp;</type>
      <name>style</name>
      <anchorfile>classiv_1_1LumaSystem.html</anchorfile>
      <anchor>a55d34396ea91310f85a2038f8adc7fda</anchor>
      <arglist>(LumaStyleId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddListener</name>
      <anchorfile>classiv_1_1LumaSystem.html</anchorfile>
      <anchor>a19b442cd472ffc893a31cc0a2efe7dae</anchor>
      <arglist>(LumaListener *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveListener</name>
      <anchorfile>classiv_1_1LumaSystem.html</anchorfile>
      <anchor>a24ec443db88a7156ac0c049767b74142</anchor>
      <arglist>(LumaListener *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::LumaText</name>
    <filename>classiv_1_1LumaText.html</filename>
    <base>iv::Text</base>
    <base>iv::LumaListener</base>
    <member kind="function">
      <type></type>
      <name>LumaText</name>
      <anchorfile>classiv_1_1LumaText.html</anchorfile>
      <anchor>a843ac811d11ecc66c45746ce4fed8ae4</anchor>
      <arglist>(Instance *inst, LumaStyleId style_id=LumaStyleId(), bool monospace=false)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1LumaText.html</anchorfile>
      <anchor>a9a1264c09444ee37c69f761d17e0956b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>LumaStyleChanged</name>
      <anchorfile>classiv_1_1LumaText.html</anchorfile>
      <anchor>ad3ef7ddbb206b43047ce99d8bf253397</anchor>
      <arglist>(LumaStyle const &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Mesh</name>
    <filename>classiv_1_1Mesh.html</filename>
    <member kind="function">
      <type></type>
      <name>Mesh</name>
      <anchorfile>classiv_1_1Mesh.html</anchorfile>
      <anchor>a1c439411149d6da85ce6ad18354e6edc</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Mesh.html</anchorfile>
      <anchor>a74fd9bc92efa9d5eb5d326d35a74c928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlMesh *</type>
      <name>gl_mesh</name>
      <anchorfile>classiv_1_1Mesh.html</anchorfile>
      <anchor>a638571976b773e646669d777977d9a96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GlMesh *</type>
      <name>gl_mesh</name>
      <anchorfile>classiv_1_1Mesh.html</anchorfile>
      <anchor>a3a4dc7e47097aa2d2a100670937cb2ae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Mesh_Resource</name>
    <filename>classiv_1_1Mesh__Resource.html</filename>
    <base>SingularResource&lt; Mesh &gt;</base>
    <member kind="function">
      <type></type>
      <name>Mesh_Resource</name>
      <anchorfile>classiv_1_1Mesh__Resource.html</anchorfile>
      <anchor>a793c59304cf1a97938d3017121c66aae</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Mesh__Resource.html</anchorfile>
      <anchor>a8e67bf0b002a6c576a5d0ab83b072841</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Texture::Metadata</name>
    <filename>structiv_1_1Texture_1_1Metadata.html</filename>
    <member kind="function">
      <type></type>
      <name>Metadata</name>
      <anchorfile>structiv_1_1Texture_1_1Metadata.html</anchorfile>
      <anchor>a75e2142f260586fee3fe265d33a8cd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int2</type>
      <name>size</name>
      <anchorfile>structiv_1_1Texture_1_1Metadata.html</anchorfile>
      <anchor>af9c17e4c0bdaf753abbf0b37c3527971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>density</name>
      <anchorfile>structiv_1_1Texture_1_1Metadata.html</anchorfile>
      <anchor>aecd9943036f2248b35544bfbd5b28d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Filtering</type>
      <name>filtering</name>
      <anchorfile>structiv_1_1Texture_1_1Metadata.html</anchorfile>
      <anchor>a97831e216f5faa878bc29f2c970f4fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PixelFormat</type>
      <name>format</name>
      <anchorfile>structiv_1_1Texture_1_1Metadata.html</anchorfile>
      <anchor>a8e1c94c285a94f165a1af70afe0285ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ColorSpace</type>
      <name>color_space</name>
      <anchorfile>structiv_1_1Texture_1_1Metadata.html</anchorfile>
      <anchor>aad4fe6ec71d27d65113df71f1cba50a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>msdf_pixelRange</name>
      <anchorfile>structiv_1_1Texture_1_1Metadata.html</anchorfile>
      <anchor>a2925d10ce7d303059a288deb904c70ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hitmap</name>
      <anchorfile>structiv_1_1Texture_1_1Metadata.html</anchorfile>
      <anchor>a7f46a4a4239b188d2dcc2f7e3439b92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>instant_loading</name>
      <anchorfile>structiv_1_1Texture_1_1Metadata.html</anchorfile>
      <anchor>aa64fc0905891a1025271e8df62c4d3bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::MulAgg</name>
    <filename>classiv_1_1MulAgg.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MulAgg</name>
      <anchorfile>classiv_1_1MulAgg.html</anchorfile>
      <anchor>a11bd7b43d24f6f24781dd8c454336d5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MulAgg</name>
      <anchorfile>classiv_1_1MulAgg.html</anchorfile>
      <anchor>ad1ecd07ae31f9e4bc21c310c41fbad14</anchor>
      <arglist>(Float aggregated, int size)</arglist>
    </member>
    <member kind="function">
      <type>MulAgg&lt; Float &gt;</type>
      <name>Insert</name>
      <anchorfile>classiv_1_1MulAgg.html</anchorfile>
      <anchor>a1922a4921e530456cb5bf15547872ef4</anchor>
      <arglist>(Float value) const</arglist>
    </member>
    <member kind="function">
      <type>MulAgg&lt; Float &gt;</type>
      <name>Remove</name>
      <anchorfile>classiv_1_1MulAgg.html</anchorfile>
      <anchor>a0f8546e7193da0e53b6f7e151be45484</anchor>
      <arglist>(Float value) const</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>Aggregated</name>
      <anchorfile>classiv_1_1MulAgg.html</anchorfile>
      <anchor>ab3c0531fcdea1fdbf1fb75847b3a5398</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classiv_1_1MulAgg.html</anchorfile>
      <anchor>a663975b3d5b3f03ba587fbce63331a31</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::multiline_ostream</name>
    <filename>classiv_1_1multiline__ostream.html</filename>
    <member kind="function">
      <type></type>
      <name>multiline_ostream</name>
      <anchorfile>classiv_1_1multiline__ostream.html</anchorfile>
      <anchor>a0f7efd9d7a17714b7db72de712c7e7f8</anchor>
      <arglist>(std::ostream *out)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~multiline_ostream</name>
      <anchorfile>classiv_1_1multiline__ostream.html</anchorfile>
      <anchor>ae89f59bcd5df75eb6b9c97d6af62706e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiline_begin</name>
      <anchorfile>classiv_1_1multiline__ostream.html</anchorfile>
      <anchor>ae9a4052d362808de0230cf457619f438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiline_end</name>
      <anchorfile>classiv_1_1multiline__ostream.html</anchorfile>
      <anchor>a0b51dc4a8ea02cf18200575fe36db0b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classiv_1_1multiline__ostream.html</anchorfile>
      <anchor>ae6ad906919dba23cc9cbbe4d3395a34f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::multiline_ostream_streambuf</name>
    <filename>classiv_1_1multiline__ostream__streambuf.html</filename>
    <member kind="function">
      <type></type>
      <name>multiline_ostream_streambuf</name>
      <anchorfile>classiv_1_1multiline__ostream__streambuf.html</anchorfile>
      <anchor>ab0cf3338d485186b66045ce2153ff811</anchor>
      <arglist>(std::ostream *out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::streambuf::int_type</type>
      <name>overflow</name>
      <anchorfile>classiv_1_1multiline__ostream__streambuf.html</anchorfile>
      <anchor>a7a6c4bd68af9050741b57ee9ad32604b</anchor>
      <arglist>(std::streambuf::int_type value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiline_begin</name>
      <anchorfile>classiv_1_1multiline__ostream__streambuf.html</anchorfile>
      <anchor>ab0bfdfcaabeee2eb172e66c979679cb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiline_end</name>
      <anchorfile>classiv_1_1multiline__ostream__streambuf.html</anchorfile>
      <anchor>ac32e4ac5317d9386eed8bf539c76c67d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classiv_1_1multiline__ostream__streambuf.html</anchorfile>
      <anchor>a255beab46f049efb779c87ece84f4897</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::OneChildElem</name>
    <filename>classiv_1_1OneChildElem.html</filename>
    <templarg></templarg>
    <base>iv::Elem</base>
    <member kind="function">
      <type></type>
      <name>OneChildElem</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>aee721793ce1865816e6ab6eb434e374e</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OneChildElem</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a60d35b7d1cccb0f8087140ddda9375fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a84b44fe94dcf567e18caa023a0d75e7f</anchor>
      <arglist>(CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild_Instance</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a6b1cd5d96a076fd97b26dd9e66a580db</anchor>
      <arglist>(char const *name, CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChild</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>ae4a4c27668e1c29a6daa999ef7f121c9</anchor>
      <arglist>(ChildT *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a24bc9235f2b9c7fa1471dab85fe76967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>abe44919d427a9de51eea1cf8e4dc2ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_eachChild</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>ae21aad5bb3a3d4dd438224434645b499</anchor>
      <arglist>(std::function&lt; void(Elem *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_childDisconnect</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a7f6e739c3683087a4fd6e2b98ce8d05d</anchor>
      <arglist>(Elem *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_eachChild</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a700ce7620ef719a99dcb9318f23fcf14</anchor>
      <arglist>(std::function&lt; void(InputNode *) &gt; const &amp;f) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_childDisconnect</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>ae64dd8cb51a4e46d7b47d10c2a92b2fd</anchor>
      <arglist>(InputNode *child) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirtyAttr&lt; ChildT * &gt;</type>
      <name>child</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a51d7d7e1ea0205501f677b16f6468247</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OneChildElem&lt; SlotChild &gt;</name>
    <filename>classiv_1_1OneChildElem.html</filename>
    <base>iv::Elem</base>
    <member kind="function">
      <type></type>
      <name>OneChildElem</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>aee721793ce1865816e6ab6eb434e374e</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OneChildElem</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a60d35b7d1cccb0f8087140ddda9375fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a84b44fe94dcf567e18caa023a0d75e7f</anchor>
      <arglist>(CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild_Instance</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a6b1cd5d96a076fd97b26dd9e66a580db</anchor>
      <arglist>(char const *name, CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChild</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>ae4a4c27668e1c29a6daa999ef7f121c9</anchor>
      <arglist>(SlotChild *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a24bc9235f2b9c7fa1471dab85fe76967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>abe44919d427a9de51eea1cf8e4dc2ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_eachChild</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>ae21aad5bb3a3d4dd438224434645b499</anchor>
      <arglist>(std::function&lt; void(Elem *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_childDisconnect</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a7f6e739c3683087a4fd6e2b98ce8d05d</anchor>
      <arglist>(Elem *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_eachChild</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a700ce7620ef719a99dcb9318f23fcf14</anchor>
      <arglist>(std::function&lt; void(InputNode *) &gt; const &amp;f) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_childDisconnect</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>ae64dd8cb51a4e46d7b47d10c2a92b2fd</anchor>
      <arglist>(InputNode *child) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirtyAttr&lt; SlotChild * &gt;</type>
      <name>child</name>
      <anchorfile>classiv_1_1OneChildElem.html</anchorfile>
      <anchor>a51d7d7e1ea0205501f677b16f6468247</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Ostream_TextDebugView</name>
    <filename>classiv_1_1Ostream__TextDebugView.html</filename>
    <base>iv::TextDebugView</base>
    <member kind="function">
      <type></type>
      <name>Ostream_TextDebugView</name>
      <anchorfile>classiv_1_1Ostream__TextDebugView.html</anchorfile>
      <anchor>a681421e5ab820ae853d6da93e4045f8d</anchor>
      <arglist>(Context *context, std::ostream *out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print_line</name>
      <anchorfile>classiv_1_1Ostream__TextDebugView.html</anchorfile>
      <anchor>a30eaef02b6db8ad0a581693c64e0c6d2</anchor>
      <arglist>(const char *prefix, const char *line, const char *postfix) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::FlatShader::Params</name>
    <filename>structiv_1_1FlatShader_1_1Params.html</filename>
    <member kind="function">
      <type></type>
      <name>Params</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>a2f1fcaeda36fd1a6b01998a11b5850d9</anchor>
      <arglist>(iv::ClientMarker *owner)</arglist>
    </member>
    <member kind="variable">
      <type>FittingStage</type>
      <name>fittingStage</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>a674f84b18084b73effa8f75c652af6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PixelizeStage</type>
      <name>pixelizeStage</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>a1eab3b2d5d97d454aae3d8aa91153f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float2 &gt;</type>
      <name>pixelizeSize</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>a0e8e7e0f8a5e73a8daae132c00adaf9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float2 &gt;</type>
      <name>pixelizeOffset</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>a30e3dae0c553b983a1efe587aa23365e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ResizeStage</type>
      <name>resizeStage</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>a22125a0eca478f2a9991c19377e27abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float2 &gt;</type>
      <name>resizeAnchor</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>a4865483cef83143161c30284bc406f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FilteringStage</type>
      <name>filteringStage</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>abaa4598711a51cdb8e44ed64d90221aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float &gt;</type>
      <name>filteringAlphaThreshold</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>a9902b27811b42321333f68dac2d9d990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float &gt;</type>
      <name>filteringAlphaWidth</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>ae3d60ae1d1e7a103483a30f842deaa49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float &gt;</type>
      <name>alpha</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>a56df9fa63f067c7a262845580238f786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float4x4 &gt;</type>
      <name>colorTransform</name>
      <anchorfile>structiv_1_1FlatShader_1_1Params.html</anchorfile>
      <anchor>a94fd0649ea3cfb688eb65d4f54a5e17c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Pickable</name>
    <filename>classiv_1_1Pickable.html</filename>
    <member kind="function">
      <type></type>
      <name>Pickable</name>
      <anchorfile>classiv_1_1Pickable.html</anchorfile>
      <anchor>a07f32f46ed6ddcb585ab7638b5a66ac7</anchor>
      <arglist>(Elem *elem)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>picking_test</name>
      <anchorfile>classiv_1_1Pickable.html</anchorfile>
      <anchor>a8df054868ee0ccf10628fc28b61956cb</anchor>
      <arglist>(int2 input_pos)=0</arglist>
    </member>
    <member kind="function">
      <type>Elem *</type>
      <name>elem</name>
      <anchorfile>classiv_1_1Pickable.html</anchorfile>
      <anchor>ad3aa6a304fcde15fba1e73b8d1389047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Elem *</type>
      <name>elem</name>
      <anchorfile>classiv_1_1Pickable.html</anchorfile>
      <anchor>a753014c356fb40ba1618c10d4deddc21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Pickable.html</anchorfile>
      <anchor>a76ce5c63daa0dfbb5e18db1f0fb82f8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::PickableSlot</name>
    <filename>classiv_1_1PickableSlot.html</filename>
    <base>iv::Slot</base>
    <base>iv::Position_InputNode::Tester</base>
    <member kind="function">
      <type></type>
      <name>PickableSlot</name>
      <anchorfile>classiv_1_1PickableSlot.html</anchorfile>
      <anchor>acb325b903aefbdb2c823969ea70aa74c</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pickable_elem</name>
      <anchorfile>classiv_1_1PickableSlot.html</anchorfile>
      <anchor>a83010d49a72f5b79afe6bcc2d2158d48</anchor>
      <arglist>(Pickable *pickable)</arglist>
    </member>
    <member kind="function">
      <type>float2</type>
      <name>input_position_local</name>
      <anchorfile>classiv_1_1PickableSlot.html</anchorfile>
      <anchor>ade7ec953943447f112367750c586822a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1PickableSlot.html</anchorfile>
      <anchor>a6bacc87282d292dae279b0ebbd06d16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position_InputNode</type>
      <name>input</name>
      <anchorfile>classiv_1_1PickableSlot.html</anchorfile>
      <anchor>a1a5cb85bfd3e48033809ae21e2a52bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>position_test</name>
      <anchorfile>classiv_1_1PickableSlot.html</anchorfile>
      <anchor>a5a07254850983c1b0f85a40355024eed</anchor>
      <arglist>(int2 input_pos) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pickable *</type>
      <name>pickable</name>
      <anchorfile>classiv_1_1PickableSlot.html</anchorfile>
      <anchor>a368164933e7a60d8121370a0eb506f61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Plain_StreamResourceSubprovider</name>
    <filename>classiv_1_1Plain__StreamResourceSubprovider.html</filename>
    <base>iv::StreamResourceSubprovider</base>
    <member kind="function">
      <type></type>
      <name>Plain_StreamResourceSubprovider</name>
      <anchorfile>classiv_1_1Plain__StreamResourceSubprovider.html</anchorfile>
      <anchor>a81051487252659145949352e8681ea1a</anchor>
      <arglist>(Instance *inst, StreamResourceProvider const *provider, char const *metadata_class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>each_resource</name>
      <anchorfile>classiv_1_1Plain__StreamResourceSubprovider.html</anchorfile>
      <anchor>a48ddf64bacc705a693e2601afd8f8b69</anchor>
      <arglist>(std::function&lt; void(ResourcePath const &amp;) &gt; const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_resource</name>
      <anchorfile>classiv_1_1Plain__StreamResourceSubprovider.html</anchorfile>
      <anchor>a37f0807e81eea99b9be9b90916852b0e</anchor>
      <arglist>(ResourcePath const &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Plain__StreamResourceSubprovider.html</anchorfile>
      <anchor>ae5c240d46f1d33a115a131fa1ea8752c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Resource</name>
      <anchorfile>classiv_1_1Plain__StreamResourceSubprovider.html</anchorfile>
      <anchor>abfa510efd2d3a2c657211ef6ab6d32cb</anchor>
      <arglist>(std::string const &amp;resource_class, ResourcePath path) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::PlatformDefault_ResourceProvider</name>
    <filename>classiv_1_1PlatformDefault__ResourceProvider.html</filename>
    <member kind="function">
      <type></type>
      <name>PlatformDefault_ResourceProvider</name>
      <anchorfile>classiv_1_1PlatformDefault__ResourceProvider.html</anchorfile>
      <anchor>a578dd6809788c683ba7dfe94673d87b3</anchor>
      <arglist>(Instance *inst, size_t priority)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1PlatformDefault__ResourceProvider.html</anchorfile>
      <anchor>a1860caf204b68b41f346575303e91ff9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1PlatformDefault__ResourceProvider.html</anchorfile>
      <anchor>aff76201aecf188ea1495bd8963293dfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Position_InputNode</name>
    <filename>classiv_1_1Position__InputNode.html</filename>
    <base>iv::InputNode</base>
    <base>iv::InputEvent</base>
    <base protection="private">iv::FrameUpdateClient</base>
    <class kind="class">iv::Position_InputNode::Tester</class>
    <member kind="function">
      <type></type>
      <name>Position_InputNode</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>a180b5f12c5a9175648336d54f6528611</anchor>
      <arglist>(Instance *inst, Tester *tester, bool keeps_press_in_offspace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Position_InputNode</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>a0ee39b53d65adb30a31897797964f289</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>a1aea8eb8fa76668567cfc575de73ffb2</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>input_id</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>a9f5eddb9db27b84dd5ca38fcbf8e6121</anchor>
      <arglist>(InputId)</arglist>
    </member>
    <member kind="function">
      <type>InputId</type>
      <name>input_id</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>a877857675bd8a8d0675b3e6f28180689</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fallthrough_enabled</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>a973a46ddb52117ff0faf17af8048f6aa</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fallthrough_enabled</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>ab4606a882dd39fdea8d7afb367c7d076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>input_position_screen</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>afa7ba10a7d7bd4263f1085a703f60139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interruptActivation</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>a98f672450fc4785497a5eab111f473a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>a599f4f38a2c3d929f95e848d4450d379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>a5d697c5962ee47b0b759b5951941ca46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivValAttr&lt; bool &gt;</type>
      <name>attr_hover</name>
      <anchorfile>classiv_1_1Position__InputNode.html</anchorfile>
      <anchor>a01e926f9e8da5a435cc876432e03ddc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Pratt</name>
    <filename>classiv_1_1Pratt.html</filename>
    <class kind="struct">iv::Pratt::Binary</class>
    <class kind="struct">iv::Pratt::Expression</class>
    <class kind="struct">iv::Pratt::Unary</class>
    <class kind="struct">iv::Pratt::Value</class>
    <member kind="function">
      <type></type>
      <name>Pratt</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>a8903218bf33d0c0975016e30f9d2afcc</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Pratt</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>a39ffacf54e7f290658368950df959208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>a19398e0e493ce319aba477263fbfa053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>def_unary</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>a90809924cad0e907498ea9b6b6769a88</anchor>
      <arglist>(int name, int precedence, const char *op_left, bool child_mandatory, const char *op_right, bool phantom=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>def_binary</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>a3b2d8a0cb3b4edd3e1970180890f36bf</anchor>
      <arglist>(int name, int precedence, const char *op_left, bool left_child_mandatory, const char *op_middle, bool right_child_mandatory, const char *op_right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>def_value</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>ac58ae60bb4158ffc3a24c81e4a551134</anchor>
      <arglist>(int name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>define_operators</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>a03504f92d420af8d712e307ef3eebfd5</anchor>
      <arglist>(Lex *lex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_expression</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>ad1147257d47d7f31c12fd30328138c42</anchor>
      <arglist>(Lex *lex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>a9e68db56e3492886b2b48989e350f920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Expression *</type>
      <name>root</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>a51b6af413239e9d331a91de1748c917f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Pratt.html</anchorfile>
      <anchor>a20dbe6d16f25ac5dee3d98d98610f6e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Prefsize</name>
    <filename>classiv_1_1Prefsize.html</filename>
    <base>OneChildElem&lt; SlotChild &gt;</base>
    <base>iv::SlotChild</base>
    <member kind="function">
      <type></type>
      <name>Prefsize</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>ae35a1d5c21d2dcf7fa6ddd58b59f657d</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function">
      <type>Prefsize *</type>
      <name>enabled</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>afd430f4c882a4dbadc5f8e7238d77ac9</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>Prefsize *</type>
      <name>prefsize</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>aaaff8c8c9f5c2c2eb607425a747d2d0e</anchor>
      <arglist>(float3)</arglist>
    </member>
    <member kind="function">
      <type>Prefsize *</type>
      <name>prefsizeX</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>ae26b9f39ae61c21eb8a41f5e3d294bfa</anchor>
      <arglist>(std::optional&lt; float &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Prefsize *</type>
      <name>prefsizeY</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>aca4e75b0f58b33d83d673659c657661f</anchor>
      <arglist>(std::optional&lt; float &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Prefsize *</type>
      <name>prefsizeZ</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>a9fadf80719f8e79a54363daf9693bb01</anchor>
      <arglist>(std::optional&lt; float &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Prefsize *</type>
      <name>prefsizeScale</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>a6f925277b373bb0913b43d290e915b1b</anchor>
      <arglist>(float3)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>aad424bb8be9f16ba2a4912e2633824ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float &gt; &gt;</type>
      <name>attr_prefsizeX</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>a05bd5d949e6f01317c34bbbd374b19c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float &gt; &gt;</type>
      <name>attr_prefsizeY</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>a61fd3176ce2dd76f9da2d99fba5f0fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::optional&lt; float &gt; &gt;</type>
      <name>attr_prefsizeZ</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>a90a4da5df12acd8c70ee0b0609a719b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float3 &gt;</type>
      <name>attr_prefsizeScale</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>a01be650aff1886e5dc4bc9f6821da21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>a5770b19956fdb3b1eff3094287db0985</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1Prefsize.html</anchorfile>
      <anchor>a7335b65910b22498eb919556493df028</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::PrivAttr</name>
    <filename>classiv_1_1PrivAttr.html</filename>
    <templarg></templarg>
    <base protection="private">iv::Local_AEP</base>
    <base>iv::PrivAttr_I</base>
    <member kind="function">
      <type></type>
      <name>PrivAttr</name>
      <anchorfile>classiv_1_1PrivAttr.html</anchorfile>
      <anchor>a9d941edb050044c1f7346c9bfe28466a</anchor>
      <arglist>(ClientMarker *, PrivAttr_Owner&lt; T &gt; *owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PrivAttr</name>
      <anchorfile>classiv_1_1PrivAttr.html</anchorfile>
      <anchor>a5bd69f3513363e3376c12b2267dac3b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::PrivAttr_I</name>
    <filename>classiv_1_1PrivAttr__I.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PrivAttr_I</name>
      <anchorfile>classiv_1_1PrivAttr__I.html</anchorfile>
      <anchor>af43d9aa1052cc681142bbe9189afee2a</anchor>
      <arglist>(ClientMarker *, AttributeEventProcessor *, PrivAttr_Owner&lt; T &gt; *owner)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1PrivAttr__I.html</anchorfile>
      <anchor>a6f68da662cbd9d40f69e694a6a8fb935</anchor>
      <arglist>(T &amp;out) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1PrivAttr__I.html</anchorfile>
      <anchor>a80cd9bb07c36f9b2c1c97b7b4d404369</anchor>
      <arglist>(T const &amp;) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrivAttr_Owner&lt; T &gt;</name>
      <anchorfile>classiv_1_1PrivAttr__I.html</anchorfile>
      <anchor>a35086522e27a444555962e1034298d29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::PrivAttr_Owner</name>
    <filename>classiv_1_1PrivAttr__Owner.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PrivAttr_Get</name>
      <anchorfile>classiv_1_1PrivAttr__Owner.html</anchorfile>
      <anchor>a22e2a4a2e4c1c73b82e8fc5d5bf65d90</anchor>
      <arglist>(PrivAttr_I&lt; T &gt; *, T &amp;out)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PrivAttr_Modify</name>
      <anchorfile>classiv_1_1PrivAttr__Owner.html</anchorfile>
      <anchor>a54155dec8b5cf923351be3831d1e92c1</anchor>
      <arglist>(PrivAttr_I&lt; T &gt; *, T const &amp;value)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Attribute_SetMode</name>
      <anchorfile>classiv_1_1PrivAttr__Owner.html</anchorfile>
      <anchor>a16c2b64b5f6fc0e898d364707912f1c0</anchor>
      <arglist>(PrivAttr_I&lt; T &gt; *, Attribute::ValueMode mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SourceValueChanged</name>
      <anchorfile>classiv_1_1PrivAttr__Owner.html</anchorfile>
      <anchor>a5667fc7d8aa2a77cedade7e1ead81548</anchor>
      <arglist>(PrivAttr_I&lt; T &gt; *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::PrivField</name>
    <filename>classiv_1_1PrivField.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PrivField</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>a643eaaca9d120a361295647ad7649d1c</anchor>
      <arglist>(Instance *inst, PrivField_Owner&lt; T &gt; *impl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>ae3b6253c52376414da2bf3c2e1f6a362</anchor>
      <arglist>(T const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnChanged</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>aff90f93464380fb8372430b8a313f384</anchor>
      <arglist>(bool real) override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrivField_Owner&lt; T &gt;</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>a7d54d47e966dd4a0c1438eb107e30eb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivField&lt; iv::Activator &gt;</name>
    <filename>classiv_1_1PrivField.html</filename>
    <member kind="function">
      <type></type>
      <name>PrivField</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>a643eaaca9d120a361295647ad7649d1c</anchor>
      <arglist>(Instance *inst, PrivField_Owner&lt; iv::Activator &gt; *impl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>ae3b6253c52376414da2bf3c2e1f6a362</anchor>
      <arglist>(iv::Activator const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnChanged</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>aff90f93464380fb8372430b8a313f384</anchor>
      <arglist>(bool real) override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrivField_Owner&lt; T &gt;</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>a7d54d47e966dd4a0c1438eb107e30eb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivField&lt; iv::SumAgg&lt; int &gt; &gt;</name>
    <filename>classiv_1_1PrivField.html</filename>
    <member kind="function">
      <type></type>
      <name>PrivField</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>a643eaaca9d120a361295647ad7649d1c</anchor>
      <arglist>(Instance *inst, PrivField_Owner&lt; iv::SumAgg&lt; int &gt; &gt; *impl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Modify</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>ae3b6253c52376414da2bf3c2e1f6a362</anchor>
      <arglist>(iv::SumAgg&lt; int &gt; const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnChanged</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>aff90f93464380fb8372430b8a313f384</anchor>
      <arglist>(bool real) override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrivField_Owner&lt; T &gt;</name>
      <anchorfile>classiv_1_1PrivField.html</anchorfile>
      <anchor>a7d54d47e966dd4a0c1438eb107e30eb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::PrivField_Owner</name>
    <filename>classiv_1_1PrivField__Owner.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Field_OnChanged</name>
      <anchorfile>classiv_1_1PrivField__Owner.html</anchorfile>
      <anchor>aca2743b027d66de48f52af2b13f69430</anchor>
      <arglist>(Field&lt; T &gt; *field, bool real)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Field_Modify</name>
      <anchorfile>classiv_1_1PrivField__Owner.html</anchorfile>
      <anchor>a86a52782a8a33f0eb2b9c0ffe6d3970e</anchor>
      <arglist>(PrivField&lt; T &gt; *field, T const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivField_Owner&lt; Activator &gt;</name>
    <filename>classiv_1_1PrivField__Owner.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Field_OnChanged</name>
      <anchorfile>classiv_1_1PrivField__Owner.html</anchorfile>
      <anchor>aca2743b027d66de48f52af2b13f69430</anchor>
      <arglist>(Field&lt; Activator &gt; *field, bool real)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Field_Modify</name>
      <anchorfile>classiv_1_1PrivField__Owner.html</anchorfile>
      <anchor>a86a52782a8a33f0eb2b9c0ffe6d3970e</anchor>
      <arglist>(PrivField&lt; Activator &gt; *field, Activator const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivField_Owner&lt; iv::Activator &gt;</name>
    <filename>classiv_1_1PrivField__Owner.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Field_OnChanged</name>
      <anchorfile>classiv_1_1PrivField__Owner.html</anchorfile>
      <anchor>aca2743b027d66de48f52af2b13f69430</anchor>
      <arglist>(Field&lt; iv::Activator &gt; *field, bool real)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Field_Modify</name>
      <anchorfile>classiv_1_1PrivField__Owner.html</anchorfile>
      <anchor>a86a52782a8a33f0eb2b9c0ffe6d3970e</anchor>
      <arglist>(PrivField&lt; iv::Activator &gt; *field, iv::Activator const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivField_Owner&lt; iv::SumAgg&lt; int &gt; &gt;</name>
    <filename>classiv_1_1PrivField__Owner.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Field_OnChanged</name>
      <anchorfile>classiv_1_1PrivField__Owner.html</anchorfile>
      <anchor>aca2743b027d66de48f52af2b13f69430</anchor>
      <arglist>(Field&lt; iv::SumAgg&lt; int &gt; &gt; *field, bool real)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Field_Modify</name>
      <anchorfile>classiv_1_1PrivField__Owner.html</anchorfile>
      <anchor>a86a52782a8a33f0eb2b9c0ffe6d3970e</anchor>
      <arglist>(PrivField&lt; iv::SumAgg&lt; int &gt; &gt; *field, iv::SumAgg&lt; int &gt; const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivField_Owner&lt; SumAgg&lt; int &gt; &gt;</name>
    <filename>classiv_1_1PrivField__Owner.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Field_OnChanged</name>
      <anchorfile>classiv_1_1PrivField__Owner.html</anchorfile>
      <anchor>aca2743b027d66de48f52af2b13f69430</anchor>
      <arglist>(Field&lt; SumAgg&lt; int &gt; &gt; *field, bool real)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Field_Modify</name>
      <anchorfile>classiv_1_1PrivField__Owner.html</anchorfile>
      <anchor>a86a52782a8a33f0eb2b9c0ffe6d3970e</anchor>
      <arglist>(PrivField&lt; SumAgg&lt; int &gt; &gt; *field, SumAgg&lt; int &gt; const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::PrivValAttr</name>
    <filename>classiv_1_1PrivValAttr.html</filename>
    <templarg></templarg>
    <base protection="private">iv::Local_AEP</base>
    <base>iv::PrivValAttr_I</base>
    <member kind="function">
      <type></type>
      <name>PrivValAttr</name>
      <anchorfile>classiv_1_1PrivValAttr.html</anchorfile>
      <anchor>a7a3043ab3f2f3f9866149a09a1dc24fa</anchor>
      <arglist>(ClientMarker *cm, PrivValAttr_Owner *owner, T const &amp;initial_value=T())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PrivValAttr</name>
      <anchorfile>classiv_1_1PrivValAttr.html</anchorfile>
      <anchor>ad496b598019b11e53cd9d306ddb588f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivValAttr&lt; bool &gt;</name>
    <filename>classiv_1_1PrivValAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>PrivValAttr_I&lt; bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>PrivValAttr</name>
      <anchorfile>classiv_1_1PrivValAttr.html</anchorfile>
      <anchor>a7a3043ab3f2f3f9866149a09a1dc24fa</anchor>
      <arglist>(ClientMarker *cm, PrivValAttr_Owner *owner, bool const &amp;initial_value=bool())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PrivValAttr</name>
      <anchorfile>classiv_1_1PrivValAttr.html</anchorfile>
      <anchor>ad496b598019b11e53cd9d306ddb588f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivValAttr&lt; float &gt;</name>
    <filename>classiv_1_1PrivValAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>PrivValAttr_I&lt; float &gt;</base>
    <member kind="function">
      <type></type>
      <name>PrivValAttr</name>
      <anchorfile>classiv_1_1PrivValAttr.html</anchorfile>
      <anchor>a7a3043ab3f2f3f9866149a09a1dc24fa</anchor>
      <arglist>(ClientMarker *cm, PrivValAttr_Owner *owner, float const &amp;initial_value=float())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PrivValAttr</name>
      <anchorfile>classiv_1_1PrivValAttr.html</anchorfile>
      <anchor>ad496b598019b11e53cd9d306ddb588f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivValAttr&lt; iv::Activator &gt;</name>
    <filename>classiv_1_1PrivValAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>PrivValAttr_I&lt; iv::Activator &gt;</base>
    <member kind="function">
      <type></type>
      <name>PrivValAttr</name>
      <anchorfile>classiv_1_1PrivValAttr.html</anchorfile>
      <anchor>a7a3043ab3f2f3f9866149a09a1dc24fa</anchor>
      <arglist>(ClientMarker *cm, PrivValAttr_Owner *owner, iv::Activator const &amp;initial_value=iv::Activator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PrivValAttr</name>
      <anchorfile>classiv_1_1PrivValAttr.html</anchorfile>
      <anchor>ad496b598019b11e53cd9d306ddb588f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivValAttr&lt; iv::SlotChild * &gt;</name>
    <filename>classiv_1_1PrivValAttr.html</filename>
    <base protection="private">iv::Local_AEP</base>
    <base>PrivValAttr_I&lt; iv::SlotChild * &gt;</base>
    <member kind="function">
      <type></type>
      <name>PrivValAttr</name>
      <anchorfile>classiv_1_1PrivValAttr.html</anchorfile>
      <anchor>a7a3043ab3f2f3f9866149a09a1dc24fa</anchor>
      <arglist>(ClientMarker *cm, PrivValAttr_Owner *owner, iv::SlotChild * const &amp;initial_value=iv::SlotChild *())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PrivValAttr</name>
      <anchorfile>classiv_1_1PrivValAttr.html</anchorfile>
      <anchor>ad496b598019b11e53cd9d306ddb588f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::PrivValAttr_I</name>
    <filename>classiv_1_1PrivValAttr__I.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PrivValAttr_I</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>aed27cdde58beb26d487f0dbf2ef1132b</anchor>
      <arglist>(ClientMarker *cm, AttributeEventProcessor *, PrivValAttr_Owner *owner, T const &amp;initial_value=T())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a6928dd913e2e4c99105a9ba78b629009</anchor>
      <arglist>(T &amp;out) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a3bd250b2c9baa069060d647af384d351</anchor>
      <arglist>(T const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a2761a43dd16c09f0b17c75abf3fce37a</anchor>
      <arglist>(T const &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrivValAttr_Owner</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a23f1d6403e6aa23ccbf7ad8436ff6bf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivValAttr_I&lt; bool &gt;</name>
    <filename>classiv_1_1PrivValAttr__I.html</filename>
    <member kind="function">
      <type></type>
      <name>PrivValAttr_I</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>aed27cdde58beb26d487f0dbf2ef1132b</anchor>
      <arglist>(ClientMarker *cm, AttributeEventProcessor *, PrivValAttr_Owner *owner, bool const &amp;initial_value=bool())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a6928dd913e2e4c99105a9ba78b629009</anchor>
      <arglist>(bool &amp;out) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a3bd250b2c9baa069060d647af384d351</anchor>
      <arglist>(bool const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a2761a43dd16c09f0b17c75abf3fce37a</anchor>
      <arglist>(bool const &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrivValAttr_Owner</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a23f1d6403e6aa23ccbf7ad8436ff6bf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivValAttr_I&lt; float &gt;</name>
    <filename>classiv_1_1PrivValAttr__I.html</filename>
    <member kind="function">
      <type></type>
      <name>PrivValAttr_I</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>aed27cdde58beb26d487f0dbf2ef1132b</anchor>
      <arglist>(ClientMarker *cm, AttributeEventProcessor *, PrivValAttr_Owner *owner, float const &amp;initial_value=float())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a6928dd913e2e4c99105a9ba78b629009</anchor>
      <arglist>(float &amp;out) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a3bd250b2c9baa069060d647af384d351</anchor>
      <arglist>(float const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a2761a43dd16c09f0b17c75abf3fce37a</anchor>
      <arglist>(float const &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrivValAttr_Owner</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a23f1d6403e6aa23ccbf7ad8436ff6bf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivValAttr_I&lt; iv::Activator &gt;</name>
    <filename>classiv_1_1PrivValAttr__I.html</filename>
    <member kind="function">
      <type></type>
      <name>PrivValAttr_I</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>aed27cdde58beb26d487f0dbf2ef1132b</anchor>
      <arglist>(ClientMarker *cm, AttributeEventProcessor *, PrivValAttr_Owner *owner, iv::Activator const &amp;initial_value=iv::Activator())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a6928dd913e2e4c99105a9ba78b629009</anchor>
      <arglist>(iv::Activator &amp;out) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a3bd250b2c9baa069060d647af384d351</anchor>
      <arglist>(iv::Activator const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a2761a43dd16c09f0b17c75abf3fce37a</anchor>
      <arglist>(iv::Activator const &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrivValAttr_Owner</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a23f1d6403e6aa23ccbf7ad8436ff6bf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PrivValAttr_I&lt; iv::SlotChild * &gt;</name>
    <filename>classiv_1_1PrivValAttr__I.html</filename>
    <member kind="function">
      <type></type>
      <name>PrivValAttr_I</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>aed27cdde58beb26d487f0dbf2ef1132b</anchor>
      <arglist>(ClientMarker *cm, AttributeEventProcessor *, PrivValAttr_Owner *owner, iv::SlotChild * const &amp;initial_value=iv::SlotChild *())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a6928dd913e2e4c99105a9ba78b629009</anchor>
      <arglist>(iv::SlotChild * &amp;out) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a3bd250b2c9baa069060d647af384d351</anchor>
      <arglist>(iv::SlotChild * const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a2761a43dd16c09f0b17c75abf3fce37a</anchor>
      <arglist>(iv::SlotChild * const &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrivValAttr_Owner</name>
      <anchorfile>classiv_1_1PrivValAttr__I.html</anchorfile>
      <anchor>a23f1d6403e6aa23ccbf7ad8436ff6bf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::PrivValAttr_Owner</name>
    <filename>classiv_1_1PrivValAttr__Owner.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PrivValAttr_Modified</name>
      <anchorfile>classiv_1_1PrivValAttr__Owner.html</anchorfile>
      <anchor>a1c959cd237371f6ed086d5d75bf4e176</anchor>
      <arglist>(Attribute *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Attribute_Set</name>
      <anchorfile>classiv_1_1PrivValAttr__Owner.html</anchorfile>
      <anchor>adfff50427a90536b65ac78a75766ef2d</anchor>
      <arglist>(PrivValAttr_I&lt; T &gt; *, T const &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Attribute_SetMode</name>
      <anchorfile>classiv_1_1PrivValAttr__Owner.html</anchorfile>
      <anchor>aaa688eded62580f494bcd7d53f3b5def</anchor>
      <arglist>(PrivValAttr_I&lt; T &gt; *, Attribute::ValueMode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ProtectedSlot</name>
    <filename>classiv_1_1ProtectedSlot.html</filename>
    <base>iv::Elem</base>
    <base>iv::SlotChild</base>
    <member kind="function">
      <type></type>
      <name>ProtectedSlot</name>
      <anchorfile>classiv_1_1ProtectedSlot.html</anchorfile>
      <anchor>aea5e8b090ddea5f0e6a6f18f7ce94021</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1ProtectedSlot.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1ProtectedSlot.html</anchorfile>
      <anchor>a08ee88a42768beb5b6c275e602bdb867</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1ProtectedSlot.html</anchorfile>
      <anchor>a291e437c92a28b2bbfff2efab58274af</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1ProtectedSlot.html</anchorfile>
      <anchor>ae2d5c8ca8b8ad57860411c1cabc0f8a5</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_eachChild</name>
      <anchorfile>classiv_1_1ProtectedSlot.html</anchorfile>
      <anchor>ad9f81708d14fe77e70800a5ded05732a</anchor>
      <arglist>(std::function&lt; void(Elem *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_childDisconnect</name>
      <anchorfile>classiv_1_1ProtectedSlot.html</anchorfile>
      <anchor>aec168a5c7c0cc4f6be279308382573e4</anchor>
      <arglist>(Elem *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_eachChild</name>
      <anchorfile>classiv_1_1ProtectedSlot.html</anchorfile>
      <anchor>ac4ed928a923d93cfe80a83d179cce026</anchor>
      <arglist>(std::function&lt; void(InputNode *) &gt; const &amp;f) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_childDisconnect</name>
      <anchorfile>classiv_1_1ProtectedSlot.html</anchorfile>
      <anchor>a1043d223da1a14986736b6f173dc1e46</anchor>
      <arglist>(InputNode *child) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Slot</type>
      <name>root</name>
      <anchorfile>classiv_1_1ProtectedSlot.html</anchorfile>
      <anchor>a72bd82b24a0e964dda3c4419a586bd56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::QuickstepTransform</name>
    <filename>structiv_1_1QuickstepTransform.html</filename>
    <member kind="function">
      <type>Anim_float</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1QuickstepTransform.html</anchorfile>
      <anchor>ad17c701e600556e1b6a335a597212f20</anchor>
      <arglist>(Anim_float x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::RandomGenerator</name>
    <filename>classiv_1_1RandomGenerator.html</filename>
    <member kind="typedef">
      <type>uint_fast32_t</type>
      <name>result_type</name>
      <anchorfile>classiv_1_1RandomGenerator.html</anchorfile>
      <anchor>a24e65be7a8c9454387836008a0663c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomGenerator</name>
      <anchorfile>classiv_1_1RandomGenerator.html</anchorfile>
      <anchor>ab19b037621826cb118f14b44fcc82ae9</anchor>
      <arglist>(Instance *inst, RandomId id, T const &amp;identity)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1RandomGenerator.html</anchorfile>
      <anchor>a6599147b604677ccd6b5887a4c881f4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classiv_1_1RandomGenerator.html</anchorfile>
      <anchor>a3ea64eadc7d3ef8499f4bc783efcdb53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classiv_1_1RandomGenerator.html</anchorfile>
      <anchor>af65cb6d1e787ae9f57084b7f35c2cc2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr result_type</type>
      <name>max</name>
      <anchorfile>classiv_1_1RandomGenerator.html</anchorfile>
      <anchor>ab0396f39a5a4f402ae8d9baee343bf91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr result_type</type>
      <name>min</name>
      <anchorfile>classiv_1_1RandomGenerator.html</anchorfile>
      <anchor>a0579f600d73001b0b2198a37d8aa6637</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::RandomId</name>
    <filename>classiv_1_1RandomId.html</filename>
    <base>RuntimeId&lt; RandomId &gt;</base>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1RandomId.html</anchorfile>
      <anchor>af79012fa570f4e770809d363b70962da</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static RuntimeIdDictionary</type>
      <name>Dictionary</name>
      <anchorfile>classiv_1_1RandomId.html</anchorfile>
      <anchor>a3b288d1ee39f8addf130d58eb8638a59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::RandomSystem</name>
    <filename>classiv_1_1RandomSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>RandomSystem</name>
      <anchorfile>classiv_1_1RandomSystem.html</anchorfile>
      <anchor>ae922283d5de316746385625117eb161e</anchor>
      <arglist>(SystemContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1RandomSystem.html</anchorfile>
      <anchor>a32d5158b22123cf5471392032388117a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>classiv_1_1RandomSystem.html</anchorfile>
      <anchor>a47ac817409e2c7d09020dc9479bfc5c0</anchor>
      <arglist>(RandomId, uint_fast32_t seed)</arglist>
    </member>
    <member kind="function">
      <type>uint_fast32_t</type>
      <name>seed</name>
      <anchorfile>classiv_1_1RandomSystem.html</anchorfile>
      <anchor>af446bc43cd9b1860e5b0dcbc2d8f0232</anchor>
      <arglist>(RandomId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Rectangle_LumaButton</name>
    <filename>classiv_1_1Rectangle__LumaButton.html</filename>
    <base>iv::LumaButton</base>
    <member kind="function">
      <type></type>
      <name>Rectangle_LumaButton</name>
      <anchorfile>classiv_1_1Rectangle__LumaButton.html</anchorfile>
      <anchor>a3408518649265e5d2e5c177d15b392b2</anchor>
      <arglist>(iv::Instance *inst, ResourcePath const &amp;icon, char const *label, LumaStyleId style_id=LumaStyleId())</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Rectangle__LumaButton.html</anchorfile>
      <anchor>aa03e71c688cdb887bc53d8484add5b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ColorsChanged</name>
      <anchorfile>classiv_1_1Rectangle__LumaButton.html</anchorfile>
      <anchor>ae6c273fc77e7e624afd372c6a22225eb</anchor>
      <arglist>(float4 surface, float4 on_surface) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Renderable</name>
    <filename>classiv_1_1Renderable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classiv_1_1Renderable.html</anchorfile>
      <anchor>aa3c89dd98310d92d3cbba9469df3c8bb</anchor>
      <arglist>(CameraState const &amp;camera, std::optional&lt; float &gt; depth_override)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::RenderTarget</name>
    <filename>classiv_1_1RenderTarget.html</filename>
    <class kind="struct">iv::RenderTarget::Geometry</class>
    <member kind="function">
      <type></type>
      <name>RenderTarget</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>a7a707f7822808be87683b831ceec579d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RenderTarget</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>a4dc131c92978818699ae4039d28daa32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthBufferClear</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>aa3e7ee661b96a51dffe1180d5a92469b</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthBufferMode</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>a7b5b1cb3db4b3041921eb0afb6537595</anchor>
      <arglist>(GLenum test_condition, bool write_enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Blending</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>a2a901c74ac98cee1082389ec4c9b5fee</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>a4829307b7211cdc64ef01907755eed79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind_texture</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>a5961a6ce3cd7a62419310b608d4ff206</anchor>
      <arglist>(int texture_unit, GLuint texture_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind_shader</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>ab768eec7f728f64541423a2edde776f1</anchor>
      <arglist>(GLuint program_id)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const constexpr int</type>
      <name>MaxTexturingUnits</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>a6e2ebd217cddfa891010849fdd0a7c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>frame_setup</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>a899cd729c949f9b5bf6f1fac4503f843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>frame_close</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>a35f024960703cb2c3dd2e91bf8cf98d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_geometry</name>
      <anchorfile>classiv_1_1RenderTarget.html</anchorfile>
      <anchor>a9f4cb6b407f81fea9f046c706c33f66c</anchor>
      <arglist>(Geometry geometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Resource_LogTrace</name>
    <filename>classiv_1_1Resource__LogTrace.html</filename>
    <base>iv::LogTrace</base>
    <member kind="function">
      <type></type>
      <name>Resource_LogTrace</name>
      <anchorfile>classiv_1_1Resource__LogTrace.html</anchorfile>
      <anchor>a267bff9124138a032f60bfdf64b53498</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTraceLine</name>
      <anchorfile>classiv_1_1Resource__LogTrace.html</anchorfile>
      <anchor>a6363dec24c8674e5a434e2bdcc1bbe55</anchor>
      <arglist>(std::ostream &amp;out) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ResourceAccess</name>
    <filename>classiv_1_1ResourceAccess.html</filename>
    <member kind="function">
      <type></type>
      <name>ResourceAccess</name>
      <anchorfile>classiv_1_1ResourceAccess.html</anchorfile>
      <anchor>a09f000cb6671eaf83dd6a073ae15bae8</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1ResourceAccess.html</anchorfile>
      <anchor>a21a49b24bcdd8fd060e314fc09f4328a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_path</name>
      <anchorfile>classiv_1_1ResourceAccess.html</anchorfile>
      <anchor>a7f92e147179d19d3e29b87d3bc8e4695</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const TResource *</type>
      <name>get</name>
      <anchorfile>classiv_1_1ResourceAccess.html</anchorfile>
      <anchor>aea9140a0d99e2a7712f0481c36b7b26d</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>each_resource</name>
      <anchorfile>classiv_1_1ResourceAccess.html</anchorfile>
      <anchor>a6ed9e5777f194403a64a0ad3157d82d7</anchor>
      <arglist>(std::function&lt; void(ResourcePath const &amp;path) &gt; const &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1ResourceAccess.html</anchorfile>
      <anchor>a2a007ffe7b7ea7c85c1d937b4b6c4491</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ResourceManagementSystem</name>
    <filename>classiv_1_1ResourceManagementSystem.html</filename>
    <base>iv::System</base>
    <member kind="function">
      <type></type>
      <name>ResourceManagementSystem</name>
      <anchorfile>classiv_1_1ResourceManagementSystem.html</anchorfile>
      <anchor>afefb17dea4572395ad3baf496460cfe6</anchor>
      <arglist>(SystemContainer *sc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResourceManagementSystem</name>
      <anchorfile>classiv_1_1ResourceManagementSystem.html</anchorfile>
      <anchor>aca2b548915a450c841714ae9123893d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1ResourceManagementSystem.html</anchorfile>
      <anchor>a107e90e9320d72b8963ef6110e273c84</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classiv_1_1ResourceManagementSystem.html</anchorfile>
      <anchor>acf1cc6aa560979a61b5bab5e3678629b</anchor>
      <arglist>(TextDebugView *view) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_path</name>
      <anchorfile>classiv_1_1ResourceManagementSystem.html</anchorfile>
      <anchor>ae1b89cabd67e3702ad2bac272a87abf4</anchor>
      <arglist>(ResourcePath path)</arglist>
    </member>
    <member kind="function">
      <type>const TResource *</type>
      <name>get</name>
      <anchorfile>classiv_1_1ResourceManagementSystem.html</anchorfile>
      <anchor>ae95e4cb6a7d2d938669ddffdc9de2d0c</anchor>
      <arglist>(ResourcePath path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>each_resource</name>
      <anchorfile>classiv_1_1ResourceManagementSystem.html</anchorfile>
      <anchor>a9c2a87c80d7170c2ee634a2216789ac2</anchor>
      <arglist>(std::function&lt; void(ResourcePath const &amp;path) &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_provider</name>
      <anchorfile>classiv_1_1ResourceManagementSystem.html</anchorfile>
      <anchor>a20c6b684122a77b6f2886d30c45dc260</anchor>
      <arglist>(ResourceProvider *provider, size_t priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregister_provider</name>
      <anchorfile>classiv_1_1ResourceManagementSystem.html</anchorfile>
      <anchor>a469c70bc21d7bf30f67ecd66a4067a43</anchor>
      <arglist>(ResourceProvider *provider)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ResourcePath</name>
    <filename>classiv_1_1ResourcePath.html</filename>
    <member kind="function">
      <type></type>
      <name>ResourcePath</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a1a2fa6dc6d0a54ebdb6aa722b7a9e089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourcePath</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>afe3b928ffe175a36f2d0a9bb0842de71</anchor>
      <arglist>(const char *abspath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourcePath</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a6116b193569ae6c648530c65fbbbdbb6</anchor>
      <arglist>(std::string const &amp;abspath)</arglist>
    </member>
    <member kind="function">
      <type>ResourcePath &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>aeddc1588952184655871154d287616fa</anchor>
      <arglist>(const char *abspath)</arglist>
    </member>
    <member kind="function">
      <type>ResourcePath &amp;</type>
      <name>operator=</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>aaa8cfaa7e0a4d0069590ce7b956ff850</anchor>
      <arglist>(std::string const &amp;abspath)</arglist>
    </member>
    <member kind="function">
      <type>ResourcePath</type>
      <name>operator+</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>adcf992368276e4fc13af0a9fd870efe4</anchor>
      <arglist>(std::string const &amp;append) const</arglist>
    </member>
    <member kind="function">
      <type>ResourcePath &amp;</type>
      <name>operator+=</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a8a87d84a821f187ca747eddd06e62c26</anchor>
      <arglist>(std::string const &amp;append)</arglist>
    </member>
    <member kind="function">
      <type>ResourcePath</type>
      <name>operator/</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a5047672075f82f3821cbc6468c40255c</anchor>
      <arglist>(std::string const &amp;join) const</arglist>
    </member>
    <member kind="function">
      <type>ResourcePath &amp;</type>
      <name>operator/=</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a0986f7b29fde387c5b21a8aa46cb993b</anchor>
      <arglist>(std::string const &amp;join)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a1db2860cfaea513270bb7189b669bb12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a44d990d1af562c901084f1ecc683c98d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_real_path</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>af00b8239812f748ce37587803572dbd2</anchor>
      <arglist>(const char *vroot) const</arglist>
    </member>
    <member kind="function">
      <type>ResourcePath</type>
      <name>get_neighbour_path</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>ae400e81f16fa9d8b80beef4a8a59e4ca</anchor>
      <arglist>(const char *relative) const</arglist>
    </member>
    <member kind="function">
      <type>ResourcePath</type>
      <name>get_directory</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a0c8bdf5dc465b1888ea203b82c23bef0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a7bd77e00ef58cf7d04707ff8b05210a5</anchor>
      <arglist>(ResourcePath const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a4b6c9fc5ae6054579623ab229cd941f3</anchor>
      <arglist>(ResourcePath const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>a96c3d069f37333282022ad326536cd7c</anchor>
      <arglist>(ResourcePath const &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Clean</name>
      <anchorfile>classiv_1_1ResourcePath.html</anchorfile>
      <anchor>aabcbf3e6e928c8f44d4b58f2adb5c46f</anchor>
      <arglist>(std::string &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ResourceProvider</name>
    <filename>classiv_1_1ResourceProvider.html</filename>
    <member kind="function">
      <type></type>
      <name>ResourceProvider</name>
      <anchorfile>classiv_1_1ResourceProvider.html</anchorfile>
      <anchor>aac5e105c888d568cd819a7550e661215</anchor>
      <arglist>(Instance *inst, size_t priority)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ResourceProvider</name>
      <anchorfile>classiv_1_1ResourceProvider.html</anchorfile>
      <anchor>a2d04654d72fc38e160fa576efc617dde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1ResourceProvider.html</anchorfile>
      <anchor>a1cb8383882b63517bf71f1a3272a242e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>has_path</name>
      <anchorfile>classiv_1_1ResourceProvider.html</anchorfile>
      <anchor>ac974c4043b17a7fc3fd483947d4a1f56</anchor>
      <arglist>(ResourcePath const &amp;path, std::type_index type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::pair&lt; void *, Instance * &gt;</type>
      <name>create_resource</name>
      <anchorfile>classiv_1_1ResourceProvider.html</anchorfile>
      <anchor>a44fb23514cdace70f4fab0b276112319</anchor>
      <arglist>(ResourcePath const &amp;path, std::type_index type, ResourcesRoot *parent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>each_resource</name>
      <anchorfile>classiv_1_1ResourceProvider.html</anchorfile>
      <anchor>ab8e2bb0739f20860db7a3627e9fc184e</anchor>
      <arglist>(std::type_index type, std::function&lt; void(ResourcePath const &amp;) &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>each_type</name>
      <anchorfile>classiv_1_1ResourceProvider.html</anchorfile>
      <anchor>ac477628e6b428ead0b9ce453e8bbd9ac</anchor>
      <arglist>(std::function&lt; void(std::type_index type) &gt; const &amp;)=0</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1ResourceProvider.html</anchorfile>
      <anchor>ac0290fe9b4619a3c338356b64e044ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unregister_provider</name>
      <anchorfile>classiv_1_1ResourceProvider.html</anchorfile>
      <anchor>a0b58400b3d2f443f4dc004648780acfa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ResourcesRoot</name>
    <filename>classiv_1_1ResourcesRoot.html</filename>
    <member kind="function">
      <type></type>
      <name>ResourcesRoot</name>
      <anchorfile>classiv_1_1ResourcesRoot.html</anchorfile>
      <anchor>a3efd560c0e8ce95c09f8ca4f18909467</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1ResourcesRoot.html</anchorfile>
      <anchor>a61fd14475ff62e3f62fe6f3a018aef54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1ResourcesRoot.html</anchorfile>
      <anchor>af8fa518b1d8d85e3c2a1d35f128afcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Heap</type>
      <name>heap</name>
      <anchorfile>classiv_1_1ResourcesRoot.html</anchorfile>
      <anchor>a420c19cfa2c7f64363cac54d3e1abba9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::reversed</name>
    <filename>structiv_1_1reversed.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>reversed</name>
      <anchorfile>structiv_1_1reversed.html</anchorfile>
      <anchor>a5a810c99610f565321d88e9c6008ae29</anchor>
      <arglist>(T &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>T::reverse_iterator</type>
      <name>begin</name>
      <anchorfile>structiv_1_1reversed.html</anchorfile>
      <anchor>afb858c5b5dce071ecc5c274347e7866c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T::reverse_iterator</type>
      <name>end</name>
      <anchorfile>structiv_1_1reversed.html</anchorfile>
      <anchor>a2215d2ddf5e7bbff1168033a41ff30f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::table_debug_context::RowData</name>
    <filename>structiv_1_1table__debug__context_1_1RowData.html</filename>
    <member kind="variable">
      <type>std::any</type>
      <name>identity</name>
      <anchorfile>structiv_1_1table__debug__context_1_1RowData.html</anchorfile>
      <anchor>a945df28683dc468fb7a9629e3316db54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, ColumnData &gt;</type>
      <name>columns</name>
      <anchorfile>structiv_1_1table__debug__context_1_1RowData.html</anchorfile>
      <anchor>ad92e7801018fd28651b9ec81cd339fce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::table_debug_context::RowHandle</name>
    <filename>classiv_1_1table__debug__context_1_1RowHandle.html</filename>
    <member kind="function">
      <type></type>
      <name>RowHandle</name>
      <anchorfile>classiv_1_1table__debug__context_1_1RowHandle.html</anchorfile>
      <anchor>adce71fc45d5a14c5e16ce8f9d4fcb6ce</anchor>
      <arglist>(TableData *_table, std::any const &amp;row_id)</arglist>
    </member>
    <member kind="function">
      <type>ColumnHandle</type>
      <name>Column</name>
      <anchorfile>classiv_1_1table__debug__context_1_1RowHandle.html</anchorfile>
      <anchor>aae3fe5e7fae73777319cabdf5d519535</anchor>
      <arglist>(char const *col_name, ColumnT &amp;&amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::RuntimeId</name>
    <filename>classiv_1_1RuntimeId.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>aa07c478df1e9eed013ad517a5959d8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a0fb193064080623d78705fdf2fead4f5</anchor>
      <arglist>(int runtime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1266a5d2fdf76bb48cebe1bba5a593b5</anchor>
      <arglist>(const char *persistent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a96d71ae4f31b9af91ff8beddf0144624</anchor>
      <arglist>(const char *persistent, Context *context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>afe2f53e0fd9e2f1d0a78f7d54ea12722</anchor>
      <arglist>(Me const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac72f71678431d0543092eb587c38c66d</anchor>
      <arglist>(Me const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1e6e63d2537fb9b7dfc966c64f54c5fe</anchor>
      <arglist>(Me const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtime_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a91c9dce7e6484dd72a8a953ab42c8c70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>persistent_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a095600a2cebe1dd04732da020cccddaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac18384df7da926bf4c41276f99925498</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Me</type>
      <name>create</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>af5385ead6683502e598f4c26a6a28baa</anchor>
      <arglist>(const char *persistent_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lock</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a4ba40bde850555a874b771b94739a1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>ids_count</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a95696fcef24febf4fb2820538b8704e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a49d8d2392c9a3e7119f75aebde410007</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuntimeId&lt; DVarId &gt;</name>
    <filename>classiv_1_1RuntimeId.html</filename>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>aa07c478df1e9eed013ad517a5959d8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a0fb193064080623d78705fdf2fead4f5</anchor>
      <arglist>(int runtime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1266a5d2fdf76bb48cebe1bba5a593b5</anchor>
      <arglist>(const char *persistent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a96d71ae4f31b9af91ff8beddf0144624</anchor>
      <arglist>(const char *persistent, Context *context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>afe2f53e0fd9e2f1d0a78f7d54ea12722</anchor>
      <arglist>(DVarId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac72f71678431d0543092eb587c38c66d</anchor>
      <arglist>(DVarId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1e6e63d2537fb9b7dfc966c64f54c5fe</anchor>
      <arglist>(DVarId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtime_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a91c9dce7e6484dd72a8a953ab42c8c70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>persistent_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a095600a2cebe1dd04732da020cccddaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac18384df7da926bf4c41276f99925498</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DVarId</type>
      <name>create</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>af5385ead6683502e598f4c26a6a28baa</anchor>
      <arglist>(const char *persistent_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lock</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a4ba40bde850555a874b771b94739a1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>ids_count</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a95696fcef24febf4fb2820538b8704e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a49d8d2392c9a3e7119f75aebde410007</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuntimeId&lt; InputId &gt;</name>
    <filename>classiv_1_1RuntimeId.html</filename>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>aa07c478df1e9eed013ad517a5959d8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a0fb193064080623d78705fdf2fead4f5</anchor>
      <arglist>(int runtime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1266a5d2fdf76bb48cebe1bba5a593b5</anchor>
      <arglist>(const char *persistent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a96d71ae4f31b9af91ff8beddf0144624</anchor>
      <arglist>(const char *persistent, Context *context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>afe2f53e0fd9e2f1d0a78f7d54ea12722</anchor>
      <arglist>(InputId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac72f71678431d0543092eb587c38c66d</anchor>
      <arglist>(InputId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1e6e63d2537fb9b7dfc966c64f54c5fe</anchor>
      <arglist>(InputId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtime_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a91c9dce7e6484dd72a8a953ab42c8c70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>persistent_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a095600a2cebe1dd04732da020cccddaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac18384df7da926bf4c41276f99925498</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InputId</type>
      <name>create</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>af5385ead6683502e598f4c26a6a28baa</anchor>
      <arglist>(const char *persistent_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lock</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a4ba40bde850555a874b771b94739a1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>ids_count</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a95696fcef24febf4fb2820538b8704e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a49d8d2392c9a3e7119f75aebde410007</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuntimeId&lt; LogId &gt;</name>
    <filename>classiv_1_1RuntimeId.html</filename>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>aa07c478df1e9eed013ad517a5959d8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a0fb193064080623d78705fdf2fead4f5</anchor>
      <arglist>(int runtime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1266a5d2fdf76bb48cebe1bba5a593b5</anchor>
      <arglist>(const char *persistent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a96d71ae4f31b9af91ff8beddf0144624</anchor>
      <arglist>(const char *persistent, Context *context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>afe2f53e0fd9e2f1d0a78f7d54ea12722</anchor>
      <arglist>(LogId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac72f71678431d0543092eb587c38c66d</anchor>
      <arglist>(LogId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1e6e63d2537fb9b7dfc966c64f54c5fe</anchor>
      <arglist>(LogId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtime_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a91c9dce7e6484dd72a8a953ab42c8c70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>persistent_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a095600a2cebe1dd04732da020cccddaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac18384df7da926bf4c41276f99925498</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LogId</type>
      <name>create</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>af5385ead6683502e598f4c26a6a28baa</anchor>
      <arglist>(const char *persistent_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lock</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a4ba40bde850555a874b771b94739a1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>ids_count</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a95696fcef24febf4fb2820538b8704e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a49d8d2392c9a3e7119f75aebde410007</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuntimeId&lt; LumaStyleId &gt;</name>
    <filename>classiv_1_1RuntimeId.html</filename>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>aa07c478df1e9eed013ad517a5959d8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a0fb193064080623d78705fdf2fead4f5</anchor>
      <arglist>(int runtime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1266a5d2fdf76bb48cebe1bba5a593b5</anchor>
      <arglist>(const char *persistent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a96d71ae4f31b9af91ff8beddf0144624</anchor>
      <arglist>(const char *persistent, Context *context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>afe2f53e0fd9e2f1d0a78f7d54ea12722</anchor>
      <arglist>(LumaStyleId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac72f71678431d0543092eb587c38c66d</anchor>
      <arglist>(LumaStyleId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1e6e63d2537fb9b7dfc966c64f54c5fe</anchor>
      <arglist>(LumaStyleId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtime_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a91c9dce7e6484dd72a8a953ab42c8c70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>persistent_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a095600a2cebe1dd04732da020cccddaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac18384df7da926bf4c41276f99925498</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LumaStyleId</type>
      <name>create</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>af5385ead6683502e598f4c26a6a28baa</anchor>
      <arglist>(const char *persistent_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lock</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a4ba40bde850555a874b771b94739a1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>ids_count</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a95696fcef24febf4fb2820538b8704e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a49d8d2392c9a3e7119f75aebde410007</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuntimeId&lt; RandomId &gt;</name>
    <filename>classiv_1_1RuntimeId.html</filename>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>aa07c478df1e9eed013ad517a5959d8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a0fb193064080623d78705fdf2fead4f5</anchor>
      <arglist>(int runtime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1266a5d2fdf76bb48cebe1bba5a593b5</anchor>
      <arglist>(const char *persistent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a96d71ae4f31b9af91ff8beddf0144624</anchor>
      <arglist>(const char *persistent, Context *context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>afe2f53e0fd9e2f1d0a78f7d54ea12722</anchor>
      <arglist>(RandomId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac72f71678431d0543092eb587c38c66d</anchor>
      <arglist>(RandomId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1e6e63d2537fb9b7dfc966c64f54c5fe</anchor>
      <arglist>(RandomId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtime_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a91c9dce7e6484dd72a8a953ab42c8c70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>persistent_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a095600a2cebe1dd04732da020cccddaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac18384df7da926bf4c41276f99925498</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RandomId</type>
      <name>create</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>af5385ead6683502e598f4c26a6a28baa</anchor>
      <arglist>(const char *persistent_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lock</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a4ba40bde850555a874b771b94739a1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>ids_count</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a95696fcef24febf4fb2820538b8704e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a49d8d2392c9a3e7119f75aebde410007</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuntimeId&lt; TableId &gt;</name>
    <filename>classiv_1_1RuntimeId.html</filename>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>aa07c478df1e9eed013ad517a5959d8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a0fb193064080623d78705fdf2fead4f5</anchor>
      <arglist>(int runtime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1266a5d2fdf76bb48cebe1bba5a593b5</anchor>
      <arglist>(const char *persistent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a96d71ae4f31b9af91ff8beddf0144624</anchor>
      <arglist>(const char *persistent, Context *context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>afe2f53e0fd9e2f1d0a78f7d54ea12722</anchor>
      <arglist>(TableId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac72f71678431d0543092eb587c38c66d</anchor>
      <arglist>(TableId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1e6e63d2537fb9b7dfc966c64f54c5fe</anchor>
      <arglist>(TableId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtime_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a91c9dce7e6484dd72a8a953ab42c8c70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>persistent_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a095600a2cebe1dd04732da020cccddaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac18384df7da926bf4c41276f99925498</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TableId</type>
      <name>create</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>af5385ead6683502e598f4c26a6a28baa</anchor>
      <arglist>(const char *persistent_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lock</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a4ba40bde850555a874b771b94739a1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>ids_count</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a95696fcef24febf4fb2820538b8704e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a49d8d2392c9a3e7119f75aebde410007</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuntimeId&lt; TimeId &gt;</name>
    <filename>classiv_1_1RuntimeId.html</filename>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>aa07c478df1e9eed013ad517a5959d8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a0fb193064080623d78705fdf2fead4f5</anchor>
      <arglist>(int runtime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1266a5d2fdf76bb48cebe1bba5a593b5</anchor>
      <arglist>(const char *persistent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeId</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a96d71ae4f31b9af91ff8beddf0144624</anchor>
      <arglist>(const char *persistent, Context *context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>afe2f53e0fd9e2f1d0a78f7d54ea12722</anchor>
      <arglist>(TimeId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac72f71678431d0543092eb587c38c66d</anchor>
      <arglist>(TimeId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a1e6e63d2537fb9b7dfc966c64f54c5fe</anchor>
      <arglist>(TimeId const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtime_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a91c9dce7e6484dd72a8a953ab42c8c70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>persistent_value</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a095600a2cebe1dd04732da020cccddaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>ac18384df7da926bf4c41276f99925498</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeId</type>
      <name>create</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>af5385ead6683502e598f4c26a6a28baa</anchor>
      <arglist>(const char *persistent_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lock</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a4ba40bde850555a874b771b94739a1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>ids_count</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a95696fcef24febf4fb2820538b8704e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1RuntimeId.html</anchorfile>
      <anchor>a49d8d2392c9a3e7119f75aebde410007</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::RuntimeIdDictionary</name>
    <filename>structiv_1_1RuntimeIdDictionary.html</filename>
    <member kind="function">
      <type>runtime_id::Dictionary *</type>
      <name>dict</name>
      <anchorfile>structiv_1_1RuntimeIdDictionary.html</anchorfile>
      <anchor>a028f63eda22d16b7b87707e50f27965c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Scroller</name>
    <filename>classiv_1_1Scroller.html</filename>
    <base>OneChildElem&lt; SlotChild &gt;</base>
    <base>iv::SlotChild</base>
    <base protection="private">iv::FixedUpdateClient</base>
    <base protection="private">iv::FrameUpdateClient</base>
    <base protection="protected">iv::PrivValAttr_Owner</base>
    <member kind="function">
      <type></type>
      <name>Scroller</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a0ffd94eb955d062c3b77d5d3aacf56fe</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a8dd1ec5e092793249472d1d4dd1868da</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>Scroller *</type>
      <name>input_id</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a3dcb09f233eebb391dfc714a1cb8d359</anchor>
      <arglist>(InputId)</arglist>
    </member>
    <member kind="function">
      <type>InputId</type>
      <name>input_id</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a7f255a773eb35fb1174e8750da97fb5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scroller *</type>
      <name>enabled</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a7ae3eaf696bae687145145a63d4df516</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a71c4b2b63f2133bf2bae3b5f475d354f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivValAttr&lt; float &gt;</type>
      <name>attr_position</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a5912d852157c46da9abcb43ce7d940dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivValAttr&lt; float &gt;</type>
      <name>attr_outsize</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a75e2be9e22355f3cf66904dafb2fb203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivValAttr&lt; float &gt;</type>
      <name>attr_insize</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a314d7420b7c8b1624f68a940c00b2a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivValAttr&lt; float &gt;</type>
      <name>attr_overlapTop</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a41676c89ac878011deabc8977f1b5858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrivValAttr&lt; float &gt;</type>
      <name>attr_overlapBottom</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a4e6b14868d2a37c2ac3a4745c6dec2ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>af42c5aa4aad2625a722f34c26e420322</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>a5b3a634f666850d49c9e59c528ffd646</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_process</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>ab8c31ce25a8795343ce0e596714363f0</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key, bool &amp;press, bool &amp;real, bool &amp;offspace) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>input_trigger_process</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>ace22ad6490765f60890bd61502d0b37a</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixed_update</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>acbeb99cf796687a4fd344e26a9f1f367</anchor>
      <arglist>(TimeId time, int time_step, int steps) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>frame_update</name>
      <anchorfile>classiv_1_1Scroller.html</anchorfile>
      <anchor>ad6d47e9e7bd6208f30c99f60b6c90358</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Shader</name>
    <filename>classiv_1_1Shader.html</filename>
    <member kind="function">
      <type></type>
      <name>Shader</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>a40282d2339abfe6d5fab095504831adb</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Shader</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>a5caaaa9272031af44c7382ffd1b4ae95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>a6342b7cf5e5ddf02aece1bf14ae3a0ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>a840fca80a1e11aa3cfd5bdcb5b9fcbd2</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadProgram</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>a6e23789f767e27a4af276f70327d3121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BindAttribute</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>ab96c16afb324371e1c664353643d005a</anchor>
      <arglist>(GLuint location, const char *attrib_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PositionAttributeName</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>ae3360cc8f74095b0c466062e82605dc4</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LinkProgram</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>aba18c96e3b67f262dcac90773971f717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnloadProgram</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>a4c1923087f731b29f0c076879290cab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DropProgram</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>a34a4b6621aa1ccb77a27a696f1a536f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GlProgram *</type>
      <name>gl_program</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>a276f268f9f6a577d4d0ed95e9349990c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>GetUniformLocation</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>a272e058bd94eb0c8a78ab0d896ce0dc8</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Shader.html</anchorfile>
      <anchor>ae06afe8899d3c5a9a0982149410623c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::ShaderScissor</name>
    <filename>structiv_1_1ShaderScissor.html</filename>
    <member kind="function">
      <type></type>
      <name>ShaderScissor</name>
      <anchorfile>structiv_1_1ShaderScissor.html</anchorfile>
      <anchor>a21d15a631e2024f29b283382b64c4266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShaderScissor</name>
      <anchorfile>structiv_1_1ShaderScissor.html</anchorfile>
      <anchor>a2316a23dabc7a3d1c29300652d880559</anchor>
      <arglist>(ShaderScissor const &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const ShaderScissor &amp;</type>
      <name>operator*</name>
      <anchorfile>structiv_1_1ShaderScissor.html</anchorfile>
      <anchor>aa9a39d2c6a714521e200f89e13549d2e</anchor>
      <arglist>(ShaderScissor const &amp;right) const</arglist>
    </member>
    <member kind="function">
      <type>ShaderScissor &amp;</type>
      <name>operator*=</name>
      <anchorfile>structiv_1_1ShaderScissor.html</anchorfile>
      <anchor>a7c7e3ba09d46390ee07550b4eb6b726d</anchor>
      <arglist>(ShaderScissor const &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structiv_1_1ShaderScissor.html</anchorfile>
      <anchor>af4bbad657fbd2a399b0c2bbf1c28bb8d</anchor>
      <arglist>(ShaderScissor const &amp;right) const</arglist>
    </member>
    <member kind="variable">
      <type>float4x4</type>
      <name>model</name>
      <anchorfile>structiv_1_1ShaderScissor.html</anchorfile>
      <anchor>a91e6cb4f56d52943426ea232e2fb2817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float3</type>
      <name>size</name>
      <anchorfile>structiv_1_1ShaderScissor.html</anchorfile>
      <anchor>af2153641ae75d163f64027477275bfa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>structiv_1_1ShaderScissor.html</anchorfile>
      <anchor>ac2826d5c6f8a6385e2eb9f1fe4f2fc99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SharedAttr</name>
    <filename>classiv_1_1SharedAttr.html</filename>
    <templarg></templarg>
    <base protection="private">iv::Local_AEP</base>
    <base>iv::SharedAttr_I</base>
    <member kind="function">
      <type></type>
      <name>SharedAttr</name>
      <anchorfile>classiv_1_1SharedAttr.html</anchorfile>
      <anchor>a77bbace937827b7f8a8b82e155c06790</anchor>
      <arglist>(ClientMarker *cm, T const &amp;initial_value=T())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedAttr</name>
      <anchorfile>classiv_1_1SharedAttr.html</anchorfile>
      <anchor>a8c7071989232f53f425963cd250e04d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SharedAttr_I</name>
    <filename>classiv_1_1SharedAttr__I.html</filename>
    <templarg></templarg>
    <base>iv::Attr</base>
    <member kind="function">
      <type></type>
      <name>SharedAttr_I</name>
      <anchorfile>classiv_1_1SharedAttr__I.html</anchorfile>
      <anchor>a322ba6b52386580d8c9394a3e16f2e36</anchor>
      <arglist>(ClientMarker *cm, AttributeEventProcessor *, T const &amp;initial_value=T())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetSourceValue</name>
      <anchorfile>classiv_1_1SharedAttr__I.html</anchorfile>
      <anchor>a4adb697b6e98365c126385192200304b</anchor>
      <arglist>(T &amp;out) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ModifySource</name>
      <anchorfile>classiv_1_1SharedAttr__I.html</anchorfile>
      <anchor>af1d16d53688cb4c702ce515e07b3e6fd</anchor>
      <arglist>(T const &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SimpleDiagnostics</name>
    <filename>classiv_1_1SimpleDiagnostics.html</filename>
    <base>iv::InputNode</base>
    <base>iv::ConfigStream</base>
    <base protection="private">iv::Ostream_TextDebugView</base>
    <base protection="private">iv::SimpleLogger</base>
    <member kind="function">
      <type></type>
      <name>SimpleDiagnostics</name>
      <anchorfile>classiv_1_1SimpleDiagnostics.html</anchorfile>
      <anchor>af016c780521bb463c6228e6b6833e8d9</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleDiagnostics</name>
      <anchorfile>classiv_1_1SimpleDiagnostics.html</anchorfile>
      <anchor>a0280b2d8f895b0774b9f6b0fb9cd76b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_systems</name>
      <anchorfile>classiv_1_1SimpleDiagnostics.html</anchorfile>
      <anchor>ada108c97ddc461b1e4fd1c4d7680814f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartupDump</name>
      <anchorfile>classiv_1_1SimpleDiagnostics.html</anchorfile>
      <anchor>aff2436c0479cdb1f721680816fa997f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SimpleDiagnostics.html</anchorfile>
      <anchor>a599f4f38a2c3d929f95e848d4450d379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SimpleDiagnostics.html</anchorfile>
      <anchor>afcb49ca9d705dc805fc62c1a63b649a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>input_trigger_process</name>
      <anchorfile>classiv_1_1SimpleDiagnostics.html</anchorfile>
      <anchor>a72e19a5389bb21b4d9ac80a392d10c9e</anchor>
      <arglist>(InputRoot *root, Input::DeviceKey key) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>config_stream_changed</name>
      <anchorfile>classiv_1_1SimpleDiagnostics.html</anchorfile>
      <anchor>aa22872c24588fd52937aded23ab795cb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SimpleLogger::Flags</type>
      <name>ClientLogFlags</name>
      <anchorfile>classiv_1_1SimpleDiagnostics.html</anchorfile>
      <anchor>a19103bc0ee6365de9459b5041279d651</anchor>
      <arglist>(ClientMarker const *marker, LogId id) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SimpleLogger::Flags</type>
      <name>SystemLogFlags</name>
      <anchorfile>classiv_1_1SimpleDiagnostics.html</anchorfile>
      <anchor>a605aa1c330141756c0418f7b787da9c9</anchor>
      <arglist>(System const *system, LogId id) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SimpleLogger</name>
    <filename>classiv_1_1SimpleLogger.html</filename>
    <base>iv::DebugInstanceListener</base>
    <member kind="enumeration">
      <type></type>
      <name>Flags</name>
      <anchorfile>classiv_1_1SimpleLogger.html</anchorfile>
      <anchor>ae8f62b8229508252a141c36891c03dd4</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1SimpleLogger.html" anchor="ae8f62b8229508252a141c36891c03dd4ab9f5c797ebbf55adccdd8539a65a0241">Disabled</enumvalue>
      <enumvalue file="classiv_1_1SimpleLogger.html" anchor="ae8f62b8229508252a141c36891c03dd4a00d23a76e43b46dae9ec7aa9dcbebb32">Enabled</enumvalue>
      <enumvalue file="classiv_1_1SimpleLogger.html" anchor="ae8f62b8229508252a141c36891c03dd4a278d01e5af56273bae1bb99a98b370cd">Critical</enumvalue>
      <enumvalue file="classiv_1_1SimpleLogger.html" anchor="ae8f62b8229508252a141c36891c03dd4ab5f4bea715b6d962e54881f3d9c4ea08">SrcInfo</enumvalue>
      <enumvalue file="classiv_1_1SimpleLogger.html" anchor="ae8f62b8229508252a141c36891c03dd4aeaa981d5699d89e085a11064aee37d91">InstanceDump</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleLogger</name>
      <anchorfile>classiv_1_1SimpleLogger.html</anchorfile>
      <anchor>af191babc64699718f340540f2ffed39a</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SimpleLogger.html</anchorfile>
      <anchor>a0e0be1e9581b90a6b1984c71a42623d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Flags</type>
      <name>ClientLogFlags</name>
      <anchorfile>classiv_1_1SimpleLogger.html</anchorfile>
      <anchor>ab625f1982f68f9544860b5212ab189aa</anchor>
      <arglist>(ClientMarker const *marker, LogId id)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Flags</type>
      <name>SystemLogFlags</name>
      <anchorfile>classiv_1_1SimpleLogger.html</anchorfile>
      <anchor>a4c5d57aecb3b9f57c72f21ad692cf5fd</anchor>
      <arglist>(System const *system, LogId id)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SimpleSplash</name>
    <filename>classiv_1_1SimpleSplash.html</filename>
    <base>iv::Slot</base>
    <base>iv::DelayedLoader</base>
    <member kind="function">
      <type></type>
      <name>SimpleSplash</name>
      <anchorfile>classiv_1_1SimpleSplash.html</anchorfile>
      <anchor>a99c4a26fc3d63ab9c39b186f9be7762d</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SimpleSplash.html</anchorfile>
      <anchor>a146321729d29905e940efe0a940d35f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>LoadStart</name>
      <anchorfile>classiv_1_1SimpleSplash.html</anchorfile>
      <anchor>a1aafefa565d2613aefe6f599726ea6da</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>LoadFinish</name>
      <anchorfile>classiv_1_1SimpleSplash.html</anchorfile>
      <anchor>ae88f53dc3cf8870e9ce2e20756bc2860</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SingularResource</name>
    <filename>classiv_1_1SingularResource.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SingularResource</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a44a01b0a23fd16391979655a1489beb8</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path=ResourcePath())</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>acef61ac6c46283b7c89a9de79e08cbf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>path</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>ab68e9b66adfffd09757ae1da3e919f45</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const RT *</type>
      <name>get</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a9c13e5fa1ebfafc75034c7f2854d14a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RT &amp;</type>
      <name>operator*</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a17eec502ddcf363a2fda97d1d0f9f6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RT *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a8b7f311dcf0ed22e636fb2fbb47ff6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a16cce07ceb1ee849d225455f78cf8c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingularResource&lt; DataStream &gt;</name>
    <filename>classiv_1_1SingularResource.html</filename>
    <member kind="function">
      <type></type>
      <name>SingularResource</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a44a01b0a23fd16391979655a1489beb8</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path=ResourcePath())</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>acef61ac6c46283b7c89a9de79e08cbf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>path</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>ab68e9b66adfffd09757ae1da3e919f45</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const DataStream *</type>
      <name>get</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a9c13e5fa1ebfafc75034c7f2854d14a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DataStream &amp;</type>
      <name>operator*</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a17eec502ddcf363a2fda97d1d0f9f6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DataStream *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a8b7f311dcf0ed22e636fb2fbb47ff6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a16cce07ceb1ee849d225455f78cf8c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingularResource&lt; FlatShader &gt;</name>
    <filename>classiv_1_1SingularResource.html</filename>
    <member kind="function">
      <type></type>
      <name>SingularResource</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a44a01b0a23fd16391979655a1489beb8</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path=ResourcePath())</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>acef61ac6c46283b7c89a9de79e08cbf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>path</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>ab68e9b66adfffd09757ae1da3e919f45</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const FlatShader *</type>
      <name>get</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a9c13e5fa1ebfafc75034c7f2854d14a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FlatShader &amp;</type>
      <name>operator*</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a17eec502ddcf363a2fda97d1d0f9f6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FlatShader *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a8b7f311dcf0ed22e636fb2fbb47ff6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a16cce07ceb1ee849d225455f78cf8c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingularResource&lt; Font &gt;</name>
    <filename>classiv_1_1SingularResource.html</filename>
    <member kind="function">
      <type></type>
      <name>SingularResource</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a44a01b0a23fd16391979655a1489beb8</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path=ResourcePath())</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>acef61ac6c46283b7c89a9de79e08cbf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>path</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>ab68e9b66adfffd09757ae1da3e919f45</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const Font *</type>
      <name>get</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a9c13e5fa1ebfafc75034c7f2854d14a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>operator*</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a17eec502ddcf363a2fda97d1d0f9f6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Font *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a8b7f311dcf0ed22e636fb2fbb47ff6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a16cce07ceb1ee849d225455f78cf8c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingularResource&lt; Mesh &gt;</name>
    <filename>classiv_1_1SingularResource.html</filename>
    <member kind="function">
      <type></type>
      <name>SingularResource</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a44a01b0a23fd16391979655a1489beb8</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path=ResourcePath())</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>acef61ac6c46283b7c89a9de79e08cbf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>path</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>ab68e9b66adfffd09757ae1da3e919f45</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const Mesh *</type>
      <name>get</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a9c13e5fa1ebfafc75034c7f2854d14a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Mesh &amp;</type>
      <name>operator*</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a17eec502ddcf363a2fda97d1d0f9f6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Mesh *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a8b7f311dcf0ed22e636fb2fbb47ff6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a16cce07ceb1ee849d225455f78cf8c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingularResource&lt; Texture &gt;</name>
    <filename>classiv_1_1SingularResource.html</filename>
    <member kind="function">
      <type></type>
      <name>SingularResource</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a44a01b0a23fd16391979655a1489beb8</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path=ResourcePath())</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>acef61ac6c46283b7c89a9de79e08cbf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>path</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>ab68e9b66adfffd09757ae1da3e919f45</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const Texture *</type>
      <name>get</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a9c13e5fa1ebfafc75034c7f2854d14a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Texture &amp;</type>
      <name>operator*</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a17eec502ddcf363a2fda97d1d0f9f6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Texture *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a8b7f311dcf0ed22e636fb2fbb47ff6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a16cce07ceb1ee849d225455f78cf8c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingularResource&lt; XcfInfo &gt;</name>
    <filename>classiv_1_1SingularResource.html</filename>
    <member kind="function">
      <type></type>
      <name>SingularResource</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a44a01b0a23fd16391979655a1489beb8</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path=ResourcePath())</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>acef61ac6c46283b7c89a9de79e08cbf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>path</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>ab68e9b66adfffd09757ae1da3e919f45</anchor>
      <arglist>(ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const XcfInfo *</type>
      <name>get</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a9c13e5fa1ebfafc75034c7f2854d14a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const XcfInfo &amp;</type>
      <name>operator*</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a17eec502ddcf363a2fda97d1d0f9f6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const XcfInfo *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a8b7f311dcf0ed22e636fb2fbb47ff6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SingularResource.html</anchorfile>
      <anchor>a16cce07ceb1ee849d225455f78cf8c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Slot</name>
    <filename>classiv_1_1Slot.html</filename>
    <base>VectorChildrenElem&lt; SlotChild &gt;</base>
    <base>iv::SlotChild</base>
    <member kind="function">
      <type></type>
      <name>Slot</name>
      <anchorfile>classiv_1_1Slot.html</anchorfile>
      <anchor>a0da6fbffadad8a338227d98a5f1973ae</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Slot.html</anchorfile>
      <anchor>ad823842726638d785c49da4c7ca66df5</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Slot.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Slot.html</anchorfile>
      <anchor>aedd91a4f4498e7da5af28a570efa49cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1Slot.html</anchorfile>
      <anchor>a4e0492f3a30c14f1586a7de8abf60fa2</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1Slot.html</anchorfile>
      <anchor>a2aabe10135d1cf6ddd7bfcf581cef6e7</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SlotChild</name>
    <filename>classiv_1_1SlotChild.html</filename>
    <base>iv::Pickable</base>
    <member kind="function">
      <type></type>
      <name>SlotChild</name>
      <anchorfile>classiv_1_1SlotChild.html</anchorfile>
      <anchor>ab6d39cb8caa0d146154b906084f8a34e</anchor>
      <arglist>(Elem *elem)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SlotChild.html</anchorfile>
      <anchor>a641ad60657f8edfa151f8a0eecfbed8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1SlotChild.html</anchorfile>
      <anchor>a7368277692bfbba01bafcbe81287a625</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>picking_test</name>
      <anchorfile>classiv_1_1SlotChild.html</anchorfile>
      <anchor>a6aa5afb66db6f6ea540e061b6c999aee</anchor>
      <arglist>(int2 input_pos) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>picking_test_pixel_perfect</name>
      <anchorfile>classiv_1_1SlotChild.html</anchorfile>
      <anchor>ac44e1716ef4b09ca52acbc79a2cbcd83</anchor>
      <arglist>(float2 local_pos)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SlotChild.html</anchorfile>
      <anchor>a2ef3f6cd6a250500f2e27191f685260b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float3 &gt;</type>
      <name>expectedSize</name>
      <anchorfile>classiv_1_1SlotChild.html</anchorfile>
      <anchor>a640d240f8bc41decdf561ba08e1035ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float3 &gt;</type>
      <name>preferredSize</name>
      <anchorfile>classiv_1_1SlotChild.html</anchorfile>
      <anchor>a1167cd88b599e8b1362ba382d5c4c1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float3 &gt;</type>
      <name>size</name>
      <anchorfile>classiv_1_1SlotChild.html</anchorfile>
      <anchor>a1180286bc1c7edd85815e3feb9ac45b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Smoothstep2Transform</name>
    <filename>structiv_1_1Smoothstep2Transform.html</filename>
    <member kind="function">
      <type>Anim_float</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1Smoothstep2Transform.html</anchorfile>
      <anchor>aa6d2b1d64dfc3f1dc773ffa3863dd8fa</anchor>
      <arglist>(Anim_float x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Smoothstep3Transform</name>
    <filename>structiv_1_1Smoothstep3Transform.html</filename>
    <member kind="function">
      <type>Anim_float</type>
      <name>operator()</name>
      <anchorfile>structiv_1_1Smoothstep3Transform.html</anchorfile>
      <anchor>aa91786ff2a88d0fa5adf4c40f60bad56</anchor>
      <arglist>(Anim_float x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Source_AnimNode</name>
    <filename>classiv_1_1Source__AnimNode.html</filename>
    <templarg></templarg>
    <base>iv::AnimNode</base>
    <base>iv::Source_Connector</base>
    <member kind="function">
      <type></type>
      <name>Source_AnimNode</name>
      <anchorfile>classiv_1_1Source__AnimNode.html</anchorfile>
      <anchor>a1195225292f73afb90e1808fafa6117c</anchor>
      <arglist>(Instance *inst, T const &amp;default_value)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Source__AnimNode.html</anchorfile>
      <anchor>a91aca6ecd45d0be351d13aa6488aa624</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Source_Connector</name>
    <filename>classiv_1_1Source__Connector.html</filename>
    <templarg></templarg>
    <base>iv::Field</base>
    <member kind="function">
      <type></type>
      <name>Source_Connector</name>
      <anchorfile>classiv_1_1Source__Connector.html</anchorfile>
      <anchor>a37e1e114e484eabdd4c6e2336054011f</anchor>
      <arglist>(Instance *inst, T const &amp;default_value, AnimNode&lt; T &gt; *child=nullptr, Attr&lt; T &gt; *source=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Source__Connector.html</anchorfile>
      <anchor>af76abeab331269a92b12704bd6fb97c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSource</name>
      <anchorfile>classiv_1_1Source__Connector.html</anchorfile>
      <anchor>abe7804f9995e67b8c3996bff6c090c0b</anchor>
      <arglist>(Attr&lt; T &gt; *source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChild</name>
      <anchorfile>classiv_1_1Source__Connector.html</anchorfile>
      <anchor>a171cdce441ea95ec0ae1db06fdc272c7</anchor>
      <arglist>(AnimNode&lt; T &gt; *child)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Source__Connector.html</anchorfile>
      <anchor>a9c7b97bd26eeaf4f0bd57eac2cdebbe2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SourceInputNode</name>
    <filename>classiv_1_1SourceInputNode.html</filename>
    <base>iv::InputNode</base>
    <base>iv::InputRoot</base>
    <base protection="private">iv::InputBindingListener</base>
    <base>iv::FrameUpdateClient</base>
    <member kind="function">
      <type></type>
      <name>SourceInputNode</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>afb1ea4c07ecab648c3b0b6dce097d4cf</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SourceInputNode</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>a5d59a8419a446ed4f2c6b96cb30df301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>input</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>a87ff70dfe9b2586da702596f12fe2e79</anchor>
      <arglist>(Input const *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add_InputNode</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>ae6750ca6304d82b906d993f07662ac45</anchor>
      <arglist>(InputNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Remove_InputNode</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>adce80d05243f3b23a420aab537402025</anchor>
      <arglist>(InputNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>treeRefresh</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>a9e0b4c62ee72a44a9b8c51170a6ee096</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivateSubtree</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>af5f4e9d6e19f3df3c01cfed0f934d373</anchor>
      <arglist>(InputNode *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reserve_key</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>abc3d4ff73e94153c7d544581ce0e39ae</anchor>
      <arglist>(Input::DeviceKey key, bool reserve) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InputRoot *</type>
      <name>input_getRoot</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>a57da08501af5aa6767a5f1b7b00fcc02</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>input_eachChild</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>a6d2b11e5197f637f8dfff29e09900239</anchor>
      <arglist>(std::function&lt; void(InputNode *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>input_childDisconnect</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>a8b69fa04447def975d7ef59e6bb4bbb8</anchor>
      <arglist>(InputNode *) override</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>a599f4f38a2c3d929f95e848d4450d379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SourceInputNode.html</anchorfile>
      <anchor>a9e82032a28f7b84472c326ee2021a2da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SquareMesh</name>
    <filename>classiv_1_1SquareMesh.html</filename>
    <base>iv::Mesh</base>
    <base protection="private">iv::GlListener</base>
    <member kind="function">
      <type></type>
      <name>SquareMesh</name>
      <anchorfile>classiv_1_1SquareMesh.html</anchorfile>
      <anchor>acf227eee79c5719e77101983aa27dca8</anchor>
      <arglist>(Instance *inst, VirtualResourceProvider const *, SquareMesh_Subprovider const *, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SquareMesh</name>
      <anchorfile>classiv_1_1SquareMesh.html</anchorfile>
      <anchor>a152304e12c4feb1df1a79938174b4a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SquareMesh.html</anchorfile>
      <anchor>a74fd9bc92efa9d5eb5d326d35a74c928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>HasResourcePath</name>
      <anchorfile>classiv_1_1SquareMesh.html</anchorfile>
      <anchor>aea9519ca30f68cbc615e43fe5d2d6ef7</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SquareMesh.html</anchorfile>
      <anchor>a8ef9fc14a0a1d131bc0c22fceca1c17d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const constexpr char *</type>
      <name>VirtualPath</name>
      <anchorfile>classiv_1_1SquareMesh.html</anchorfile>
      <anchor>aa77a6b9545600de94755bb1f4955b48e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SquareMesh_Resource</name>
    <filename>classiv_1_1SquareMesh__Resource.html</filename>
    <base>SingularResource&lt; Mesh &gt;</base>
    <member kind="function">
      <type></type>
      <name>SquareMesh_Resource</name>
      <anchorfile>classiv_1_1SquareMesh__Resource.html</anchorfile>
      <anchor>a85f05bb817724cbe2d6c2e3291f34491</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SquareMesh__Resource.html</anchorfile>
      <anchor>a44c39eb6070dab2860e0d6f3e03b084c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SquareMesh_Subprovider</name>
    <filename>classiv_1_1SquareMesh__Subprovider.html</filename>
    <member kind="function">
      <type></type>
      <name>SquareMesh_Subprovider</name>
      <anchorfile>classiv_1_1SquareMesh__Subprovider.html</anchorfile>
      <anchor>a8a6488c4f931c5489b768a10769a734a</anchor>
      <arglist>(Instance *inst, VirtualResourceProvider const *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>each_resource</name>
      <anchorfile>classiv_1_1SquareMesh__Subprovider.html</anchorfile>
      <anchor>a56f4fea55bbb48c37478be1d7142b2b0</anchor>
      <arglist>(std::function&lt; void(ResourcePath const &amp;) &gt; const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_resource</name>
      <anchorfile>classiv_1_1SquareMesh__Subprovider.html</anchorfile>
      <anchor>a56515bbecebb8df3efeecc75457ac834</anchor>
      <arglist>(ResourcePath const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1SquareMesh__Subprovider.html</anchorfile>
      <anchor>a28b3eef65404ff40724161bc6418d37f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1SquareMesh__Subprovider.html</anchorfile>
      <anchor>a72f40a5bf2191d8f33dcd625879f41c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::SrcInfo</name>
    <filename>structiv_1_1SrcInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>SrcInfo</name>
      <anchorfile>structiv_1_1SrcInfo.html</anchorfile>
      <anchor>a4e7461104e14d6f89c7132a72d60a102</anchor>
      <arglist>(const char *file, int line, const char *func)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>file</name>
      <anchorfile>structiv_1_1SrcInfo.html</anchorfile>
      <anchor>a6824a70b372aeac91cf959262b6eccba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>line</name>
      <anchorfile>structiv_1_1SrcInfo.html</anchorfile>
      <anchor>ab4da19e6615d4d4961ad573da3b5a5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>func</name>
      <anchorfile>structiv_1_1SrcInfo.html</anchorfile>
      <anchor>acc727146f551a412403fbf428f06c991</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SS</name>
    <filename>classiv_1_1SS.html</filename>
    <class kind="struct">iv::SS::c_str</class>
    <class kind="struct">iv::SS::str</class>
    <member kind="function">
      <type></type>
      <name>SS</name>
      <anchorfile>classiv_1_1SS.html</anchorfile>
      <anchor>ae5fb3b5e09a0aa2153ed190e6cac6ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SS</name>
      <anchorfile>classiv_1_1SS.html</anchorfile>
      <anchor>a8d1e8abd7a3a3271c86f0e2f5e5083f3</anchor>
      <arglist>(char const *val)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classiv_1_1SS.html</anchorfile>
      <anchor>a53ed9088dadeff482f80b72dc3e2cba2</anchor>
      <arglist>(str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classiv_1_1SS.html</anchorfile>
      <anchor>a1e797d5fd15c6fc7cc1ca4283d1eb105</anchor>
      <arglist>(str) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classiv_1_1SS.html</anchorfile>
      <anchor>a0e87850f3a8099f8c8932fcd02c4468c</anchor>
      <arglist>(c_str)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classiv_1_1SS.html</anchorfile>
      <anchor>acdf98c2d28da3bf61418ab7e94bfc857</anchor>
      <arglist>(c_str) const</arglist>
    </member>
    <member kind="function">
      <type>SS &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classiv_1_1SS.html</anchorfile>
      <anchor>a735e3cf2d3e444a5d5e6601d197fad61</anchor>
      <arglist>(Type const &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::State_AnimNode</name>
    <filename>classiv_1_1State__AnimNode.html</filename>
    <templarg></templarg>
    <base>iv::AnimNode</base>
    <base>iv::Destination_Connector</base>
    <member kind="function">
      <type></type>
      <name>State_AnimNode</name>
      <anchorfile>classiv_1_1State__AnimNode.html</anchorfile>
      <anchor>a7dcf710a026e3c7b0381e2c24dcb6426</anchor>
      <arglist>(Instance *inst, T const &amp;initial)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1State__AnimNode.html</anchorfile>
      <anchor>a74ec19ae4b202ade52b23a82f8e3a4ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::ClientMarker::Status</name>
    <filename>structiv_1_1ClientMarker_1_1Status.html</filename>
  </compound>
  <compound kind="struct">
    <name>iv::SS::str</name>
    <filename>structiv_1_1SS_1_1str.html</filename>
  </compound>
  <compound kind="class">
    <name>iv::StreamFont</name>
    <filename>classiv_1_1StreamFont.html</filename>
    <base protection="private">iv::StreamResource</base>
    <base>iv::Font</base>
    <member kind="function">
      <type></type>
      <name>StreamFont</name>
      <anchorfile>classiv_1_1StreamFont.html</anchorfile>
      <anchor>a72689f8c9600b07c3ec28cd75b9dce66</anchor>
      <arglist>(Instance *inst, StreamResourceProvider const *provider, StreamFont_Subprovider const *, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1StreamFont.html</anchorfile>
      <anchor>a0e1a0d41dda216a6e0d03419bc49d043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1StreamFont.html</anchorfile>
      <anchor>ac57cd03601f95e479b23f0118e6c571f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::StreamFont_Subprovider</name>
    <filename>classiv_1_1StreamFont__Subprovider.html</filename>
    <base>iv::Plain_StreamResourceSubprovider</base>
    <member kind="function">
      <type></type>
      <name>StreamFont_Subprovider</name>
      <anchorfile>classiv_1_1StreamFont__Subprovider.html</anchorfile>
      <anchor>ade36c7870e06364ceb6c624d2f9f273e</anchor>
      <arglist>(Instance *inst, StreamResourceProvider const *)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1StreamFont__Subprovider.html</anchorfile>
      <anchor>a245723a1b57dbbad130aab662695739c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::StreamResource</name>
    <filename>classiv_1_1StreamResource.html</filename>
    <member kind="function">
      <type></type>
      <name>StreamResource</name>
      <anchorfile>classiv_1_1StreamResource.html</anchorfile>
      <anchor>afd33d4c5c2375fd3e065ce9680233d7d</anchor>
      <arglist>(Instance *inst, StreamResourceProvider const *provider, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1StreamResource.html</anchorfile>
      <anchor>a0e1a0d41dda216a6e0d03419bc49d043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1StreamResource.html</anchorfile>
      <anchor>a7c107f98ee481426c2cfa560449b1896</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>with_resource_stream</name>
      <anchorfile>classiv_1_1StreamResource.html</anchorfile>
      <anchor>a6ec2532d4302dca587d2a4b9b3bc2550</anchor>
      <arglist>(std::function&lt; void(std::istream &amp;) &gt; const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>ResourcePath</type>
      <name>resource_path</name>
      <anchorfile>classiv_1_1StreamResource.html</anchorfile>
      <anchor>a46bc8abfd1505a744a7849b8e83479a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1StreamResource.html</anchorfile>
      <anchor>a761eba1c2ff1b58a192a7a616b775dc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::StreamResourceProvider</name>
    <filename>classiv_1_1StreamResourceProvider.html</filename>
    <base protection="private">iv::ResourceProvider</base>
    <member kind="function">
      <type></type>
      <name>StreamResourceProvider</name>
      <anchorfile>classiv_1_1StreamResourceProvider.html</anchorfile>
      <anchor>a6fa4d3b928558cd938b09057454446c6</anchor>
      <arglist>(Instance *inst, size_t priority)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>with_metadata_stream</name>
      <anchorfile>classiv_1_1StreamResourceProvider.html</anchorfile>
      <anchor>a2ce2a861b8db2ae44cc58594de464197</anchor>
      <arglist>(std::function&lt; void(std::istream &amp;) &gt; const &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>with_stream</name>
      <anchorfile>classiv_1_1StreamResourceProvider.html</anchorfile>
      <anchor>ad5b96c3fbb98118b26b75bb3fca9e16b</anchor>
      <arglist>(ResourcePath const &amp;path, std::function&lt; void(std::istream &amp;) &gt; const &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1StreamResourceProvider.html</anchorfile>
      <anchor>a1cb8383882b63517bf71f1a3272a242e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegisterType</name>
      <anchorfile>classiv_1_1StreamResourceProvider.html</anchorfile>
      <anchor>a0ddb0232f6f104c4865ae9aa9546a42e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>UnregisterAllTypes</name>
      <anchorfile>classiv_1_1StreamResourceProvider.html</anchorfile>
      <anchor>a9f816960fc4069d82fe1f744e66bd943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1StreamResourceProvider.html</anchorfile>
      <anchor>a552775eb89c8e0d1a97a2a6ee7995dc8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::StreamResourceSubprovider</name>
    <filename>classiv_1_1StreamResourceSubprovider.html</filename>
    <member kind="function">
      <type></type>
      <name>StreamResourceSubprovider</name>
      <anchorfile>classiv_1_1StreamResourceSubprovider.html</anchorfile>
      <anchor>a60bc8227591273886165df367cd4f776</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1StreamResourceSubprovider.html</anchorfile>
      <anchor>a65ab9ed6b1d635448d72241d28726761</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1StreamResourceSubprovider.html</anchorfile>
      <anchor>a0c15c8fd492922ef6ae5aa985d57fae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Parse_EachResource</name>
      <anchorfile>classiv_1_1StreamResourceSubprovider.html</anchorfile>
      <anchor>a6c6315e2e1243b7d72dd6d54a8ef54d6</anchor>
      <arglist>(std::istream &amp;metadata_file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Parse_EachParameter</name>
      <anchorfile>classiv_1_1StreamResourceSubprovider.html</anchorfile>
      <anchor>ad4a4d3c9d3bb78d0ba4444543faddc8c</anchor>
      <arglist>(std::function&lt; void(std::string const &amp;param, std::string const &amp;val) &gt; const &amp;=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Resource</name>
      <anchorfile>classiv_1_1StreamResourceSubprovider.html</anchorfile>
      <anchor>a967020c0073afcad6825c86325daa353</anchor>
      <arglist>(std::string const &amp;resource_class, ResourcePath path)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::StreamTexture</name>
    <filename>classiv_1_1StreamTexture.html</filename>
    <base>iv::Texture</base>
    <base protection="private">iv::StreamResource</base>
    <base protection="protected">iv::GlListener</base>
    <base protection="protected">iv::DelayedLoad</base>
    <member kind="function">
      <type></type>
      <name>StreamTexture</name>
      <anchorfile>classiv_1_1StreamTexture.html</anchorfile>
      <anchor>af241d1961e483c78e57e4f69f350636b</anchor>
      <arglist>(Instance *inst, StreamResourceProvider const *provider, StreamTexture_Subprovider const *subprovider, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StreamTexture</name>
      <anchorfile>classiv_1_1StreamTexture.html</anchorfile>
      <anchor>a482a2e65eb94202ef1db1b8b394425ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1StreamTexture.html</anchorfile>
      <anchor>a345901b9fbfa0eafeec15ea31d7520a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1StreamTexture.html</anchorfile>
      <anchor>a12ae707faddfe1d78868f263802fa8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GlEnable</name>
      <anchorfile>classiv_1_1StreamTexture.html</anchorfile>
      <anchor>a5bd02a8b1af6263ea5353a23e812b8c4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GlDisable</name>
      <anchorfile>classiv_1_1StreamTexture.html</anchorfile>
      <anchor>aac979dae7ea60c009eee7ff4f853d9b1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GlDrop</name>
      <anchorfile>classiv_1_1StreamTexture.html</anchorfile>
      <anchor>a987bac2165b8f687fa2788a6c969fb57</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Load</name>
      <anchorfile>classiv_1_1StreamTexture.html</anchorfile>
      <anchor>ac16f49b52bccaabaaed5bae2afa5e694</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GlMinFiltering</type>
      <name>min_filtering</name>
      <anchorfile>classiv_1_1StreamTexture.html</anchorfile>
      <anchor>a548bc64f76aa5b856e455082b379f6c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GlMagFiltering</type>
      <name>mag_filtering</name>
      <anchorfile>classiv_1_1StreamTexture.html</anchorfile>
      <anchor>af52e0705d7c935560df9339e397078e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::StreamTexture_Subprovider</name>
    <filename>classiv_1_1StreamTexture__Subprovider.html</filename>
    <base protection="private">iv::StreamResourceSubprovider</base>
    <member kind="function">
      <type></type>
      <name>StreamTexture_Subprovider</name>
      <anchorfile>classiv_1_1StreamTexture__Subprovider.html</anchorfile>
      <anchor>a2f9f6857338fe29d7e3435bdc286bf21</anchor>
      <arglist>(Instance *inst, StreamResourceProvider const *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>each_resource</name>
      <anchorfile>classiv_1_1StreamTexture__Subprovider.html</anchorfile>
      <anchor>a785638a94a9754a84d30c4899d66b5f3</anchor>
      <arglist>(std::function&lt; void(ResourcePath const &amp;) &gt; const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_resource</name>
      <anchorfile>classiv_1_1StreamTexture__Subprovider.html</anchorfile>
      <anchor>a2690c40a2eb2931f5207733d2647d52a</anchor>
      <arglist>(ResourcePath const &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const Texture::Metadata &amp;</type>
      <name>get</name>
      <anchorfile>classiv_1_1StreamTexture__Subprovider.html</anchorfile>
      <anchor>a0c4a9bb85052a9a6476aaaa7386fc03d</anchor>
      <arglist>(ResourcePath const &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1StreamTexture__Subprovider.html</anchorfile>
      <anchor>a65ab9ed6b1d635448d72241d28726761</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1StreamTexture__Subprovider.html</anchorfile>
      <anchor>a1c5676b4808768128b902f5f1bde2cb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO</name>
    <filename>structiv_1_1StringIO.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>Type</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO.html</anchorfile>
      <anchor>a7f2db94d21c8ecbca59b95add2e54457</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO.html</anchorfile>
      <anchor>a08a45c042bdc45df86bfd795d3642758</anchor>
      <arglist>(Type const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; Activator &gt;</name>
    <filename>structiv_1_1StringIO_3_01Activator_01_4.html</filename>
    <member kind="function">
      <type>Activator</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01Activator_01_4.html</anchorfile>
      <anchor>aec6b941669ca26b1fb76d8bbb53e318a</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01Activator_01_4.html</anchorfile>
      <anchor>a9a316f03f11bd13da21edefa4e659e84</anchor>
      <arglist>(Activator const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; Attr&lt; T &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01Attr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01Attr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a66b51f3e647ccfed1ba3f9f24471773c</anchor>
      <arglist>(Attr&lt; T &gt; const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; Attribute::ValueMode &gt;</name>
    <filename>structiv_1_1StringIO_3_01Attribute_1_1ValueMode_01_4.html</filename>
    <base>StringIO_Table&lt; Attribute::ValueMode &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01Attribute_1_1ValueMode_01_4.html</anchorfile>
      <anchor>a75537fec2c3856983abecf3d7096b44e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; AttributeEventProcessor::Event &gt;</name>
    <filename>structiv_1_1StringIO_3_01AttributeEventProcessor_1_1Event_01_4.html</filename>
    <base>StringIO_Table&lt; AttributeEventProcessor::Event &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01AttributeEventProcessor_1_1Event_01_4.html</anchorfile>
      <anchor>a48cbe847c5e15e83b2afb8b1d9750b24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; Axis &gt;</name>
    <filename>structiv_1_1StringIO_3_01Axis_01_4.html</filename>
    <base>StringIO_Table&lt; Axis &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01Axis_01_4.html</anchorfile>
      <anchor>ad5f6e2cc19271d1a1a2619467d9587d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; AxisDirection &gt;</name>
    <filename>structiv_1_1StringIO_3_01AxisDirection_01_4.html</filename>
    <base>StringIO_Table&lt; AxisDirection &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01AxisDirection_01_4.html</anchorfile>
      <anchor>ac2621cec728fd757868f6872fbfa604e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; AxisOrder &gt;</name>
    <filename>structiv_1_1StringIO_3_01AxisOrder_01_4.html</filename>
    <base>StringIO_Table&lt; AxisOrder &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01AxisOrder_01_4.html</anchorfile>
      <anchor>ae2f997032044f59492f7220aae7ee9d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; bool &gt;</name>
    <filename>structiv_1_1StringIO_3_01bool_01_4.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01bool_01_4.html</anchorfile>
      <anchor>ac16d11e64d46fe324c392e34a6d61e2a</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01bool_01_4.html</anchorfile>
      <anchor>af2ea6de9e73eb3df1b380fdd60f391c4</anchor>
      <arglist>(bool const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; ClientMarker &gt;</name>
    <filename>structiv_1_1StringIO_3_01ClientMarker_01_4.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01ClientMarker_01_4.html</anchorfile>
      <anchor>a94bf59cd7ca462e3c370dabe9c2be318</anchor>
      <arglist>(ClientMarker const &amp;cm, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; ClientMarker const * &gt;</name>
    <filename>structiv_1_1StringIO_3_01ClientMarker_01const_01_5_01_4.html</filename>
    <member kind="function">
      <type>const ClientMarker *</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01ClientMarker_01const_01_5_01_4.html</anchorfile>
      <anchor>ad3d585570dd528a415c5a09365aa70b2</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01ClientMarker_01const_01_5_01_4.html</anchorfile>
      <anchor>a47e4abcfd7739142107869f8a2db3749</anchor>
      <arglist>(ClientMarker const *const &amp;cm, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; ColorSpace &gt;</name>
    <filename>structiv_1_1StringIO_3_01ColorSpace_01_4.html</filename>
    <base>StringIO_Table&lt; ColorSpace &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01ColorSpace_01_4.html</anchorfile>
      <anchor>a436c55f0ac005cbb3c6cd197f6b6a799</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; const char * &gt;</name>
    <filename>structiv_1_1StringIO_3_01const_01char_01_5_01_4.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01const_01char_01_5_01_4.html</anchorfile>
      <anchor>ae59a8a68f62d8b302505772b13b9d0e6</anchor>
      <arglist>(const char *const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; DirtyAttr_I&lt; T &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01DirtyAttr__I_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>DirtyAttr_I&lt; T &gt;</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01DirtyAttr__I_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ad34410bfa3836132d26361d7aaccde2c</anchor>
      <arglist>(const char *name, Context const *context)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01DirtyAttr__I_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a59fae4ab3fa57a17a1c8603d9afa2489</anchor>
      <arglist>(DirtyAttr_I&lt; T &gt; const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; Field&lt; T &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01Field_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01Field_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8f8bae037451b7ed760ec61d43edc66d</anchor>
      <arglist>(Field&lt; T &gt; const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; FieldI::Assignment &gt;</name>
    <filename>structiv_1_1StringIO_3_01FieldI_1_1Assignment_01_4.html</filename>
    <base>StringIO_Table&lt; FieldI::Assignment &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01FieldI_1_1Assignment_01_4.html</anchorfile>
      <anchor>a9c3c46fe18ece0f70502f98b6674bb21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; FlatShader::FilteringStage &gt;</name>
    <filename>structiv_1_1StringIO_3_01FlatShader_1_1FilteringStage_01_4.html</filename>
    <base>StringIO_Table&lt; FlatShader::FilteringStage &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01FlatShader_1_1FilteringStage_01_4.html</anchorfile>
      <anchor>aa7d46b7cf088ec336ae4d2e77a7dd243</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; FlatShader::FittingStage &gt;</name>
    <filename>structiv_1_1StringIO_3_01FlatShader_1_1FittingStage_01_4.html</filename>
    <base>StringIO_Table&lt; FlatShader::FittingStage &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01FlatShader_1_1FittingStage_01_4.html</anchorfile>
      <anchor>add2254794ba7e4093644d8ed46e8ca3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; FlatShader::PixelizeStage &gt;</name>
    <filename>structiv_1_1StringIO_3_01FlatShader_1_1PixelizeStage_01_4.html</filename>
    <base>StringIO_Table&lt; FlatShader::PixelizeStage &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01FlatShader_1_1PixelizeStage_01_4.html</anchorfile>
      <anchor>a2e96e82f6b699ee11f81694fe7fc1459</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; FlatShader::ResizeStage &gt;</name>
    <filename>structiv_1_1StringIO_3_01FlatShader_1_1ResizeStage_01_4.html</filename>
    <base>StringIO_Table&lt; FlatShader::ResizeStage &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01FlatShader_1_1ResizeStage_01_4.html</anchorfile>
      <anchor>a37024475e7a2a20fb278d423513fb471</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; Float, std::enable_if_t&lt; std::is_floating_point&lt; Float &gt;::value &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01Float_00_01std_1_1enable__if__t_3_01std_1_1is__floating__point_3_01Float_01_4_1_1value_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Float</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01Float_00_01std_1_1enable__if__t_3_01std_1_1is__floating__point_3_01Float_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>a424a40d8c02dfbf397b92e0436b0f117</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01Float_00_01std_1_1enable__if__t_3_01std_1_1is__floating__point_3_01Float_01_4_1_1value_01_4_01_4.html</anchorfile>
      <anchor>ac2afe99fc01fd1a964547a9a3ae3f0dc</anchor>
      <arglist>(Float const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; float4x4 &gt;</name>
    <filename>structiv_1_1StringIO_3_01float4x4_01_4.html</filename>
    <member kind="function">
      <type>float4x4</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01float4x4_01_4.html</anchorfile>
      <anchor>a9273c0343885e41521903ef9ffb9dd69</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01float4x4_01_4.html</anchorfile>
      <anchor>af3c158b388147c5fd54b2c14bb9449aa</anchor>
      <arglist>(float4x4 val, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; floatQuat &gt;</name>
    <filename>structiv_1_1StringIO_3_01floatQuat_01_4.html</filename>
    <member kind="function">
      <type>floatQuat</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01floatQuat_01_4.html</anchorfile>
      <anchor>a339c364429405b2ba999f6539d7009d8</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01floatQuat_01_4.html</anchorfile>
      <anchor>aeb8cf3fcddf762d8e3922952a4b8569e</anchor>
      <arglist>(floatQuat val, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; glm::tvec2&lt; Type &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01glm_1_1tvec2_3_01Type_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>glm::tvec2&lt; Type &gt;</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01glm_1_1tvec2_3_01Type_01_4_01_4.html</anchorfile>
      <anchor>aac6916fb709007082209d837765dd2bc</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01glm_1_1tvec2_3_01Type_01_4_01_4.html</anchorfile>
      <anchor>abe2861d7c650d61c5ad16a218dd093d1</anchor>
      <arglist>(glm::tvec2&lt; Type &gt; val, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; glm::tvec3&lt; Type &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01glm_1_1tvec3_3_01Type_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>glm::tvec3&lt; Type &gt;</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01glm_1_1tvec3_3_01Type_01_4_01_4.html</anchorfile>
      <anchor>aed420138224cc4897a0d81acf10fcea6</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01glm_1_1tvec3_3_01Type_01_4_01_4.html</anchorfile>
      <anchor>a2d0817c705c311ca0878d3c224b54f77</anchor>
      <arglist>(glm::tvec3&lt; Type &gt; val, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; glm::tvec4&lt; Type &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01glm_1_1tvec4_3_01Type_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>glm::tvec4&lt; Type &gt;</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01glm_1_1tvec4_3_01Type_01_4_01_4.html</anchorfile>
      <anchor>a3d69a4db05f44796f6db4d9980533441</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01glm_1_1tvec4_3_01Type_01_4_01_4.html</anchorfile>
      <anchor>a74ad122730a6b39ee5c975b318e918c0</anchor>
      <arglist>(glm::tvec4&lt; Type &gt; val, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; Input::Key &gt;</name>
    <filename>structiv_1_1StringIO_3_01Input_1_1Key_01_4.html</filename>
    <base>StringIO_Table&lt; Input::Key &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01Input_1_1Key_01_4.html</anchorfile>
      <anchor>a29b57ef7478681867153f7b27f76bc52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; Input::Type &gt;</name>
    <filename>structiv_1_1StringIO_3_01Input_1_1Type_01_4.html</filename>
    <base>StringIO_Table&lt; Input::Type &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01Input_1_1Type_01_4.html</anchorfile>
      <anchor>af79f2d515324c9147d344a74037ff53d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; MulAgg&lt; Float &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01MulAgg_3_01Float_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>MulAgg&lt; Float &gt;</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01MulAgg_3_01Float_01_4_01_4.html</anchorfile>
      <anchor>a7a310a86bb4da91158c2bb85ea361296</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01MulAgg_3_01Float_01_4_01_4.html</anchorfile>
      <anchor>abd28cd4c877549f53542ec044e0f9d0e</anchor>
      <arglist>(MulAgg&lt; Float &gt; const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; PixelFormat &gt;</name>
    <filename>structiv_1_1StringIO_3_01PixelFormat_01_4.html</filename>
    <base>StringIO_Table&lt; PixelFormat &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01PixelFormat_01_4.html</anchorfile>
      <anchor>a3461891a44ca375e72de8df861db79c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; ResourcePath &gt;</name>
    <filename>structiv_1_1StringIO_3_01ResourcePath_01_4.html</filename>
    <member kind="function">
      <type>ResourcePath</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01ResourcePath_01_4.html</anchorfile>
      <anchor>a0f14aca4bc58ccb63c727a0af0de5276</anchor>
      <arglist>(const char *name, Context const *context)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01ResourcePath_01_4.html</anchorfile>
      <anchor>a76ae5e695c399c008f79a177b47dccd2</anchor>
      <arglist>(ResourcePath const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; SimpleLogger::Flags &gt;</name>
    <filename>structiv_1_1StringIO_3_01SimpleLogger_1_1Flags_01_4.html</filename>
    <base>StringIO_Table&lt; SimpleLogger::Flags &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01SimpleLogger_1_1Flags_01_4.html</anchorfile>
      <anchor>a0dea8e0ec9a0cce7354c1bcf4385d052</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; std::any &gt;</name>
    <filename>structiv_1_1StringIO_3_01std_1_1any_01_4.html</filename>
    <member kind="function">
      <type>std::any</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1any_01_4.html</anchorfile>
      <anchor>adbdcc553fb0eff0416bc5e5a1ff64a48</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1any_01_4.html</anchorfile>
      <anchor>a53ef3dde4b6d926425856d2d12b81b28</anchor>
      <arglist>(std::any const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; std::nullptr_t &gt;</name>
    <filename>structiv_1_1StringIO_3_01std_1_1nullptr__t_01_4.html</filename>
    <member kind="function">
      <type>std::nullptr_t</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1nullptr__t_01_4.html</anchorfile>
      <anchor>a693998530e1fccc1c17ea2c1b2558c9d</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1nullptr__t_01_4.html</anchorfile>
      <anchor>abaa34343ee3dd118370bb9a3cee84eba</anchor>
      <arglist>(std::nullptr_t const &amp;, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; std::optional&lt; T &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01std_1_1optional_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>std::optional&lt; T &gt;</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1optional_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a1ade700937f4917725bb6ca4c9282868</anchor>
      <arglist>(const char *name, Context const *context)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1optional_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aeec3e5df839714e6b0ba9a617575047e</anchor>
      <arglist>(std::optional&lt; T &gt; const &amp;value, Context const *context) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>NIL</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1optional_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a074441d52ebfbba4216a49d9835f2b6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; std::pair&lt; T, U &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01std_1_1pair_3_01T_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>std::pair&lt; T, U &gt;</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1pair_3_01T_00_01U_01_4_01_4.html</anchorfile>
      <anchor>a1762b05d079ed2b570df03b059f80f8c</anchor>
      <arglist>(const char *name, Context const *context)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1pair_3_01T_00_01U_01_4_01_4.html</anchorfile>
      <anchor>ad2d5e4c9dc51a7d51ec1c4cfa21e1541</anchor>
      <arglist>(std::pair&lt; T, U &gt; const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; std::string &gt;</name>
    <filename>structiv_1_1StringIO_3_01std_1_1string_01_4.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>aeb80085ed2b3c302dc17ddca5250bc5a</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>ae55d1ced07120bdb60f6285e9b81d87d</anchor>
      <arglist>(std::string const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; SumAgg&lt; Int &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01SumAgg_3_01Int_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>SumAgg&lt; Int &gt;</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01SumAgg_3_01Int_01_4_01_4.html</anchorfile>
      <anchor>afa766363882b006c8f4065eefbb83867</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01SumAgg_3_01Int_01_4_01_4.html</anchorfile>
      <anchor>a6cf8f8d1c313d714d3e61beb5268c182</anchor>
      <arglist>(SumAgg&lt; Int &gt; const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; T * &gt;</name>
    <filename>structiv_1_1StringIO_3_01T_01_5_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T *</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01T_01_5_01_4.html</anchorfile>
      <anchor>ab8d533e52d925ab5c0bc9d516c8e7a2c</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01T_01_5_01_4.html</anchorfile>
      <anchor>a086f5f110e9afb558fd435860232d699</anchor>
      <arglist>(T *const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; Texture::Filtering &gt;</name>
    <filename>structiv_1_1StringIO_3_01Texture_1_1Filtering_01_4.html</filename>
    <base>StringIO_Table&lt; Texture::Filtering &gt;</base>
    <member kind="variable" static="yes">
      <type>static const ValuesType</type>
      <name>Values</name>
      <anchorfile>structiv_1_1StringIO_3_01Texture_1_1Filtering_01_4.html</anchorfile>
      <anchor>aaf92c24b236f42652063e94220a6a95d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO&lt; TypedRuntimeId, std::enable_if_t&lt; std::is_base_of&lt; RuntimeId&lt; TypedRuntimeId &gt;, TypedRuntimeId &gt;::value &gt; &gt;</name>
    <filename>structiv_1_1StringIO_3_01TypedRuntimeId_00_01std_1_1enable__if__t_3_01std_1_1is__base__of_3_01Ru39ecd0179379ad478d5d456f3aae5996.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>TypedRuntimeId</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO_3_01TypedRuntimeId_00_01std_1_1enable__if__t_3_01std_1_1is__base__of_3_01Ru39ecd0179379ad478d5d456f3aae5996.html</anchorfile>
      <anchor>a9b89dd1319d29ce2526d51d4a8fb1dca</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO_3_01TypedRuntimeId_00_01std_1_1enable__if__t_3_01std_1_1is__base__of_3_01Ru39ecd0179379ad478d5d456f3aae5996.html</anchorfile>
      <anchor>ac1bcf5b032a718a6f91dddca7a07381c</anchor>
      <arglist>(TypedRuntimeId const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIO_Table</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; Enum, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Enum</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(Enum const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; Attribute::ValueMode &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; Attribute::ValueMode, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Attribute::ValueMode</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(Attribute::ValueMode const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; AttributeEventProcessor::Event &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; AttributeEventProcessor::Event, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AttributeEventProcessor::Event</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(AttributeEventProcessor::Event const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; Axis &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; Axis, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(Axis const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; AxisDirection &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; AxisDirection, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AxisDirection</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(AxisDirection const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; AxisOrder &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; AxisOrder, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AxisOrder</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(AxisOrder const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; ColorSpace &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; ColorSpace, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ColorSpace</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(ColorSpace const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; FieldI::Assignment &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; FieldI::Assignment, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FieldI::Assignment</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(FieldI::Assignment const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; FlatShader::FilteringStage &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; FlatShader::FilteringStage, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FlatShader::FilteringStage</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(FlatShader::FilteringStage const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; FlatShader::FittingStage &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; FlatShader::FittingStage, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FlatShader::FittingStage</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(FlatShader::FittingStage const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; FlatShader::PixelizeStage &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; FlatShader::PixelizeStage, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FlatShader::PixelizeStage</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(FlatShader::PixelizeStage const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; FlatShader::ResizeStage &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; FlatShader::ResizeStage, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FlatShader::ResizeStage</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(FlatShader::ResizeStage const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; Input::Key &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; Input::Key, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Input::Key</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(Input::Key const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; Input::Type &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; Input::Type, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Input::Type</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(Input::Type const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; PixelFormat &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; PixelFormat, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PixelFormat</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(PixelFormat const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; SimpleLogger::Flags &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; SimpleLogger::Flags, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SimpleLogger::Flags</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(SimpleLogger::Flags const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringIO_Table&lt; Texture::Filtering &gt;</name>
    <filename>structiv_1_1StringIO__Table.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::pair&lt; Texture::Filtering, const char * &gt; &gt;</type>
      <name>ValuesType</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>a8e25253dd75a397112b2ff66d52c92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Texture::Filtering</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>aa4930d47ec6e28d731153aa0e5c98d97</anchor>
      <arglist>(const char *source, Context const *context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIO__Table.html</anchorfile>
      <anchor>ab76e0a04e7bb997d325f1c9a937b4ad7</anchor>
      <arglist>(Texture::Filtering const &amp;value, Context const *context) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::StringIOIndex</name>
    <filename>structiv_1_1StringIOIndex.html</filename>
    <member kind="function" static="yes">
      <type>static std::any</type>
      <name>Read</name>
      <anchorfile>structiv_1_1StringIOIndex.html</anchorfile>
      <anchor>afdd97c83b3578b02923d3fc047b8a28b</anchor>
      <arglist>(std::type_index, const char *source, Context const *context)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>Write</name>
      <anchorfile>structiv_1_1StringIOIndex.html</anchorfile>
      <anchor>a42dd74634a91506bf19ef9b3f7ba7ad6</anchor>
      <arglist>(std::any const &amp;value, Context const *context)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Register</name>
      <anchorfile>structiv_1_1StringIOIndex.html</anchorfile>
      <anchor>adbcc9088458571918b91349752d4414e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SumAgg</name>
    <filename>classiv_1_1SumAgg.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SumAgg</name>
      <anchorfile>classiv_1_1SumAgg.html</anchorfile>
      <anchor>aed1c16849a15b98f9819c44d8c68e7a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SumAgg</name>
      <anchorfile>classiv_1_1SumAgg.html</anchorfile>
      <anchor>a9c5078353ead29ae6a1d6d224c83e751</anchor>
      <arglist>(Int aggregated, int size)</arglist>
    </member>
    <member kind="function">
      <type>SumAgg&lt; Int &gt;</type>
      <name>Insert</name>
      <anchorfile>classiv_1_1SumAgg.html</anchorfile>
      <anchor>a277a46716faee0929c146ed45a3579eb</anchor>
      <arglist>(Int value) const</arglist>
    </member>
    <member kind="function">
      <type>SumAgg&lt; Int &gt;</type>
      <name>Remove</name>
      <anchorfile>classiv_1_1SumAgg.html</anchorfile>
      <anchor>a99beeced686bcf97be9f109ee20fe3a8</anchor>
      <arglist>(Int value) const</arglist>
    </member>
    <member kind="function">
      <type>Int</type>
      <name>Aggregated</name>
      <anchorfile>classiv_1_1SumAgg.html</anchorfile>
      <anchor>a8d56b58b4c40d02c9ffa45b8c686b88a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classiv_1_1SumAgg.html</anchorfile>
      <anchor>a6ed41669902d8af0afb76e1a295bac27</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::System</name>
    <filename>classiv_1_1System.html</filename>
    <base>iv::Context</base>
    <member kind="function">
      <type></type>
      <name>System</name>
      <anchorfile>classiv_1_1System.html</anchorfile>
      <anchor>a826fd3f756b7b6e45cc2c937e732525c</anchor>
      <arglist>(SystemContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~System</name>
      <anchorfile>classiv_1_1System.html</anchorfile>
      <anchor>a6db29fb1e932c65fbbd26709783a9c3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>flushSystem</name>
      <anchorfile>classiv_1_1System.html</anchorfile>
      <anchor>a901c542bf1518a6446420982dcf34f08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classiv_1_1System.html</anchorfile>
      <anchor>a44fdc1148700de253c450acb399aaa1b</anchor>
      <arglist>(TextDebugView *view)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1System.html</anchorfile>
      <anchor>a9207708f18ec19cfe2391c64d2a6bb1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SystemContainer *</type>
      <name>system_container</name>
      <anchorfile>classiv_1_1System.html</anchorfile>
      <anchor>ac572bd5fdb5b1add3c58f1089800f523</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retain</name>
      <anchorfile>classiv_1_1System.html</anchorfile>
      <anchor>aa7e291868cc244c3c3e3231b3b747f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classiv_1_1System.html</anchorfile>
      <anchor>a5aa3e5613849eb04f9e68d04b04d7fdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>log_process_enabled</name>
      <anchorfile>classiv_1_1System.html</anchorfile>
      <anchor>ac818b61f224b28ba09aa9aea088cd8f1</anchor>
      <arglist>(LogId id) const override final</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>log_process</name>
      <anchorfile>classiv_1_1System.html</anchorfile>
      <anchor>a6049be8df0143051f2a615613fbb6169</anchor>
      <arglist>(SrcInfo const &amp;info, LogId id, std::string const &amp;message) const override final</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::SystemContainer</name>
    <filename>classiv_1_1SystemContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>SystemContainer</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>afd54b7635340eb757344a5c3cf2579a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SystemContainer</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>adf01a4924adca80d650d6db773e70c8d</anchor>
      <arglist>(SystemContainer const *sc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SystemContainer</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>ae75901b54cd890631044ddf05c397140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debug_print</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>ab0734f3c936f55cd78dad6ea391f5371</anchor>
      <arglist>(TextDebugView *view) const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::type_index, System * &gt; &amp;</type>
      <name>debug_GetSystems</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>ab8eb5dffe4ec45f35d0a538d4163b3eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flushSystems</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>a7c85b412fbc4bf738c96696657deb5f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextFrame</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>afd744e8de426e384391efbf62830eadd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>frame_id</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>adfa0d0406ee4966bf96c7c4f00b6eb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TypedSystem *</type>
      <name>getSystem</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>a8f389d131ec0641571e2c85b8f9328cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>System *</type>
      <name>getSystem</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>a36f383e66d8a080aec1261a04d224728</anchor>
      <arglist>(std::type_index type) const</arglist>
    </member>
    <member kind="function">
      <type>TypedSystem *</type>
      <name>createOwnSystem</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>a2d35d8e82fe06e65836b5db3e8f2f259</anchor>
      <arglist>(Args... constructor_arguments)</arglist>
    </member>
    <member kind="function">
      <type>TypedSystem *</type>
      <name>addForeignSystem</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>aecfa5fb0992b881f83a1b5c32d50cc07</anchor>
      <arglist>(TypedSystem *system)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSystem</name>
      <anchorfile>classiv_1_1SystemContainer.html</anchorfile>
      <anchor>acabbaf882e7bf8bc8ba35b2b1055cf0e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::table_debug_context::TableData</name>
    <filename>structiv_1_1table__debug__context_1_1TableData.html</filename>
    <member kind="variable">
      <type>std::vector&lt; RowData &gt;</type>
      <name>rows</name>
      <anchorfile>structiv_1_1table__debug__context_1_1TableData.html</anchorfile>
      <anchor>acfd5702e7040fb4d7302e7cc5392d457</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TableDebugView</name>
    <filename>classiv_1_1TableDebugView.html</filename>
    <base>iv::DebugView</base>
    <member kind="typedef">
      <type>table_debug_context::TableData</type>
      <name>TableData</name>
      <anchorfile>classiv_1_1TableDebugView.html</anchorfile>
      <anchor>aaddac80c9492ee0afc9b73fe06e8d071</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TableDebugView</name>
      <anchorfile>classiv_1_1TableDebugView.html</anchorfile>
      <anchor>aaa39edbdfe51914cf7556c59f15338d5</anchor>
      <arglist>(Context *context)</arglist>
    </member>
    <member kind="function">
      <type>table_debug_context::TableHandle</type>
      <name>Table</name>
      <anchorfile>classiv_1_1TableDebugView.html</anchorfile>
      <anchor>a6b04e78a4672d4f4686d7ab92c54337e</anchor>
      <arglist>(TableId table_id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEmpty</name>
      <anchorfile>classiv_1_1TableDebugView.html</anchorfile>
      <anchor>a4d2a368275c50c71173f19f6b075842a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classiv_1_1TableDebugView.html</anchorfile>
      <anchor>a9d52367e00869ba6e85326594d1195e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; TableId, TableData &gt; &amp;</type>
      <name>Tables</name>
      <anchorfile>classiv_1_1TableDebugView.html</anchorfile>
      <anchor>a94c0b210a6a41e98fc092c05c09e400a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; TableId, TableData &gt; &amp;</type>
      <name>Tables</name>
      <anchorfile>classiv_1_1TableDebugView.html</anchorfile>
      <anchor>a54ba7e951cc6fe081fd9f1eca31fcc7d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::table_debug_context::TableHandle</name>
    <filename>classiv_1_1table__debug__context_1_1TableHandle.html</filename>
    <member kind="function">
      <type></type>
      <name>TableHandle</name>
      <anchorfile>classiv_1_1table__debug__context_1_1TableHandle.html</anchorfile>
      <anchor>a5085c33469a678732d426ca57ed57f77</anchor>
      <arglist>(TableDebugView *context, TableId table_id)</arglist>
    </member>
    <member kind="function">
      <type>RowHandle</type>
      <name>Row</name>
      <anchorfile>classiv_1_1table__debug__context_1_1TableHandle.html</anchorfile>
      <anchor>afb5bf23665baf96b7356297e0cdcb9aa</anchor>
      <arglist>(std::any const &amp;row_id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TableId</name>
    <filename>classiv_1_1TableId.html</filename>
    <base>RuntimeId&lt; TableId &gt;</base>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1TableId.html</anchorfile>
      <anchor>accff522ab2cab095963c72bd64c96b01</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static RuntimeIdDictionary</type>
      <name>Dictionary</name>
      <anchorfile>classiv_1_1TableId.html</anchorfile>
      <anchor>acb84c8d475f8e93f7e3734a3de4f95af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Position_InputNode::Tester</name>
    <filename>classiv_1_1Position__InputNode_1_1Tester.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>position_test</name>
      <anchorfile>classiv_1_1Position__InputNode_1_1Tester.html</anchorfile>
      <anchor>aa8950c22ed43c4fe9755dfae612eb1ea</anchor>
      <arglist>(int2 input_pos)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TestGlfmWindow</name>
    <filename>classiv_1_1TestGlfmWindow.html</filename>
    <member kind="function">
      <type></type>
      <name>TestGlfmWindow</name>
      <anchorfile>classiv_1_1TestGlfmWindow.html</anchorfile>
      <anchor>ad960d113fa811303f56a9d10489e9b41</anchor>
      <arglist>(GLFMDisplay *display)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TestGlfmWindow</name>
      <anchorfile>classiv_1_1TestGlfmWindow.html</anchorfile>
      <anchor>a34fc940382160a71c7b973371663529c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Text</name>
    <filename>classiv_1_1Text.html</filename>
    <base>iv::Elem</base>
    <base>iv::TextSegment</base>
    <base>iv::TranslucentElem</base>
    <base>iv::Renderable</base>
    <member kind="function">
      <type></type>
      <name>Text</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a50cec7966ffb25377e50a201c29d59a3</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a8cfd3cac04cef3c8cecb4c7f90cb921b</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>Text *</type>
      <name>enabled</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>ad534cf0ec531487c5183d4d198ec855c</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>Text *</type>
      <name>preblend</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>af0a2482ec05cf531e88630ff6df26908</anchor>
      <arglist>(float4 val)</arglist>
    </member>
    <member kind="function">
      <type>Text *</type>
      <name>translucent</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>af3bc1e954450a35f4c7967388091db91</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>Text *</type>
      <name>text</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>ab6c3a51feb39809c6f3131b1cf979957</anchor>
      <arglist>(std::string const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Text *</type>
      <name>font</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a5759277a126519ebfc29c9bcd93a8b5e</anchor>
      <arglist>(ResourcePath const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Text *</type>
      <name>fontSize</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a7062ca1011e344e843f1801d37d8b9fe</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <type>Text *</type>
      <name>color</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a72373f4e4adcda3cb989c9c0100b0ef7</anchor>
      <arglist>(float4)</arglist>
    </member>
    <member kind="function">
      <type>Text *</type>
      <name>font_DVar</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a4794782fdb0923bcda62ff2d7e2b0bd8</anchor>
      <arglist>(DVarIdT&lt; ResourcePath &gt; id)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a4ea38dad3694492f0147ae26c9b6583a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; std::string &gt;</type>
      <name>attr_text</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a6cea8f97a33c9c217572fc70c8b72927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; ResourcePath &gt;</type>
      <name>attr_font</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>ad6a7d3cefed7bb06653aac9ec59be272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float &gt;</type>
      <name>attr_fontSize</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>afc10b631fa8180473c27cd7ea8d1acdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float4 &gt;</type>
      <name>attr_color</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a07cd440d8628cf00eea8f6766b524868</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>a10fafae32f7909ef980155c788adcdda</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1Text.html</anchorfile>
      <anchor>ac798392daef2b0293f12e0b819740f98</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TextDebugView</name>
    <filename>classiv_1_1TextDebugView.html</filename>
    <base>iv::DebugView</base>
    <member kind="function">
      <type></type>
      <name>TextDebugView</name>
      <anchorfile>classiv_1_1TextDebugView.html</anchorfile>
      <anchor>a0deec32adf6dc5f7662b7e063ef7d016</anchor>
      <arglist>(Context *context)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>out</name>
      <anchorfile>classiv_1_1TextDebugView.html</anchorfile>
      <anchor>a84889a07ab3992853a9eb010ae270203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prefix_push</name>
      <anchorfile>classiv_1_1TextDebugView.html</anchorfile>
      <anchor>af2b2f93a1c468ba67637c67b229706f9</anchor>
      <arglist>(const char *pref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prefix_push_align</name>
      <anchorfile>classiv_1_1TextDebugView.html</anchorfile>
      <anchor>a9f027bb0bacc58205b7b17cf32aad34a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prefix_pop</name>
      <anchorfile>classiv_1_1TextDebugView.html</anchorfile>
      <anchor>a608c4ac87fddcba32364af38a9f1ef03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postfix_push</name>
      <anchorfile>classiv_1_1TextDebugView.html</anchorfile>
      <anchor>aa892ab51d619ac65a0607fb30547057f</anchor>
      <arglist>(const char *postf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postfix_pop</name>
      <anchorfile>classiv_1_1TextDebugView.html</anchorfile>
      <anchor>a02d311c7dc0aff6d817e609ebde3974a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>print_line</name>
      <anchorfile>classiv_1_1TextDebugView.html</anchorfile>
      <anchor>a7272cc9d6ae9a2bc5aca758fb3c8aed4</anchor>
      <arglist>(const char *prefix, const char *line, const char *postfix)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>endline</name>
      <anchorfile>classiv_1_1TextDebugView.html</anchorfile>
      <anchor>a62bdddca999d000337e8fc0f85244dc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>tdc_streambuf</name>
      <anchorfile>classiv_1_1TextDebugView.html</anchorfile>
      <anchor>a0386569c9c48a28e3a9e6a9ce439a3fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TextLayout</name>
    <filename>classiv_1_1TextLayout.html</filename>
    <base>VectorChildrenElem&lt; TextSegment &gt;</base>
    <base>iv::SlotChild</base>
    <member kind="function">
      <type></type>
      <name>TextLayout</name>
      <anchorfile>classiv_1_1TextLayout.html</anchorfile>
      <anchor>a167a4f460d0ab58f0575dcc15fa8c478</anchor>
      <arglist>(Instance *)</arglist>
    </member>
    <member kind="function">
      <type>TextLayout *</type>
      <name>line_spacing</name>
      <anchorfile>classiv_1_1TextLayout.html</anchorfile>
      <anchor>afcebe43b5ba6a34fce4e5848f2a20d58</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1TextLayout.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1TextLayout.html</anchorfile>
      <anchor>a72205af9ceac8e635c1369ef5ae0a37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float &gt;</type>
      <name>attr_lineSpacing</name>
      <anchorfile>classiv_1_1TextLayout.html</anchorfile>
      <anchor>a83aa02d2102b38a66adafda0d1ef85b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1TextLayout.html</anchorfile>
      <anchor>a47571504aa68cacb6b0b7210118a0987</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1TextLayout.html</anchorfile>
      <anchor>ac39931577ea1ca5038972d94b9a1bebb</anchor>
      <arglist>(ElementRenderer *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TextOutput_ostream</name>
    <filename>classiv_1_1TextOutput__ostream.html</filename>
    <member kind="function">
      <type></type>
      <name>TextOutput_ostream</name>
      <anchorfile>classiv_1_1TextOutput__ostream.html</anchorfile>
      <anchor>a8fff9de590477ea66cd1265ce44f18fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextOutput_ostream</name>
      <anchorfile>classiv_1_1TextOutput__ostream.html</anchorfile>
      <anchor>adf28c9cb6d9189271a69c3efc9238b73</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TextOutput_streambuf</name>
    <filename>classiv_1_1TextOutput__streambuf.html</filename>
    <member kind="function">
      <type></type>
      <name>TextOutput_streambuf</name>
      <anchorfile>classiv_1_1TextOutput__streambuf.html</anchorfile>
      <anchor>a9eaa8587e772c19349beb05ec1bf3ad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::streambuf::int_type</type>
      <name>overflow</name>
      <anchorfile>classiv_1_1TextOutput__streambuf.html</anchorfile>
      <anchor>ac970021f4d267a325a1f66db843d10e9</anchor>
      <arglist>(std::streambuf::int_type value) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TextSegment</name>
    <filename>classiv_1_1TextSegment.html</filename>
    <member kind="function">
      <type></type>
      <name>TextSegment</name>
      <anchorfile>classiv_1_1TextSegment.html</anchorfile>
      <anchor>a2822363ef9189601099a2895ff2ae50b</anchor>
      <arglist>(Elem *elem)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1TextSegment.html</anchorfile>
      <anchor>ae646537c1eb6b983ef6e39446b793183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Elem *</type>
      <name>elem</name>
      <anchorfile>classiv_1_1TextSegment.html</anchorfile>
      <anchor>adcde139e5d6c9a6684ac2a288e0a2423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Elem *</type>
      <name>elem</name>
      <anchorfile>classiv_1_1TextSegment.html</anchorfile>
      <anchor>a04be7a8100971e6f6f4a041b094d2a57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FontMesh::Geometry</type>
      <name>geometry_Compute</name>
      <anchorfile>classiv_1_1TextSegment.html</anchorfile>
      <anchor>a15cdf7fb4c55357fa2469afb283155ba</anchor>
      <arglist>(FontMesh::Location const &amp;)=0</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1TextSegment.html</anchorfile>
      <anchor>aab4f395d65af39b932f462474171aa43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>geometry_dirty</name>
      <anchorfile>classiv_1_1TextSegment.html</anchorfile>
      <anchor>a774e57f314935ca178718202c1a27ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; FontMesh::Location &gt;</type>
      <name>location</name>
      <anchorfile>classiv_1_1TextSegment.html</anchorfile>
      <anchor>a52e5e8cc5448c34d0660ba2429989ffb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Texture</name>
    <filename>classiv_1_1Texture.html</filename>
    <class kind="struct">iv::Texture::Metadata</class>
    <member kind="enumeration">
      <type></type>
      <name>Filtering</name>
      <anchorfile>classiv_1_1Texture.html</anchorfile>
      <anchor>a12a0c31b06525c9bf88616da02a1fbfd</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1Texture.html" anchor="a12a0c31b06525c9bf88616da02a1fbfda60494f02d440f316319dd0fad40ad007">Nearest</enumvalue>
      <enumvalue file="classiv_1_1Texture.html" anchor="a12a0c31b06525c9bf88616da02a1fbfdadf9f6557697ad98843a756e690e2e877">SmoothMsdf</enumvalue>
      <enumvalue file="classiv_1_1Texture.html" anchor="a12a0c31b06525c9bf88616da02a1fbfda6056a55934c00668f97baf2a21d35dc9">Smooth2D</enumvalue>
      <enumvalue file="classiv_1_1Texture.html" anchor="a12a0c31b06525c9bf88616da02a1fbfda67f22f75cb94dd3df62925804306913b">Smooth3D</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classiv_1_1Texture.html</anchorfile>
      <anchor>ade72acce5081bc6ded7998693c5acb2d</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Texture.html</anchorfile>
      <anchor>a345901b9fbfa0eafeec15ea31d7520a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Metadata &amp;</type>
      <name>metadata</name>
      <anchorfile>classiv_1_1Texture.html</anchorfile>
      <anchor>a18cd28fa17aadad1e85c554d1890ddb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlTexture *</type>
      <name>gl_texture</name>
      <anchorfile>classiv_1_1Texture.html</anchorfile>
      <anchor>a834e0c67f271b9e36c3a89b12427761f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hittest</name>
      <anchorfile>classiv_1_1Texture.html</anchorfile>
      <anchor>a0bd21b55b6004a7f310a36d3af9d63d0</anchor>
      <arglist>(int x, int y) const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Texture.html</anchorfile>
      <anchor>afeb919e60a5b82da6b35a58203479a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Metadata</type>
      <name>_metadata</name>
      <anchorfile>classiv_1_1Texture.html</anchorfile>
      <anchor>a7d37fea6d1688b38c946b7d13b7d3986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlTexture</type>
      <name>_gl_texture</name>
      <anchorfile>classiv_1_1Texture.html</anchorfile>
      <anchor>a187811cf19d8f8b2c1a2665eb61ed482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>_hitmap</name>
      <anchorfile>classiv_1_1Texture.html</anchorfile>
      <anchor>a4129e3cc86039fe83f08fa8a0ceaceb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Texture_Resource</name>
    <filename>classiv_1_1Texture__Resource.html</filename>
    <base>SingularResource&lt; Texture &gt;</base>
    <member kind="function">
      <type></type>
      <name>Texture_Resource</name>
      <anchorfile>classiv_1_1Texture__Resource.html</anchorfile>
      <anchor>aefe8c7e3ef389ea4bd43a66a91de5cae</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Texture__Resource.html</anchorfile>
      <anchor>acba5f7250212a3dea3a2942978151878</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TimeId</name>
    <filename>classiv_1_1TimeId.html</filename>
    <base>RuntimeId&lt; TimeId &gt;</base>
    <member kind="variable" static="yes">
      <type>static constexpr char</type>
      <name>TypeName</name>
      <anchorfile>classiv_1_1TimeId.html</anchorfile>
      <anchor>a2e471e7e9628bc54c3a162531a33305a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static RuntimeIdDictionary</type>
      <name>Dictionary</name>
      <anchorfile>classiv_1_1TimeId.html</anchorfile>
      <anchor>abb689235a4f8ea514da6648a6a49eeda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TimeManipulator</name>
    <filename>classiv_1_1TimeManipulator.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeManipulator</name>
      <anchorfile>classiv_1_1TimeManipulator.html</anchorfile>
      <anchor>a946c0da2de7987d9b81584b307ddedb3</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1TimeManipulator.html</anchorfile>
      <anchor>a415791e79414eeb8372051ce8f4a89f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>speed</name>
      <anchorfile>classiv_1_1TimeManipulator.html</anchorfile>
      <anchor>af26636bd8e6b693a9f14bab2d9cef28e</anchor>
      <arglist>(TimeId time_type, double speed)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classiv_1_1TimeManipulator.html</anchorfile>
      <anchor>aa48b833786e0ef37c882be5a602ee85d</anchor>
      <arglist>(TimeId time_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>game_update_period</name>
      <anchorfile>classiv_1_1TimeManipulator.html</anchorfile>
      <anchor>ab91ef5b9c1168709b4728f4cc78178e3</anchor>
      <arglist>(TimeId time_type, int period_ms)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>game_update_period</name>
      <anchorfile>classiv_1_1TimeManipulator.html</anchorfile>
      <anchor>ab41c52fe27b1d6437beb1bc539d5e935</anchor>
      <arglist>(TimeId time_type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TimeSystem</name>
    <filename>classiv_1_1TimeSystem.html</filename>
    <base>iv::System</base>
    <class kind="struct">iv::TimeSystem::UpdateItem</class>
    <member kind="typedef">
      <type>std::multimap&lt; int, UpdateItem &gt;::iterator</type>
      <name>timeout_iterator</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>af4f24901d518962216d8ee8a307940e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeSystem</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>ac025cb1dae90bbca27589ad5ba6c4a1c</anchor>
      <arglist>(SystemContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>debug_name</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a3e976bb03e20ddf7341644f9f8d16a6a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>flushSystem</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a89af200fe34424aed0a033348b120cdd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTime</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>ad5fda58a0f488e0499e08260bc8c0e7a</anchor>
      <arglist>(int delta_ms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextFrame</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a8835930c059d210d963a623466d6c760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_time_ms</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a581244f1e78c24c67a54b1bcbbb1954d</anchor>
      <arglist>(TimeId time_type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_time_to_next_frame_ms</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a8234aa34b5f30d41804926f972e98f05</anchor>
      <arglist>(TimeId time_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_frame_update_client</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a500d0d87c585e90bec7d066deeb6525a</anchor>
      <arglist>(FrameUpdateClient *client)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregister_frame_update_client</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a6e41b40184df3383486d9c5093e8efff</anchor>
      <arglist>(FrameUpdateClient *client)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_fixed_update_client</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a0090b0137de4d79f539b4e1dd431795c</anchor>
      <arglist>(FixedUpdateClient *client, TimeId time_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregister_fixed_update_client</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a6ea92d6f55fcc7cf69e6aa976d565a11</anchor>
      <arglist>(FixedUpdateClient *client, TimeId time_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>speed</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>abb508b5b0a2e1a9f3a9e12e577c09a2f</anchor>
      <arglist>(TimeId time_type, double speed)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a07f9df2609f4e2a77d58a3219c172963</anchor>
      <arglist>(TimeId time_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>game_update_period</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>adc1ccf46bb30c7a15b9cbabfec9165ae</anchor>
      <arglist>(TimeId time_type, int period_ms)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>game_update_period</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a4be5102263dc749227c0d7fe591cf3bf</anchor>
      <arglist>(TimeId time_type)</arglist>
    </member>
    <member kind="function">
      <type>timeout_iterator</type>
      <name>timeout</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>afc793828200871964db92b46de01d7c5</anchor>
      <arglist>(Watch *watch, TimeId time_type, int time_abs_ms, std::function&lt; void() &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel_timeout</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>ad7ae6f1350b4a077f8df455f6d8c7386</anchor>
      <arglist>(TimeId time_type, timeout_iterator it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delay</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>a6d0d1a233b2b3be2ef883d245d82440b</anchor>
      <arglist>(Watch *watch, std::function&lt; void() &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classiv_1_1TimeSystem.html</anchorfile>
      <anchor>af0085e1c0d4b5e233693e41620ae6ed9</anchor>
      <arglist>(TimeId time_type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TimeTransform</name>
    <filename>classiv_1_1TimeTransform.html</filename>
    <member kind="function">
      <type>Anim_float</type>
      <name>Transform</name>
      <anchorfile>classiv_1_1TimeTransform.html</anchorfile>
      <anchor>aa0bcaa7e6bfca71319b1335c75974310</anchor>
      <arglist>(Anim_float src_time, Anim_float total_time) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TimeTransform_Connector</name>
    <filename>classiv_1_1TimeTransform__Connector.html</filename>
    <templarg></templarg>
    <base>Transform_ConnectorI&lt; T, T &gt;</base>
    <member kind="function">
      <type></type>
      <name>TimeTransform_Connector</name>
      <anchorfile>classiv_1_1TimeTransform__Connector.html</anchorfile>
      <anchor>a7ce222f44df57e6175e8b5521bd83812</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1TimeTransform__Connector.html</anchorfile>
      <anchor>a5555f8d775884d04ba66332a729a746a</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classiv_1_1TimeTransform__Connector.html</anchorfile>
      <anchor>a38e00c23b055b05753f160144451d59b</anchor>
      <arglist>(TimeTransform const &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1TimeTransform__Connector.html</anchorfile>
      <anchor>af4d4d6ed6af17456b7c16d15175f2ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdatePass_Down</name>
      <anchorfile>classiv_1_1TimeTransform__Connector.html</anchorfile>
      <anchor>a6d3290ed3f9010cf14248984d90ea431</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdatePass_Up</name>
      <anchorfile>classiv_1_1TimeTransform__Connector.html</anchorfile>
      <anchor>a56baf20cc37238acfeae73691f55a10c</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::interpolator::to_void</name>
    <filename>structiv_1_1interpolator_1_1to__void.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void</type>
      <name>type</name>
      <anchorfile>structiv_1_1interpolator_1_1to__void.html</anchorfile>
      <anchor>a0b1e4e8a8f17d6ebb7977de711b30125</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::ToText_TableDebugView</name>
    <filename>classiv_1_1ToText__TableDebugView.html</filename>
    <base>iv::TableDebugView</base>
    <member kind="function">
      <type></type>
      <name>ToText_TableDebugView</name>
      <anchorfile>classiv_1_1ToText__TableDebugView.html</anchorfile>
      <anchor>ab41a04562473550173ee0f108939ec2b</anchor>
      <arglist>(Context *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write_AsTables</name>
      <anchorfile>classiv_1_1ToText__TableDebugView.html</anchorfile>
      <anchor>af7d4673e85fb7209134635727729c9ae</anchor>
      <arglist>(TextDebugView *out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write_AsLines</name>
      <anchorfile>classiv_1_1ToText__TableDebugView.html</anchorfile>
      <anchor>a8957429319b12a2dbf3e5a0be8971c00</anchor>
      <arglist>(TextDebugView *out, bool print_table_names)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Transform</name>
    <filename>classiv_1_1Transform.html</filename>
    <base>OneChildElem&lt; SlotChild &gt;</base>
    <base>iv::SlotChild</base>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>ab3d078b9c570558e081c988bbf11909f</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>a12d21bd7786ace08294b2023b6a6e5b4</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>Transform *</type>
      <name>position</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>a451a5626596981421f39d1fd6a94cf77</anchor>
      <arglist>(float3)</arglist>
    </member>
    <member kind="function">
      <type>Transform *</type>
      <name>rotation</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>a59f53c6322712a896cff7eb2ad686066</anchor>
      <arglist>(floatQuat)</arglist>
    </member>
    <member kind="function">
      <type>Transform *</type>
      <name>scale</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>abd78c835266c9e70ada4efd120049642</anchor>
      <arglist>(float3)</arglist>
    </member>
    <member kind="function">
      <type>Transform *</type>
      <name>deformation</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>a1793d1b7b33df6c736614f0858622d67</anchor>
      <arglist>(float4x4)</arglist>
    </member>
    <member kind="function">
      <type>Transform *</type>
      <name>outerAnchor</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>ae08474286e07f0112d93a6cbd0eef38e</anchor>
      <arglist>(float3)</arglist>
    </member>
    <member kind="function">
      <type>Transform *</type>
      <name>innerAnchor</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>a9ee7db058ac502572e15bb5e3bda09a4</anchor>
      <arglist>(float3)</arglist>
    </member>
    <member kind="function">
      <type>Transform *</type>
      <name>propagateSize</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>ab85cf3cb7919154500999821b4e65830</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>a9e5d6a8c6489aa953a55977b0e10c586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>ad32bab07460284bdc6018032885f93a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float3 &gt;</type>
      <name>attr_position</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>ae4938ea3c7001452077c0cd469fa805e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; floatQuat &gt;</type>
      <name>attr_rotation</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>adcf454d9ca7b2d8f0896f650f556e72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float3 &gt;</type>
      <name>attr_scale</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>acec6f776944621c6dfef2c94f353669a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float4x4 &gt;</type>
      <name>attr_deformation</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>a4b9614bcec4af70f034a3e6cf4dc46e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float3 &gt;</type>
      <name>attr_outerAnchor</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>a4548a97fe52bcdc3752ae49c90210da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float3 &gt;</type>
      <name>attr_innerAnchor</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>a58e486405fefe3e70c03dd4cc9393006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; bool &gt;</type>
      <name>attr_propagateSize</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>afae755f22aaa52f933d60b48130303c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>first_pass_impl</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>a927c57e7849540ff2a1dc94d7ae9b955</anchor>
      <arglist>(ElementRenderer *er) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>second_pass_impl</name>
      <anchorfile>classiv_1_1Transform.html</anchorfile>
      <anchor>ae03d49d030d0bb6d3a8fd261a7fd1a22</anchor>
      <arglist>(ElementRenderer *er) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Transform_ConnectorI</name>
    <filename>classiv_1_1Transform__ConnectorI.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base protection="protected">iv::AnimConnector</base>
    <member kind="function">
      <type></type>
      <name>Transform_ConnectorI</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a6ffac4ade779affb569491b63c86b0cd</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Transform_ConnectorI</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a5c86928ac10e89af8efd58d5e12c4fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_eachChild</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a25d05e3ea114e07f7097f739cf2d2a3c</anchor>
      <arglist>(std::function&lt; void(AnimNodeI *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_childDisconnect</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a363fb4c2b1d9c407287c8b30f7417437</anchor>
      <arglist>(AnimNodeI *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_eachParent</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a6d60f39980c57ee76d0b5fe6b2dd014a</anchor>
      <arglist>(std::function&lt; void(AnimNodeI *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_parentDisconnect</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a85c1e00e4e531cb8354f80d0ef49073c</anchor>
      <arglist>(AnimNodeI *node) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParent</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a4705d291ff843fd3413d0402c0803721</anchor>
      <arglist>(AnimNode&lt; TParent &gt; *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChild</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>ae58ccad6a42e6ff94b7cf78f37ff84a7</anchor>
      <arglist>(AnimNode&lt; TChild &gt; *node)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a3347f0693f158febd408efb3b1041cdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a280dcb25f1b22687e754a61440726c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>treeChanged_Get</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a2ba6289d14ba243ed93fd2eb7af950c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>treeChanged_Clear</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>ae4861e42ed3212f7c5f7d75be05760c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnimNode&lt; TParent &gt; *</type>
      <name>parent</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>ae653235729de046964c2b51d28911bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnimNode&lt; TChild &gt; *</type>
      <name>child</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>aef8bc6add00b39d7c74f3e35212545a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Transform_ConnectorI&lt; T, T &gt;</name>
    <filename>classiv_1_1Transform__ConnectorI.html</filename>
    <base protection="protected">iv::AnimConnector</base>
    <member kind="function">
      <type></type>
      <name>Transform_ConnectorI</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a6ffac4ade779affb569491b63c86b0cd</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Transform_ConnectorI</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a5c86928ac10e89af8efd58d5e12c4fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_eachChild</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a25d05e3ea114e07f7097f739cf2d2a3c</anchor>
      <arglist>(std::function&lt; void(AnimNodeI *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_childDisconnect</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a363fb4c2b1d9c407287c8b30f7417437</anchor>
      <arglist>(AnimNodeI *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_eachParent</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a6d60f39980c57ee76d0b5fe6b2dd014a</anchor>
      <arglist>(std::function&lt; void(AnimNodeI *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>anim_parentDisconnect</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a85c1e00e4e531cb8354f80d0ef49073c</anchor>
      <arglist>(AnimNodeI *node) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParent</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a4705d291ff843fd3413d0402c0803721</anchor>
      <arglist>(AnimNode&lt; T &gt; *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChild</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>ae58ccad6a42e6ff94b7cf78f37ff84a7</anchor>
      <arglist>(AnimNode&lt; T &gt; *node)</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a3347f0693f158febd408efb3b1041cdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a280dcb25f1b22687e754a61440726c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>treeChanged_Get</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>a2ba6289d14ba243ed93fd2eb7af950c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>treeChanged_Clear</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>ae4861e42ed3212f7c5f7d75be05760c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnimNode&lt; T &gt; *</type>
      <name>parent</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>ae653235729de046964c2b51d28911bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnimNode&lt; T &gt; *</type>
      <name>child</name>
      <anchorfile>classiv_1_1Transform__ConnectorI.html</anchorfile>
      <anchor>aef8bc6add00b39d7c74f3e35212545a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TranslucentElem</name>
    <filename>classiv_1_1TranslucentElem.html</filename>
    <member kind="function">
      <type></type>
      <name>TranslucentElem</name>
      <anchorfile>classiv_1_1TranslucentElem.html</anchorfile>
      <anchor>a89f534f982a94f9e970135a216f26b9a</anchor>
      <arglist>(Elem *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classiv_1_1TranslucentElem.html</anchorfile>
      <anchor>aed0eb1a5766c2aff33090d9bfe0715b0</anchor>
      <arglist>(iv::TableDebugView *view)</arglist>
    </member>
    <member kind="function">
      <type>Elem *</type>
      <name>elem</name>
      <anchorfile>classiv_1_1TranslucentElem.html</anchorfile>
      <anchor>ad048bf6cf8a01230c1e2307f32df1fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Elem *</type>
      <name>elem</name>
      <anchorfile>classiv_1_1TranslucentElem.html</anchorfile>
      <anchor>a2cf001ea582dc02a1a6b9cf428f38ef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TranslucentElem *</type>
      <name>preblend</name>
      <anchorfile>classiv_1_1TranslucentElem.html</anchorfile>
      <anchor>ade82011c1dcbe37943a3b364578f2955</anchor>
      <arglist>(float4 val)</arglist>
    </member>
    <member kind="function">
      <type>TranslucentElem *</type>
      <name>translucent</name>
      <anchorfile>classiv_1_1TranslucentElem.html</anchorfile>
      <anchor>a8ca99e2ec5a462762a2ee5e85dc19128</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1TranslucentElem.html</anchorfile>
      <anchor>a18b786cfa7fb2b0d1646be4c4dd8c629</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; float4 &gt;</type>
      <name>attr_preblend</name>
      <anchorfile>classiv_1_1TranslucentElem.html</anchorfile>
      <anchor>ad46809c22317e5bafa599112f4636320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirtyAttr&lt; bool &gt;</type>
      <name>attr_translucent</name>
      <anchorfile>classiv_1_1TranslucentElem.html</anchorfile>
      <anchor>a3aa2b3146a8c6307e24ed01aa6c0fd55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::TreeDebugView</name>
    <filename>classiv_1_1TreeDebugView.html</filename>
    <base>iv::TextDebugView</base>
    <member kind="enumeration">
      <type></type>
      <name>Style</name>
      <anchorfile>classiv_1_1TreeDebugView.html</anchorfile>
      <anchor>a662f6638c7d0b764a2e3d479f479779a</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1TreeDebugView.html" anchor="a662f6638c7d0b764a2e3d479f479779aa7523255e836d6bf65233c5b4d67185ac">BoldFramesWeakLinks</enumvalue>
      <enumvalue file="classiv_1_1TreeDebugView.html" anchor="a662f6638c7d0b764a2e3d479f479779aa0be1a464502e186a44103b8b60270b37">WeakFramesWeakLinks</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BoxStyle</name>
      <anchorfile>classiv_1_1TreeDebugView.html</anchorfile>
      <anchor>a82201720daa666c3c5fafaca55fa3109</anchor>
      <arglist></arglist>
      <enumvalue file="classiv_1_1TreeDebugView.html" anchor="a82201720daa666c3c5fafaca55fa3109ae41480b6bbfbf7407974a88d3d34f4fa">Solid</enumvalue>
      <enumvalue file="classiv_1_1TreeDebugView.html" anchor="a82201720daa666c3c5fafaca55fa3109a90c09393a4c0970bc9a6703ad527781c">Dotted</enumvalue>
      <enumvalue file="classiv_1_1TreeDebugView.html" anchor="a82201720daa666c3c5fafaca55fa3109a7a1920d61156abc05a60135aefe8bc67">Default</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeDebugView</name>
      <anchorfile>classiv_1_1TreeDebugView.html</anchorfile>
      <anchor>a039e19ef43aa0c855f9c7a9e373a79e5</anchor>
      <arglist>(Context *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Push</name>
      <anchorfile>classiv_1_1TreeDebugView.html</anchorfile>
      <anchor>ae953b6532c4b4dc46eb0583550b2a9a1</anchor>
      <arglist>(const char *node_name, BoxStyle box_style=BoxStyle::Default)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Pop</name>
      <anchorfile>classiv_1_1TreeDebugView.html</anchorfile>
      <anchor>af9569ff762205a69f1c8cadc25ecde60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Separator</name>
      <anchorfile>classiv_1_1TreeDebugView.html</anchorfile>
      <anchor>abea01aafa84804fe7b815c12fc20a731</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classiv_1_1TreeDebugView.html</anchorfile>
      <anchor>a95b83d5038b294ad7c2e7c23d889e5ed</anchor>
      <arglist>(Style style, TextDebugView *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classiv_1_1TreeDebugView.html</anchorfile>
      <anchor>ac6cce0e7ff4acc18f048751dba4932cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>print_line</name>
      <anchorfile>classiv_1_1TreeDebugView.html</anchorfile>
      <anchor>a62191784ef14c1c85af0db0f2adba2f7</anchor>
      <arglist>(const char *prefix, const char *line, const char *postfix) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Pratt::Unary</name>
    <filename>structiv_1_1Pratt_1_1Unary.html</filename>
    <base>iv::Pratt::Expression</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Unary *</type>
      <name>ToUnary</name>
      <anchorfile>structiv_1_1Pratt_1_1Unary.html</anchorfile>
      <anchor>afd4751a06675ef27d1a7840744b217f0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>const Expression *</type>
      <name>child</name>
      <anchorfile>structiv_1_1Pratt_1_1Unary.html</anchorfile>
      <anchor>a55b76b283f122571a96793a318c0074e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::TimeSystem::UpdateItem</name>
    <filename>structiv_1_1TimeSystem_1_1UpdateItem.html</filename>
    <member kind="function">
      <type></type>
      <name>UpdateItem</name>
      <anchorfile>structiv_1_1TimeSystem_1_1UpdateItem.html</anchorfile>
      <anchor>a94256a6178565fe914d5832d542045eb</anchor>
      <arglist>(Instance *watch, std::function&lt; void() &gt; const &amp;fun)</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void() &gt;</type>
      <name>fun</name>
      <anchorfile>structiv_1_1TimeSystem_1_1UpdateItem.html</anchorfile>
      <anchor>a431ecd6487a849face9fc3fc343b560a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>instance_ptr</type>
      <name>watch</name>
      <anchorfile>structiv_1_1TimeSystem_1_1UpdateItem.html</anchorfile>
      <anchor>afdc9b7ecde7c53d99c97c7ce0c1e1dfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Pratt::Value</name>
    <filename>structiv_1_1Pratt_1_1Value.html</filename>
    <base>iv::Pratt::Expression</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Value *</type>
      <name>ToValue</name>
      <anchorfile>structiv_1_1Pratt_1_1Value.html</anchorfile>
      <anchor>aab962408df441a87d7e6121d182d7b00</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>Lex::Token</type>
      <name>token</name>
      <anchorfile>structiv_1_1Pratt_1_1Value.html</anchorfile>
      <anchor>af13bc8f0e58c2e41a7f99738e6eedc61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>token_str</name>
      <anchorfile>structiv_1_1Pratt_1_1Value.html</anchorfile>
      <anchor>a30a284705b9833bb928d91564b939ab5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iv::Font::Variant</name>
    <filename>structiv_1_1Font_1_1Variant.html</filename>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>structiv_1_1Font_1_1Variant.html</anchorfile>
      <anchor>aa66158fe193b3f466e602833ceac7a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const Texture *</type>
      <name>texture</name>
      <anchorfile>structiv_1_1Font_1_1Variant.html</anchorfile>
      <anchor>a43efb241ef5ae8aaa4893fd875f1d148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>type</name>
      <anchorfile>structiv_1_1Font_1_1Variant.html</anchorfile>
      <anchor>a6b3c009020534ce10b62e420e2ca3fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structiv_1_1Font_1_1Variant.html</anchorfile>
      <anchor>af4d29bae8c76e2c19d6469c42467147a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; uint32_t, Glyph &gt;</type>
      <name>glyphs</name>
      <anchorfile>structiv_1_1Font_1_1Variant.html</anchorfile>
      <anchor>a1b07df66af83e2f0ad1cc650024999a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::VectorChildrenElem</name>
    <filename>classiv_1_1VectorChildrenElem.html</filename>
    <templarg></templarg>
    <base>iv::Elem</base>
    <member kind="function">
      <type></type>
      <name>VectorChildrenElem</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a96b54554060da0f339200ace30cd06e0</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorChildrenElem</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a7e04d842732a989e0ac47f229d13a34c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a2a80bd9135f3828cea53cd4a11661b6e</anchor>
      <arglist>(CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild_Instance</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a72cdc7cfa13cfddf5879e5a69f736d4f</anchor>
      <arglist>(char const *name, CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a59c18e558c552b4ba065cb05eaeeb5a3</anchor>
      <arglist>(ChildT *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>af6f62c9710e495269e073806766af09b</anchor>
      <arglist>(ChildT *)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a5faf16d0605db1e9cd1838a5fccccfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_eachChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a5c7337ad11f45d4fd9747a1f1c4c172e</anchor>
      <arglist>(std::function&lt; void(Elem *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_childDisconnect</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a33fca76d3365dc6bc2bee62149109ef7</anchor>
      <arglist>(Elem *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_eachChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a8355f752af2857d2cf3009193f10e8d9</anchor>
      <arglist>(std::function&lt; void(InputNode *) &gt; const &amp;f) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_childDisconnect</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a4b1a60cb314916793b5f78c336c08227</anchor>
      <arglist>(InputNode *child) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ChildT * &gt;</type>
      <name>children</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a3aab92170fa942790e0de1cdcfd2955e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>children_dirty</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a0ce6aa8a578ffec55b4a8ffd5d564f6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorChildrenElem&lt; DividerSlot &gt;</name>
    <filename>classiv_1_1VectorChildrenElem.html</filename>
    <base>iv::Elem</base>
    <member kind="function">
      <type></type>
      <name>VectorChildrenElem</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a96b54554060da0f339200ace30cd06e0</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorChildrenElem</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a7e04d842732a989e0ac47f229d13a34c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a2a80bd9135f3828cea53cd4a11661b6e</anchor>
      <arglist>(CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild_Instance</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a72cdc7cfa13cfddf5879e5a69f736d4f</anchor>
      <arglist>(char const *name, CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a59c18e558c552b4ba065cb05eaeeb5a3</anchor>
      <arglist>(DividerSlot *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>af6f62c9710e495269e073806766af09b</anchor>
      <arglist>(DividerSlot *)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a5faf16d0605db1e9cd1838a5fccccfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_eachChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a5c7337ad11f45d4fd9747a1f1c4c172e</anchor>
      <arglist>(std::function&lt; void(Elem *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_childDisconnect</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a33fca76d3365dc6bc2bee62149109ef7</anchor>
      <arglist>(Elem *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_eachChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a8355f752af2857d2cf3009193f10e8d9</anchor>
      <arglist>(std::function&lt; void(InputNode *) &gt; const &amp;f) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_childDisconnect</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a4b1a60cb314916793b5f78c336c08227</anchor>
      <arglist>(InputNode *child) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; DividerSlot * &gt;</type>
      <name>children</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a3aab92170fa942790e0de1cdcfd2955e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>children_dirty</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a0ce6aa8a578ffec55b4a8ffd5d564f6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorChildrenElem&lt; SlotChild &gt;</name>
    <filename>classiv_1_1VectorChildrenElem.html</filename>
    <base>iv::Elem</base>
    <member kind="function">
      <type></type>
      <name>VectorChildrenElem</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a96b54554060da0f339200ace30cd06e0</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorChildrenElem</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a7e04d842732a989e0ac47f229d13a34c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a2a80bd9135f3828cea53cd4a11661b6e</anchor>
      <arglist>(CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild_Instance</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a72cdc7cfa13cfddf5879e5a69f736d4f</anchor>
      <arglist>(char const *name, CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a59c18e558c552b4ba065cb05eaeeb5a3</anchor>
      <arglist>(SlotChild *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>af6f62c9710e495269e073806766af09b</anchor>
      <arglist>(SlotChild *)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a5faf16d0605db1e9cd1838a5fccccfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_eachChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a5c7337ad11f45d4fd9747a1f1c4c172e</anchor>
      <arglist>(std::function&lt; void(Elem *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_childDisconnect</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a33fca76d3365dc6bc2bee62149109ef7</anchor>
      <arglist>(Elem *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_eachChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a8355f752af2857d2cf3009193f10e8d9</anchor>
      <arglist>(std::function&lt; void(InputNode *) &gt; const &amp;f) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_childDisconnect</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a4b1a60cb314916793b5f78c336c08227</anchor>
      <arglist>(InputNode *child) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SlotChild * &gt;</type>
      <name>children</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a3aab92170fa942790e0de1cdcfd2955e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>children_dirty</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a0ce6aa8a578ffec55b4a8ffd5d564f6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorChildrenElem&lt; TextSegment &gt;</name>
    <filename>classiv_1_1VectorChildrenElem.html</filename>
    <base>iv::Elem</base>
    <member kind="function">
      <type></type>
      <name>VectorChildrenElem</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a96b54554060da0f339200ace30cd06e0</anchor>
      <arglist>(Instance *inst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorChildrenElem</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a7e04d842732a989e0ac47f229d13a34c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a2a80bd9135f3828cea53cd4a11661b6e</anchor>
      <arglist>(CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>createChild_Instance</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a72cdc7cfa13cfddf5879e5a69f736d4f</anchor>
      <arglist>(char const *name, CArgs const &amp;... cargs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a59c18e558c552b4ba065cb05eaeeb5a3</anchor>
      <arglist>(TextSegment *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>af6f62c9710e495269e073806766af09b</anchor>
      <arglist>(TextSegment *)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a5faf16d0605db1e9cd1838a5fccccfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_eachChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a5c7337ad11f45d4fd9747a1f1c4c172e</anchor>
      <arglist>(std::function&lt; void(Elem *) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>elem_childDisconnect</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a33fca76d3365dc6bc2bee62149109ef7</anchor>
      <arglist>(Elem *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_eachChild</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a8355f752af2857d2cf3009193f10e8d9</anchor>
      <arglist>(std::function&lt; void(InputNode *) &gt; const &amp;f) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>input_childDisconnect</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a4b1a60cb314916793b5f78c336c08227</anchor>
      <arglist>(InputNode *child) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TextSegment * &gt;</type>
      <name>children</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a3aab92170fa942790e0de1cdcfd2955e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>children_dirty</name>
      <anchorfile>classiv_1_1VectorChildrenElem.html</anchorfile>
      <anchor>a0ce6aa8a578ffec55b4a8ffd5d564f6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::VirtualResourceProvider</name>
    <filename>classiv_1_1VirtualResourceProvider.html</filename>
    <base protection="private">iv::ResourceProvider</base>
    <member kind="function">
      <type></type>
      <name>VirtualResourceProvider</name>
      <anchorfile>classiv_1_1VirtualResourceProvider.html</anchorfile>
      <anchor>a2c71ecb0b84d52590c66382cfabaf9a4</anchor>
      <arglist>(Instance *inst, size_t priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>each_type</name>
      <anchorfile>classiv_1_1VirtualResourceProvider.html</anchorfile>
      <anchor>a0167e4eb13430db8e92753ff3d5e0dfc</anchor>
      <arglist>(std::function&lt; void(std::type_index type) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>has_path</name>
      <anchorfile>classiv_1_1VirtualResourceProvider.html</anchorfile>
      <anchor>a2d6311b2409ba72864602d1785220e3f</anchor>
      <arglist>(ResourcePath const &amp;path, std::type_index type) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>each_resource</name>
      <anchorfile>classiv_1_1VirtualResourceProvider.html</anchorfile>
      <anchor>af46d4659b210b00bd9405ddfe9c67295</anchor>
      <arglist>(std::type_index type, std::function&lt; void(ResourcePath const &amp;) &gt; const &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; void *, Instance * &gt;</type>
      <name>create_resource</name>
      <anchorfile>classiv_1_1VirtualResourceProvider.html</anchorfile>
      <anchor>ab475b9358333d3593f08c4a8c0bae709</anchor>
      <arglist>(ResourcePath const &amp;path, std::type_index type, ResourcesRoot *parent) override</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1VirtualResourceProvider.html</anchorfile>
      <anchor>a1cb8383882b63517bf71f1a3272a242e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegisterType</name>
      <anchorfile>classiv_1_1VirtualResourceProvider.html</anchorfile>
      <anchor>ab3d9c44cff83f255e0b3c64d26cc680f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>UnregisterAllTypes</name>
      <anchorfile>classiv_1_1VirtualResourceProvider.html</anchorfile>
      <anchor>a62b081f16257c6d22ac4b9dea1579540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1VirtualResourceProvider.html</anchorfile>
      <anchor>a16606987cfda2c88587e4f6541a200d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::volatile_set</name>
    <filename>classiv_1_1volatile__set.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::unordered_set&lt; Key, Hash, Pred &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ab8571ec4f3e08e20fdd79719e0d314eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6c312dd578d09e0af94d5a2ebb7c521a</anchor>
      <arglist>(Key const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>af879512b5712eed132bd106446b81ab8</anchor>
      <arglist>(Key const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>aa8165e9c5c5be07684661c55cd763f20</anchor>
      <arglist>(Key const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6931ae1500163edbaeba47b623f26fd5</anchor>
      <arglist>(std::function&lt; void(Key const &amp;) &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_begin</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ac74ae87a52c87ebf4cfa9f5575dfa37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_find</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>afe50af43f145474bd4eb2c0a29f677ae</anchor>
      <arglist>(Key const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a7290f6c49b9d41a56d934880f8982438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a346e2b049c8c918fa9cba171016efef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6869a879702472edfa7bbe01101f34f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ad6adaba1f263d7446903c72aa585e3d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>volatile_set&lt; iv::AttributeListener * &gt;</name>
    <filename>classiv_1_1volatile__set.html</filename>
    <member kind="typedef">
      <type>typename std::unordered_set&lt; iv::AttributeListener *, std::hash&lt; iv::AttributeListener * &gt;, std::equal_to&lt; iv::AttributeListener * &gt; &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ab8571ec4f3e08e20fdd79719e0d314eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6c312dd578d09e0af94d5a2ebb7c521a</anchor>
      <arglist>(iv::AttributeListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>af879512b5712eed132bd106446b81ab8</anchor>
      <arglist>(iv::AttributeListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>aa8165e9c5c5be07684661c55cd763f20</anchor>
      <arglist>(iv::AttributeListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6931ae1500163edbaeba47b623f26fd5</anchor>
      <arglist>(std::function&lt; void(iv::AttributeListener * const &amp;) &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_begin</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ac74ae87a52c87ebf4cfa9f5575dfa37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_find</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>afe50af43f145474bd4eb2c0a29f677ae</anchor>
      <arglist>(iv::AttributeListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a7290f6c49b9d41a56d934880f8982438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a346e2b049c8c918fa9cba171016efef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6869a879702472edfa7bbe01101f34f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ad6adaba1f263d7446903c72aa585e3d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>volatile_set&lt; iv::CharListener * &gt;</name>
    <filename>classiv_1_1volatile__set.html</filename>
    <member kind="typedef">
      <type>typename std::unordered_set&lt; iv::CharListener *, std::hash&lt; iv::CharListener * &gt;, std::equal_to&lt; iv::CharListener * &gt; &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ab8571ec4f3e08e20fdd79719e0d314eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6c312dd578d09e0af94d5a2ebb7c521a</anchor>
      <arglist>(iv::CharListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>af879512b5712eed132bd106446b81ab8</anchor>
      <arglist>(iv::CharListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>aa8165e9c5c5be07684661c55cd763f20</anchor>
      <arglist>(iv::CharListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6931ae1500163edbaeba47b623f26fd5</anchor>
      <arglist>(std::function&lt; void(iv::CharListener * const &amp;) &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_begin</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ac74ae87a52c87ebf4cfa9f5575dfa37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_find</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>afe50af43f145474bd4eb2c0a29f677ae</anchor>
      <arglist>(iv::CharListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a7290f6c49b9d41a56d934880f8982438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a346e2b049c8c918fa9cba171016efef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6869a879702472edfa7bbe01101f34f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ad6adaba1f263d7446903c72aa585e3d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>volatile_set&lt; iv::DebugInstanceListener * &gt;</name>
    <filename>classiv_1_1volatile__set.html</filename>
    <member kind="typedef">
      <type>typename std::unordered_set&lt; iv::DebugInstanceListener *, std::hash&lt; iv::DebugInstanceListener * &gt;, std::equal_to&lt; iv::DebugInstanceListener * &gt; &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ab8571ec4f3e08e20fdd79719e0d314eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6c312dd578d09e0af94d5a2ebb7c521a</anchor>
      <arglist>(iv::DebugInstanceListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>af879512b5712eed132bd106446b81ab8</anchor>
      <arglist>(iv::DebugInstanceListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>aa8165e9c5c5be07684661c55cd763f20</anchor>
      <arglist>(iv::DebugInstanceListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6931ae1500163edbaeba47b623f26fd5</anchor>
      <arglist>(std::function&lt; void(iv::DebugInstanceListener * const &amp;) &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_begin</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ac74ae87a52c87ebf4cfa9f5575dfa37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_find</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>afe50af43f145474bd4eb2c0a29f677ae</anchor>
      <arglist>(iv::DebugInstanceListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a7290f6c49b9d41a56d934880f8982438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a346e2b049c8c918fa9cba171016efef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6869a879702472edfa7bbe01101f34f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ad6adaba1f263d7446903c72aa585e3d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>volatile_set&lt; iv::DelayedLoader * &gt;</name>
    <filename>classiv_1_1volatile__set.html</filename>
    <member kind="typedef">
      <type>typename std::unordered_set&lt; iv::DelayedLoader *, std::hash&lt; iv::DelayedLoader * &gt;, std::equal_to&lt; iv::DelayedLoader * &gt; &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ab8571ec4f3e08e20fdd79719e0d314eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6c312dd578d09e0af94d5a2ebb7c521a</anchor>
      <arglist>(iv::DelayedLoader * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>af879512b5712eed132bd106446b81ab8</anchor>
      <arglist>(iv::DelayedLoader * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>aa8165e9c5c5be07684661c55cd763f20</anchor>
      <arglist>(iv::DelayedLoader * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6931ae1500163edbaeba47b623f26fd5</anchor>
      <arglist>(std::function&lt; void(iv::DelayedLoader * const &amp;) &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_begin</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ac74ae87a52c87ebf4cfa9f5575dfa37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_find</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>afe50af43f145474bd4eb2c0a29f677ae</anchor>
      <arglist>(iv::DelayedLoader * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a7290f6c49b9d41a56d934880f8982438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a346e2b049c8c918fa9cba171016efef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6869a879702472edfa7bbe01101f34f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ad6adaba1f263d7446903c72aa585e3d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>volatile_set&lt; iv::DVarListenerI * &gt;</name>
    <filename>classiv_1_1volatile__set.html</filename>
    <member kind="typedef">
      <type>typename std::unordered_set&lt; iv::DVarListenerI *, std::hash&lt; iv::DVarListenerI * &gt;, std::equal_to&lt; iv::DVarListenerI * &gt; &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ab8571ec4f3e08e20fdd79719e0d314eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6c312dd578d09e0af94d5a2ebb7c521a</anchor>
      <arglist>(iv::DVarListenerI * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>af879512b5712eed132bd106446b81ab8</anchor>
      <arglist>(iv::DVarListenerI * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>aa8165e9c5c5be07684661c55cd763f20</anchor>
      <arglist>(iv::DVarListenerI * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6931ae1500163edbaeba47b623f26fd5</anchor>
      <arglist>(std::function&lt; void(iv::DVarListenerI * const &amp;) &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_begin</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ac74ae87a52c87ebf4cfa9f5575dfa37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_find</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>afe50af43f145474bd4eb2c0a29f677ae</anchor>
      <arglist>(iv::DVarListenerI * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a7290f6c49b9d41a56d934880f8982438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a346e2b049c8c918fa9cba171016efef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6869a879702472edfa7bbe01101f34f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ad6adaba1f263d7446903c72aa585e3d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>volatile_set&lt; iv::InputBindingListener * &gt;</name>
    <filename>classiv_1_1volatile__set.html</filename>
    <member kind="typedef">
      <type>typename std::unordered_set&lt; iv::InputBindingListener *, std::hash&lt; iv::InputBindingListener * &gt;, std::equal_to&lt; iv::InputBindingListener * &gt; &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ab8571ec4f3e08e20fdd79719e0d314eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6c312dd578d09e0af94d5a2ebb7c521a</anchor>
      <arglist>(iv::InputBindingListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>af879512b5712eed132bd106446b81ab8</anchor>
      <arglist>(iv::InputBindingListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>aa8165e9c5c5be07684661c55cd763f20</anchor>
      <arglist>(iv::InputBindingListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6931ae1500163edbaeba47b623f26fd5</anchor>
      <arglist>(std::function&lt; void(iv::InputBindingListener * const &amp;) &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_begin</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ac74ae87a52c87ebf4cfa9f5575dfa37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_find</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>afe50af43f145474bd4eb2c0a29f677ae</anchor>
      <arglist>(iv::InputBindingListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a7290f6c49b9d41a56d934880f8982438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a346e2b049c8c918fa9cba171016efef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6869a879702472edfa7bbe01101f34f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ad6adaba1f263d7446903c72aa585e3d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>volatile_set&lt; iv::LumaListener * &gt;</name>
    <filename>classiv_1_1volatile__set.html</filename>
    <member kind="typedef">
      <type>typename std::unordered_set&lt; iv::LumaListener *, std::hash&lt; iv::LumaListener * &gt;, std::equal_to&lt; iv::LumaListener * &gt; &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ab8571ec4f3e08e20fdd79719e0d314eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6c312dd578d09e0af94d5a2ebb7c521a</anchor>
      <arglist>(iv::LumaListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>af879512b5712eed132bd106446b81ab8</anchor>
      <arglist>(iv::LumaListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>aa8165e9c5c5be07684661c55cd763f20</anchor>
      <arglist>(iv::LumaListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6931ae1500163edbaeba47b623f26fd5</anchor>
      <arglist>(std::function&lt; void(iv::LumaListener * const &amp;) &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_begin</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ac74ae87a52c87ebf4cfa9f5575dfa37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>lock_find</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>afe50af43f145474bd4eb2c0a29f677ae</anchor>
      <arglist>(iv::LumaListener * const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a7290f6c49b9d41a56d934880f8982438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a346e2b049c8c918fa9cba171016efef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>a6869a879702472edfa7bbe01101f34f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classiv_1_1volatile__set.html</anchorfile>
      <anchor>ad6adaba1f263d7446903c72aa585e3d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Watch</name>
    <filename>classiv_1_1Watch.html</filename>
    <member kind="function">
      <type></type>
      <name>Watch</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>a09c5e6c1b02104c94f61c29d420a94a1</anchor>
      <arglist>(Instance *inst, TimeId time_type=TimeId())</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>a852d6aef6fd82f26d22cf1833fc3c4e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>time_type</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>aebd8ff8c2b07d4a45c3690cfd2926444</anchor>
      <arglist>(TimeId tt)</arglist>
    </member>
    <member kind="function">
      <type>TimeId</type>
      <name>time_type</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>a881d923e94bca7e23f4b478dea787e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>time_ms</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>ae544b46944b97dd3b0f10955db9e8523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>delta_ms</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>add41ae721715551430bd434ee919f95e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>time_to_next_frame_ms</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>ac55a62c4649bd689ec5bbb6badbe0ef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeout</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>ac66b9587c31cb315f111798a8f62b0d4</anchor>
      <arglist>(int delta_ms, std::function&lt; void() &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeout_unique</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>a0307a7bad2daa52beac03d2815256d96</anchor>
      <arglist>(int delta_ms, std::function&lt; void() &gt; const &amp;fun)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeout_unique</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>a5e53613c25e5a8517aa60b85f3e0e664</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delay</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>a6835138477f0150497ba63f379da5bdb</anchor>
      <arglist>(std::function&lt; void() &gt; const &amp;fun)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1Watch.html</anchorfile>
      <anchor>ad08f9401913cd4615331861ca297d5fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::Window</name>
    <filename>classiv_1_1Window.html</filename>
    <base>iv::InputSource</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_listener</name>
      <anchorfile>classiv_1_1Window.html</anchorfile>
      <anchor>a1eaeb0570b0c43c12cea6ef68c0f63b6</anchor>
      <arglist>(WindowListener *listener)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>gpu_enabled</name>
      <anchorfile>classiv_1_1Window.html</anchorfile>
      <anchor>aa23c72c1da0465ce2c722f985046b5e0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RenderTarget::Geometry</type>
      <name>geometry</name>
      <anchorfile>classiv_1_1Window.html</anchorfile>
      <anchor>ab2a309074664c0e3c3fe9b4da35672cb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RenderTarget *</type>
      <name>render_target</name>
      <anchorfile>classiv_1_1Window.html</anchorfile>
      <anchor>adff9cd916adf3b7e9dc619f29a15cfc8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupGL</name>
      <anchorfile>classiv_1_1Window.html</anchorfile>
      <anchor>a12b609193a2d7754c283c3bdd87df726</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::WindowListener</name>
    <filename>classiv_1_1WindowListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WindowListener</name>
      <anchorfile>classiv_1_1WindowListener.html</anchorfile>
      <anchor>a1ef7703712991c0d9b2ebbcd76d9d9df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>input</name>
      <anchorfile>classiv_1_1WindowListener.html</anchorfile>
      <anchor>a2179caa43216debcdf1a14f3b8f84377</anchor>
      <arglist>(const Input *input)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>focus_lost</name>
      <anchorfile>classiv_1_1WindowListener.html</anchorfile>
      <anchor>a9555153337c7b73614a11122dc10ac1c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classiv_1_1WindowListener.html</anchorfile>
      <anchor>a71e487d85f275492244eea30f811a1c0</anchor>
      <arglist>(uint64_t delta_ms)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>extra_update</name>
      <anchorfile>classiv_1_1WindowListener.html</anchorfile>
      <anchor>a28732be4a75c62fabad5de72b417024f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classiv_1_1WindowListener.html</anchorfile>
      <anchor>a90e0810f18024ebf98532249e132e2b4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gpu</name>
      <anchorfile>classiv_1_1WindowListener.html</anchorfile>
      <anchor>a92568f8f340c8b344e38f47e2bfb36da</anchor>
      <arglist>(bool enabled, bool dropped)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resized</name>
      <anchorfile>classiv_1_1WindowListener.html</anchorfile>
      <anchor>a77bdad4b8b326197ea0efccfcf94a9dd</anchor>
      <arglist>(RenderTarget::Geometry)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::XcfInfo</name>
    <filename>classiv_1_1XcfInfo.html</filename>
    <base protection="private">iv::StreamResource</base>
    <class kind="struct">iv::XcfInfo::Layer</class>
    <member kind="function">
      <type></type>
      <name>XcfInfo</name>
      <anchorfile>classiv_1_1XcfInfo.html</anchorfile>
      <anchor>ab0905fd6b119047cfedc7c741b771f66</anchor>
      <arglist>(Instance *inst, StreamResourceProvider const *provider, XcfInfo_Subprovider const *, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>float2</type>
      <name>size</name>
      <anchorfile>classiv_1_1XcfInfo.html</anchorfile>
      <anchor>a57a790def0437f9c07fb158a69c53483</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Layer &amp;</type>
      <name>layer</name>
      <anchorfile>classiv_1_1XcfInfo.html</anchorfile>
      <anchor>ab35f20015e20c000fdbb08745f442d58</anchor>
      <arglist>(char const *name) const</arglist>
    </member>
    <member kind="function">
      <type>Instance *</type>
      <name>instance</name>
      <anchorfile>classiv_1_1XcfInfo.html</anchorfile>
      <anchor>a0e1a0d41dda216a6e0d03419bc49d043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1XcfInfo.html</anchorfile>
      <anchor>a4f1686fe5c21b1ddf5697e51f6c8f731</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::XcfInfo_Resource</name>
    <filename>classiv_1_1XcfInfo__Resource.html</filename>
    <base>SingularResource&lt; XcfInfo &gt;</base>
    <member kind="function">
      <type></type>
      <name>XcfInfo_Resource</name>
      <anchorfile>classiv_1_1XcfInfo__Resource.html</anchorfile>
      <anchor>ae306cd7e8ac70951d9c04a4a665de7c5</anchor>
      <arglist>(Instance *inst, ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1XcfInfo__Resource.html</anchorfile>
      <anchor>a7baa649e363a385d2d8e83707643449e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iv::XcfInfo_Subprovider</name>
    <filename>classiv_1_1XcfInfo__Subprovider.html</filename>
    <base>iv::Plain_StreamResourceSubprovider</base>
    <member kind="function">
      <type></type>
      <name>XcfInfo_Subprovider</name>
      <anchorfile>classiv_1_1XcfInfo__Subprovider.html</anchorfile>
      <anchor>aa7728d20d9fd8ae69f29d52925ca5d34</anchor>
      <arglist>(Instance *inst, StreamResourceProvider const *provider)</arglist>
    </member>
    <member kind="variable">
      <type>ClientMarker</type>
      <name>cm</name>
      <anchorfile>classiv_1_1XcfInfo__Subprovider.html</anchorfile>
      <anchor>a3ef43e259d5044e5719d94d6f6a87e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iv</name>
    <filename>namespaceiv.html</filename>
    <namespace>iv::Defs</namespace>
    <namespace>iv::interpolator</namespace>
    <namespace>iv::priv</namespace>
    <namespace>iv::runtime_id</namespace>
    <namespace>iv::table_debug_context</namespace>
    <class kind="struct">iv::Activator</class>
    <class kind="class">iv::Activator_AnimNode</class>
    <class kind="class">iv::Align</class>
    <class kind="class">iv::AndroidAssetResourceProvider</class>
    <class kind="class">iv::AnimConnector</class>
    <class kind="class">iv::AnimHeap</class>
    <class kind="class">iv::AnimNode</class>
    <class kind="class">iv::AnimNodeI</class>
    <class kind="class">iv::AnimSystem</class>
    <class kind="class">iv::Attr</class>
    <class kind="class">iv::Attribute</class>
    <class kind="class">iv::AttributeEventProcessor</class>
    <class kind="class">iv::AttributeListener</class>
    <class kind="class">iv::BlockAll_InputNode</class>
    <class kind="class">iv::Border</class>
    <class kind="class">iv::callback_client_ptr</class>
    <class kind="class">iv::callback_instance_ptr</class>
    <class kind="class">iv::Camera</class>
    <class kind="struct">iv::CameraState</class>
    <class kind="class">iv::Char_InputNode</class>
    <class kind="class">iv::CharListener</class>
    <class kind="class">iv::client_ptr</class>
    <class kind="class">iv::ClientMarker</class>
    <class kind="class">iv::ClientMarkerIds</class>
    <class kind="struct">iv::ColorTransform</class>
    <class kind="class">iv::ConfigFileSystem</class>
    <class kind="class">iv::ConfigStream</class>
    <class kind="class">iv::Context</class>
    <class kind="class">iv::Cooldown_Connector</class>
    <class kind="class">iv::DataStream</class>
    <class kind="class">iv::DataStream_Resource</class>
    <class kind="class">iv::DataStream_Subprovider</class>
    <class kind="class">iv::DebugInstanceListener</class>
    <class kind="class">iv::DebugView</class>
    <class kind="class">iv::DefaultBinder</class>
    <class kind="class">iv::DefaultLumaStyles</class>
    <class kind="class">iv::DelayedLoad</class>
    <class kind="class">iv::DelayedLoader</class>
    <class kind="class">iv::DelayedLoadStatus</class>
    <class kind="class">iv::DelayedLoadSystem</class>
    <class kind="class">iv::Destination_AnimNode</class>
    <class kind="class">iv::Destination_Connector</class>
    <class kind="class">iv::Destination_ConnectorGI</class>
    <class kind="class">iv::DirtyAttr</class>
    <class kind="class">iv::DirtyAttr_I</class>
    <class kind="class">iv::Divider</class>
    <class kind="class">iv::DividerSlot</class>
    <class kind="class">iv::DVar</class>
    <class kind="class">iv::DVar_Field</class>
    <class kind="class">iv::DVarCloner</class>
    <class kind="class">iv::DVarId</class>
    <class kind="class">iv::DVarIdT</class>
    <class kind="class">iv::DVarListener</class>
    <class kind="class">iv::DVarListenerI</class>
    <class kind="class">iv::DVarManipulator</class>
    <class kind="class">iv::DVarProperty</class>
    <class kind="class">iv::DVarSystem</class>
    <class kind="class">iv::Elem</class>
    <class kind="class">iv::ElementRenderer</class>
    <class kind="class">iv::ElementSystem</class>
    <class kind="struct">iv::ExponentialTransform</class>
    <class kind="class">iv::Field</class>
    <class kind="class">iv::FieldI</class>
    <class kind="class">iv::FixedOrder_Camera</class>
    <class kind="class">iv::FixedUpdateClient</class>
    <class kind="class">iv::FlatShader</class>
    <class kind="class">iv::FlatShader_Resource</class>
    <class kind="class">iv::FlatShader_Subprovider</class>
    <class kind="class">iv::Font</class>
    <class kind="class">iv::Font_Resource</class>
    <class kind="class">iv::FontMesh</class>
    <class kind="class">iv::FrameUpdateClient</class>
    <class kind="class">iv::FSResourceProvider</class>
    <class kind="class">iv::FunctorActivatorAttribute</class>
    <class kind="class">iv::FunctorActivatorField</class>
    <class kind="class">iv::FunctorField</class>
    <class kind="class">iv::Game</class>
    <class kind="struct">iv::GameIdentity</class>
    <class kind="class">iv::GlfmRenderTarget</class>
    <class kind="class">iv::GlfmWindow</class>
    <class kind="class">iv::GlfwRenderTarget</class>
    <class kind="class">iv::GlfwWindow</class>
    <class kind="class">iv::GlInfo</class>
    <class kind="class">iv::GlListener</class>
    <class kind="class">iv::GlMesh</class>
    <class kind="struct">iv::GlMeshData</class>
    <class kind="class">iv::GlProgram</class>
    <class kind="class">iv::GlSystem</class>
    <class kind="class">iv::GlTexture</class>
    <class kind="struct">iv::has_interpolate</class>
    <class kind="struct">iv::has_interpolate&lt; T, typename interpolator::to_void&lt; typename T::interpolate &gt;::type &gt;</class>
    <class kind="struct">iv::hash</class>
    <class kind="struct">iv::hash&lt; Enum, typename std::enable_if&lt; std::is_enum&lt; Enum &gt;::value &gt;::type &gt;</class>
    <class kind="struct">iv::hash&lt; iv::int2 &gt;</class>
    <class kind="struct">iv::hash&lt; iv::int3 &gt;</class>
    <class kind="struct">iv::hash&lt; Me, std::enable_if_t&lt; std::is_base_of&lt; iv::RuntimeId&lt; Me &gt;, Me &gt;::value &gt; &gt;</class>
    <class kind="struct">iv::hash&lt; std::pair&lt; First, Second &gt; &gt;</class>
    <class kind="struct">iv::hash&lt; std::tuple&lt; TupleTypes... &gt; &gt;</class>
    <class kind="class">iv::Heap</class>
    <class kind="class">iv::I</class>
    <class kind="class">iv::Image</class>
    <class kind="struct">iv::ImageLoader_Metadata</class>
    <class kind="class">iv::Input</class>
    <class kind="class">iv::InputBinder</class>
    <class kind="class">iv::InputBindingListener</class>
    <class kind="class">iv::InputBindingQuery</class>
    <class kind="class">iv::InputBindingSystem</class>
    <class kind="class">iv::InputEvent</class>
    <class kind="class">iv::InputId</class>
    <class kind="class">iv::InputNode</class>
    <class kind="class">iv::InputQuery</class>
    <class kind="class">iv::InputRoot</class>
    <class kind="class">iv::InputSource</class>
    <class kind="class">iv::InputSystem</class>
    <class kind="class">iv::Instance</class>
    <class kind="class">iv::instance_ptr</class>
    <class kind="class">iv::instance_ptr_interface</class>
    <class kind="class">iv::InstanceSystem</class>
    <class kind="struct">iv::int2_CompareByX</class>
    <class kind="struct">iv::int2_CompareByY</class>
    <class kind="struct">iv::Interpolator</class>
    <class kind="struct">iv::Interpolator&lt; Float, std::enable_if_t&lt; std::is_floating_point&lt; Float &gt;::value &gt; &gt;</class>
    <class kind="struct">iv::Interpolator&lt; float3 &gt;</class>
    <class kind="struct">iv::Interpolator&lt; float4x4 &gt;</class>
    <class kind="struct">iv::Interpolator&lt; Int, std::enable_if_t&lt; std::is_integral&lt; Int &gt;::value &gt; &gt;</class>
    <class kind="struct">iv::Interpolator&lt; std::optional&lt; T &gt; &gt;</class>
    <class kind="struct">iv::Interpolator&lt; std::string &gt;</class>
    <class kind="class">iv::JsonLex</class>
    <class kind="class">iv::Key_InputNode</class>
    <class kind="class">iv::Lambda_Connector</class>
    <class kind="class">iv::LambdaLogTrace</class>
    <class kind="class">iv::Lex</class>
    <class kind="class">iv::Lex_LogTrace</class>
    <class kind="struct">iv::LinearTransform</class>
    <class kind="class">iv::Local_AEP</class>
    <class kind="class">iv::LogId</class>
    <class kind="class">iv::LogTrace</class>
    <class kind="class">iv::LumaButton</class>
    <class kind="class">iv::LumaFrame</class>
    <class kind="class">iv::LumaListener</class>
    <class kind="class">iv::LumaScroller</class>
    <class kind="struct">iv::LumaStyle</class>
    <class kind="class">iv::LumaStyleId</class>
    <class kind="class">iv::LumaStyler</class>
    <class kind="class">iv::LumaSystem</class>
    <class kind="class">iv::LumaText</class>
    <class kind="class">iv::Mesh</class>
    <class kind="class">iv::Mesh_Resource</class>
    <class kind="class">iv::MulAgg</class>
    <class kind="class">iv::multiline_ostream</class>
    <class kind="class">iv::multiline_ostream_streambuf</class>
    <class kind="class">iv::OneChildElem</class>
    <class kind="class">iv::Ostream_TextDebugView</class>
    <class kind="class">iv::Pickable</class>
    <class kind="class">iv::PickableSlot</class>
    <class kind="class">iv::Plain_StreamResourceSubprovider</class>
    <class kind="class">iv::PlatformDefault_ResourceProvider</class>
    <class kind="class">iv::Position_InputNode</class>
    <class kind="class">iv::Pratt</class>
    <class kind="class">iv::Prefsize</class>
    <class kind="class">iv::PrivAttr</class>
    <class kind="class">iv::PrivAttr_I</class>
    <class kind="class">iv::PrivAttr_Owner</class>
    <class kind="class">iv::PrivField</class>
    <class kind="class">iv::PrivField_Owner</class>
    <class kind="class">iv::PrivValAttr</class>
    <class kind="class">iv::PrivValAttr_I</class>
    <class kind="class">iv::PrivValAttr_Owner</class>
    <class kind="class">iv::ProtectedSlot</class>
    <class kind="struct">iv::QuickstepTransform</class>
    <class kind="class">iv::RandomGenerator</class>
    <class kind="class">iv::RandomId</class>
    <class kind="class">iv::RandomSystem</class>
    <class kind="class">iv::Rectangle_LumaButton</class>
    <class kind="class">iv::Renderable</class>
    <class kind="class">iv::RenderTarget</class>
    <class kind="class">iv::Resource_LogTrace</class>
    <class kind="class">iv::ResourceAccess</class>
    <class kind="class">iv::ResourceManagementSystem</class>
    <class kind="class">iv::ResourcePath</class>
    <class kind="class">iv::ResourceProvider</class>
    <class kind="class">iv::ResourcesRoot</class>
    <class kind="struct">iv::reversed</class>
    <class kind="class">iv::RuntimeId</class>
    <class kind="struct">iv::RuntimeIdDictionary</class>
    <class kind="class">iv::Scroller</class>
    <class kind="class">iv::Shader</class>
    <class kind="struct">iv::ShaderScissor</class>
    <class kind="class">iv::SharedAttr</class>
    <class kind="class">iv::SharedAttr_I</class>
    <class kind="class">iv::SimpleDiagnostics</class>
    <class kind="class">iv::SimpleLogger</class>
    <class kind="class">iv::SimpleSplash</class>
    <class kind="class">iv::SingularResource</class>
    <class kind="class">iv::Slot</class>
    <class kind="class">iv::SlotChild</class>
    <class kind="struct">iv::Smoothstep2Transform</class>
    <class kind="struct">iv::Smoothstep3Transform</class>
    <class kind="class">iv::Source_AnimNode</class>
    <class kind="class">iv::Source_Connector</class>
    <class kind="class">iv::SourceInputNode</class>
    <class kind="class">iv::SquareMesh</class>
    <class kind="class">iv::SquareMesh_Resource</class>
    <class kind="class">iv::SquareMesh_Subprovider</class>
    <class kind="struct">iv::SrcInfo</class>
    <class kind="class">iv::SS</class>
    <class kind="class">iv::State_AnimNode</class>
    <class kind="class">iv::StreamFont</class>
    <class kind="class">iv::StreamFont_Subprovider</class>
    <class kind="class">iv::StreamResource</class>
    <class kind="class">iv::StreamResourceProvider</class>
    <class kind="class">iv::StreamResourceSubprovider</class>
    <class kind="class">iv::StreamTexture</class>
    <class kind="class">iv::StreamTexture_Subprovider</class>
    <class kind="struct">iv::StringIO</class>
    <class kind="struct">iv::StringIO&lt; Activator &gt;</class>
    <class kind="struct">iv::StringIO&lt; Attr&lt; T &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; Attribute::ValueMode &gt;</class>
    <class kind="struct">iv::StringIO&lt; AttributeEventProcessor::Event &gt;</class>
    <class kind="struct">iv::StringIO&lt; Axis &gt;</class>
    <class kind="struct">iv::StringIO&lt; AxisDirection &gt;</class>
    <class kind="struct">iv::StringIO&lt; AxisOrder &gt;</class>
    <class kind="struct">iv::StringIO&lt; bool &gt;</class>
    <class kind="struct">iv::StringIO&lt; ClientMarker &gt;</class>
    <class kind="struct">iv::StringIO&lt; ClientMarker const * &gt;</class>
    <class kind="struct">iv::StringIO&lt; ColorSpace &gt;</class>
    <class kind="struct">iv::StringIO&lt; const char * &gt;</class>
    <class kind="struct">iv::StringIO&lt; DirtyAttr_I&lt; T &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; Field&lt; T &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; FieldI::Assignment &gt;</class>
    <class kind="struct">iv::StringIO&lt; FlatShader::FilteringStage &gt;</class>
    <class kind="struct">iv::StringIO&lt; FlatShader::FittingStage &gt;</class>
    <class kind="struct">iv::StringIO&lt; FlatShader::PixelizeStage &gt;</class>
    <class kind="struct">iv::StringIO&lt; FlatShader::ResizeStage &gt;</class>
    <class kind="struct">iv::StringIO&lt; Float, std::enable_if_t&lt; std::is_floating_point&lt; Float &gt;::value &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; float4x4 &gt;</class>
    <class kind="struct">iv::StringIO&lt; floatQuat &gt;</class>
    <class kind="struct">iv::StringIO&lt; glm::tvec2&lt; Type &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; glm::tvec3&lt; Type &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; glm::tvec4&lt; Type &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; Input::Key &gt;</class>
    <class kind="struct">iv::StringIO&lt; Input::Type &gt;</class>
    <class kind="struct">iv::StringIO&lt; MulAgg&lt; Float &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; PixelFormat &gt;</class>
    <class kind="struct">iv::StringIO&lt; ResourcePath &gt;</class>
    <class kind="struct">iv::StringIO&lt; SimpleLogger::Flags &gt;</class>
    <class kind="struct">iv::StringIO&lt; std::any &gt;</class>
    <class kind="struct">iv::StringIO&lt; std::nullptr_t &gt;</class>
    <class kind="struct">iv::StringIO&lt; std::optional&lt; T &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; std::pair&lt; T, U &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; std::string &gt;</class>
    <class kind="struct">iv::StringIO&lt; SumAgg&lt; Int &gt; &gt;</class>
    <class kind="struct">iv::StringIO&lt; T * &gt;</class>
    <class kind="struct">iv::StringIO&lt; Texture::Filtering &gt;</class>
    <class kind="struct">iv::StringIO&lt; TypedRuntimeId, std::enable_if_t&lt; std::is_base_of&lt; RuntimeId&lt; TypedRuntimeId &gt;, TypedRuntimeId &gt;::value &gt; &gt;</class>
    <class kind="struct">iv::StringIO_Table</class>
    <class kind="struct">iv::StringIOIndex</class>
    <class kind="class">iv::SumAgg</class>
    <class kind="class">iv::System</class>
    <class kind="class">iv::SystemContainer</class>
    <class kind="class">iv::TableDebugView</class>
    <class kind="class">iv::TableId</class>
    <class kind="class">iv::TestGlfmWindow</class>
    <class kind="class">iv::Text</class>
    <class kind="class">iv::TextDebugView</class>
    <class kind="class">iv::TextLayout</class>
    <class kind="class">iv::TextOutput_ostream</class>
    <class kind="class">iv::TextOutput_streambuf</class>
    <class kind="class">iv::TextSegment</class>
    <class kind="class">iv::Texture</class>
    <class kind="class">iv::Texture_Resource</class>
    <class kind="class">iv::TimeId</class>
    <class kind="class">iv::TimeManipulator</class>
    <class kind="class">iv::TimeSystem</class>
    <class kind="class">iv::TimeTransform</class>
    <class kind="class">iv::TimeTransform_Connector</class>
    <class kind="class">iv::ToText_TableDebugView</class>
    <class kind="class">iv::Transform</class>
    <class kind="class">iv::Transform_ConnectorI</class>
    <class kind="class">iv::TranslucentElem</class>
    <class kind="class">iv::TreeDebugView</class>
    <class kind="class">iv::VectorChildrenElem</class>
    <class kind="class">iv::VirtualResourceProvider</class>
    <class kind="class">iv::volatile_set</class>
    <class kind="class">iv::Watch</class>
    <class kind="class">iv::Window</class>
    <class kind="class">iv::WindowListener</class>
    <class kind="class">iv::XcfInfo</class>
    <class kind="class">iv::XcfInfo_Resource</class>
    <class kind="class">iv::XcfInfo_Subprovider</class>
    <member kind="typedef">
      <type>glm::tvec2&lt; int &gt;</type>
      <name>int2</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a0974e051990cbde8148d81bd221e7b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec3&lt; int &gt;</type>
      <name>int3</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ab3c5eada162747b1dccf83d9de24fa6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec2&lt; float &gt;</type>
      <name>float2</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ade95aaafb3a54caec767b15aecfd8fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::vec3</type>
      <name>float3</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a1ca131f798b89f132314abe84baae4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec4&lt; float &gt;</type>
      <name>float4</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a6187d0d48969a80681d8475cbda86609</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec2&lt; bool &gt;</type>
      <name>bool2</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a42b04dc0c544c4e2e9f19bbcc662c182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec3&lt; bool &gt;</type>
      <name>bool3</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a7d34124a56df5a40662290170dec8b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>afb553c62154ec41d8f9714265e26938e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tvec4&lt; unsigned char &gt;</type>
      <name>uchar4</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ae7607a32c3b0882ea22fdd5bd318ebe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tmat4x4&lt; float &gt;</type>
      <name>float4x4</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a6798afc1b39b1581f4f8b8a2a4b6629b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glm::tquat&lt; float &gt;</type>
      <name>floatQuat</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a4457ebda04b0ff6fc07ecaa3fe2118d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Interpolator_float</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a5f99ae750b3d67d40059494ff1beb183</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interpolator_float</type>
      <name>Anim_float</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ad491dc0e6e98500cb2d861388bcef9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Axis</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>abc890bafbc0a53479164660895d1a1a0</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="abc890bafbc0a53479164660895d1a1a0a02129bb861061d1a052c592e2dc6b383">X</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="abc890bafbc0a53479164660895d1a1a0a57cec4137b614c87cb4e24a3d003a3e0">Y</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="abc890bafbc0a53479164660895d1a1a0a21c2e59531c8710156d34a3c30ac81d5">Z</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="abc890bafbc0a53479164660895d1a1a0ac3150b59f43aaff4542bca94588ceeca">_Size</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AxisOrder</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a646579b205a4a0966e3eb3034067a7fd</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="a646579b205a4a0966e3eb3034067a7fda482be0da5798aaaecbf7416714e6607f">Incremental</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a646579b205a4a0966e3eb3034067a7fdabcdb9bff07db42410420560b8d77f806">Decremental</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AxisDirection</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a4c7d65bcb5030afdd0700462a225b673</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673a3d3184a9bc6c824c494a88c3abb0701f">X_Inc</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673abb021512000abdac5ea82897c7cfe50a">X_Dec</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673a78b75b385cb953da3d8a939be7d45a1c">Y_Inc</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673ad3eadd4dfb4fb764db80e125d4eb6136">Y_Dec</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673a3cc62111053724fe8f3b5fe7fd0b23b8">Z_Inc</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a4c7d65bcb5030afdd0700462a225b673a657696854f272941b5f402e58ababe91">Z_Dec</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GlMagFiltering</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a621ecdd6117b91a9c7f541d71f821fd1</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="a621ecdd6117b91a9c7f541d71f821fd1a60494f02d440f316319dd0fad40ad007">Nearest</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a621ecdd6117b91a9c7f541d71f821fd1a32a843da6ea40ab3b17a3421ccdf671b">Linear</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GlMinFiltering</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a8a1ac8a79d686e241dddbb9a78ece936</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936a60494f02d440f316319dd0fad40ad007">Nearest</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936a32a843da6ea40ab3b17a3421ccdf671b">Linear</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936a35d97e4a37fa3a0d76c692f3e318599b">NearestMipmapNearest</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936ac164897273ad7f6d61626f5610d86425">LinearMipmapNearest</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936a9a79df5c07e4d2a2875689f608b50529">NearestMipmapLinear</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a8a1ac8a79d686e241dddbb9a78ece936a1173bd3987b1e185d86b9c3fe1b8bd72">LinearMipmapLinear</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PixelFormat</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>afcd7ab53410d6e811b05918a2f80aa8a</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="afcd7ab53410d6e811b05918a2f80aa8aaea3495a278957dc58165e48a8945469f">RGBA</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="afcd7ab53410d6e811b05918a2f80aa8aa5a1fe3c61c9e2fd6dbbc823589f6e697">BGRA</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColorSpace</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a7f00314eabad4aa38f18153856c7ba35</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiv.html" anchor="a7f00314eabad4aa38f18153856c7ba35a9ed33d9be17d174aeb4393a989586ed9">sRGB</enumvalue>
      <enumvalue file="namespaceiv.html" anchor="a7f00314eabad4aa38f18153856c7ba35a32a843da6ea40ab3b17a3421ccdf671b">Linear</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ivorium_init</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aa913cfda2bfbe801466d79bcdc08c924</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ivorium_destroy</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a20ccaeff347c1163c780ccb546f04d5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>mix_max</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a930f7f418c6303b848f49b571fa09315</anchor>
      <arglist>(Float from, Float to, Float maxDist, std::enable_if_t&lt; std::is_floating_point&lt; Float &gt;::value, std::nullptr_t &gt;=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>abs</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a723118863d8fcb5e642264ef17462a12</anchor>
      <arglist>(Float val)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>clamp</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ae085d7355b8149e894faac76ae1101cc</anchor>
      <arglist>(Float val, Float min, Float max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RuntimeId_WarningIdDoesNotExist</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a7fee75405fb956d42d388e33090c8574</anchor>
      <arglist>(Context *context, char const *type_name, char const *persistent_name)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a9f224a1841a18e21587f4d103a8fcefa</anchor>
      <arglist>(std::ostream &amp;out, RuntimeId&lt; Me &gt; const &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sig_div</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a6d42d0e6cfc4995cdf6ab45471ab99a3</anchor>
      <arglist>(int a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>sig_div</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ab9f6c753650f03c0c43267d7e85d0d95</anchor>
      <arglist>(int2 a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sig_mul</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a6742262f599b36b029c2a2fc3c6b2a15</anchor>
      <arglist>(int a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>sig_mul</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a8417c1741f7d34505aa7994b2dc50e2f</anchor>
      <arglist>(int2 a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sig_mod</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a6ddab1d3e060f04f83ab64399fcb18ec</anchor>
      <arglist>(int a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>int2</type>
      <name>sig_mod</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a15d1ecb01768e2ee92606b146cb36300</anchor>
      <arglist>(int2 a, unsigned b)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>sig_fmod</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ad26df1a9e6fbed1250f736f79dcd05f8</anchor>
      <arglist>(float val, float mod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startup_warning</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a8f5c3d2dfd3207174c7b0448f2ecafb5</anchor>
      <arglist>(SrcInfo info, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runtime_warning</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a22c23c34efd7d82a015cfe08803c8620</anchor>
      <arglist>(SrcInfo info, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>StringIO_Read</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a46ed99d6e7f74d7fce11ad2f13fd40c0</anchor>
      <arglist>(const char *source, Context const *context)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>StringIO_Write</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a70ec6158a5ff87c1c16c6539a9421ace</anchor>
      <arglist>(char const *const &amp;value, Context const *context)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>StringIO_Write</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a1725b12ad1407a0bda914eaa8eeb8376</anchor>
      <arglist>(Type const &amp;value, Context const *context)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8_size</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>abe6dc20243c43fef124f0f9fe11de8f5</anchor>
      <arglist>(std::string const &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8_size</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a8d6c09f59d2a557cead50f5635c0276e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>utf8_is_first_byte</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a4424a74275a14c49c689ce0e57f48cdb</anchor>
      <arglist>(char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_explode</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>af2784fb7664f7dcaa7ac64be29de950d</anchor>
      <arglist>(std::string const &amp;s, char delim, std::vector&lt; std::string &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_trim</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aa68b3822f3bc79b92a4363dd510c3d2a</anchor>
      <arglist>(std::string const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_ltrim</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a66efc581a274831108d85b7f2cc3e1d2</anchor>
      <arglist>(std::string const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_rtrim</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a39f0df55e3928b1a7f91375bec27dfe2</anchor>
      <arglist>(std::string const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>float3_Axis</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ac7712325bb0222c95b155b36f529d682</anchor>
      <arglist>(float3 &amp;vec, Axis axis)</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>float3_Axis</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aeff418b6ac2fa43b74b619b097e38402</anchor>
      <arglist>(float3 const &amp;vec, Axis axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach_axis</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>abdaef18dff6d3ebfe61201583e089364</anchor>
      <arglist>(Callable c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ImageLoader_Load</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a1010e6ba9989c70d5d0c97efabd1ba0b</anchor>
      <arglist>(StreamResource *resource, PixelFormat, std::function&lt; void(ImageLoader_Metadata const &amp;, uint8_t *bytes, size_t bytes_count) &gt; const &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GlError_Check</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aedf7ec4e1788464087a931ca42026934</anchor>
      <arglist>(Context const *logger, SrcInfo const &amp;src_info)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>aa7df80a9d095013141e5516d2a4fdc58</anchor>
      <arglist>(std::ostream &amp;out, iv::ResourcePath const &amp;path)</arglist>
    </member>
    <member kind="variable">
      <type>TextOutput_ostream</type>
      <name>TextOutput</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a54ba6e20125e6935b5a79368ecb16198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TableId</type>
      <name>AnimNode_DebugTable</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>ab8a1b1f66750d7d689ab0e637490b40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iv::TableId</type>
      <name>TimeTransform_Connector_DebugTable</name>
      <anchorfile>namespaceiv.html</anchorfile>
      <anchor>a082f506c60e451d0845eef254d328c2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iv::Defs</name>
    <filename>namespaceiv_1_1Defs.html</filename>
    <namespace>iv::Defs::Input</namespace>
    <namespace>iv::Defs::Log</namespace>
    <namespace>iv::Defs::Style</namespace>
    <namespace>iv::Defs::Time</namespace>
  </compound>
  <compound kind="namespace">
    <name>iv::Defs::Input</name>
    <filename>namespaceiv_1_1Defs_1_1Input.html</filename>
    <member kind="variable">
      <type>const InputId</type>
      <name>UI_Up</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Input.html</anchorfile>
      <anchor>a919dc663cbe93c26f0b565011e88b1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const InputId</type>
      <name>UI_Down</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Input.html</anchorfile>
      <anchor>a80de664afa2879173a2cfa403be0b903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const InputId</type>
      <name>UI_Left</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Input.html</anchorfile>
      <anchor>a27d172b1d4d846208c2cd44775efb101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const InputId</type>
      <name>UI_Right</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Input.html</anchorfile>
      <anchor>a7013fa5038bd46097adb8412a8b80d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const InputId</type>
      <name>UI_MousePrimary</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Input.html</anchorfile>
      <anchor>a946f3921f6bbf7feb41321ee8bdf5976</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iv::Defs::Log</name>
    <filename>namespaceiv_1_1Defs_1_1Log.html</filename>
    <member kind="variable">
      <type>const LogId</type>
      <name>Warning</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a3fa9c65dd953dc3feb888810884be79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>UserWarning</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a88f52a65db93fac0b423cffa1d502583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Performance</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a2568b270a80c875400dd5ee452f68c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Lex</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a5eeb6330fe18f7c91fa7431f6e0f9b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>NewFrame</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a30115ffd0abe89880500f30781eebbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ConsistencyChecks</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>ab6d8264d27252cce33b81d2804e49af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ConsistencyChecks_Frame</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>af6b2f28f72841fc5f9f695bb018094e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const iv::LogId</type>
      <name>StartupDump</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a17a58f35ef8370dfbf92e15c1d793c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_Activations</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a6c2a3fb23d5afb6da8062e52a04fe8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_SystemUpdate</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a339aac53de6e27d9f7b81be8469a15ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_NodeUpdate</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>aed097891cde24b5911c76a692e45f894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_ConnectorUpdate</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>af8281d0a8192dfff4322de19f2fafb48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_Events</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a9cc4c23992e7ff3ad30851f1342b7c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Animation_Summary</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>ad4376d18f7becb31326ab04d3d989138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Render</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a144572a12f6d3acbac71ae3b53a18fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>TransformFeedback</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>aa546f6ed77ec6842cf92eafb182696b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementRefreshSummary</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a6b6da8079c693e1ac9a56e4b67827125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementRenderSummary</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a85bcf3baa6102459ddfebe1be49a5e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementFirstPass</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a76738d690909494ff75b3bedec2c913a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementSecondPass</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>ae29d737d53533249b70472046bf9b993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementRenderPass</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>af7d581535475ea5fcc3ff7293cc21ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>ElementFirstPass_Refresh</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>aeb98203093b44964164caef7d73e9f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Text_Verbose</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>ade1a0c9f148361d55cc38f241fec48b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>FixedOrderCamera</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a9812658648e65e6a7f843749a75dd032</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>TextureState</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a5371e253957d5445a8a40c0c1d8708ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>TimeUpdates</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a9586aacc6f07a62f975ff36ee7b896e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>StreamResources</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a466ff8cb2d77502adb5a48fd404fa3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Input</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>ab272bfae0638d1c1faeaec16f5a9c333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>InputTree</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a22a50396186de555ba1420ad1b354336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>InputEvent</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a7013f4a285ba99757042d300dbfabce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>Picking</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a618848d0f7dcd8e0c2e4cbac039d5891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LogId</type>
      <name>DelayedLoad</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Log.html</anchorfile>
      <anchor>a20ded2018621ead83fe02f51aedef225</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iv::Defs::Style</name>
    <filename>namespaceiv_1_1Defs_1_1Style.html</filename>
    <member kind="variable">
      <type>const LumaStyleId</type>
      <name>Default</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Style.html</anchorfile>
      <anchor>abaabfa3e5dba9564290e6dba1301bb7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iv::Defs::Time</name>
    <filename>namespaceiv_1_1Defs_1_1Time.html</filename>
    <member kind="variable">
      <type>const TimeId</type>
      <name>Default</name>
      <anchorfile>namespaceiv_1_1Defs_1_1Time.html</anchorfile>
      <anchor>ad7f7eff30162c7c57d61093ba809f80a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iv::interpolator</name>
    <filename>namespaceiv_1_1interpolator.html</filename>
    <class kind="struct">iv::interpolator::always_false</class>
    <class kind="struct">iv::interpolator::to_void</class>
  </compound>
  <compound kind="namespace">
    <name>iv::priv</name>
    <filename>namespaceiv_1_1priv.html</filename>
    <class kind="struct">iv::priv::HashValueImpl</class>
    <class kind="struct">iv::priv::HashValueImpl&lt; Tuple, 0 &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>hash_combine</name>
      <anchorfile>namespaceiv_1_1priv.html</anchorfile>
      <anchor>a79843871a5f96a8dc59e83157b0ce8d7</anchor>
      <arglist>(std::size_t &amp;seed, T const &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iv::runtime_id</name>
    <filename>namespaceiv_1_1runtime__id.html</filename>
    <class kind="class">iv::runtime_id::Dictionary</class>
  </compound>
  <compound kind="namespace">
    <name>iv::table_debug_context</name>
    <filename>namespaceiv_1_1table__debug__context.html</filename>
    <class kind="struct">iv::table_debug_context::ColumnData</class>
    <class kind="class">iv::table_debug_context::ColumnHandle</class>
    <class kind="struct">iv::table_debug_context::HintData</class>
    <class kind="struct">iv::table_debug_context::RowData</class>
    <class kind="class">iv::table_debug_context::RowHandle</class>
    <class kind="struct">iv::table_debug_context::TableData</class>
    <class kind="class">iv::table_debug_context::TableHandle</class>
  </compound>
  <compound kind="group">
    <name>Elements</name>
    <title>Elements</title>
    <filename>group__Elements.html</filename>
    <class kind="class">iv::Align</class>
    <class kind="class">iv::Border</class>
    <class kind="class">iv::DividerSlot</class>
    <class kind="class">iv::Divider</class>
    <class kind="class">iv::FixedOrder_Camera</class>
    <class kind="class">iv::Image</class>
    <class kind="class">iv::Prefsize</class>
    <class kind="class">iv::Slot</class>
    <class kind="class">iv::Transform</class>
    <class kind="class">iv::Text</class>
    <class kind="class">iv::TextLayout</class>
    <class kind="class">iv::LumaButton</class>
    <class kind="class">iv::LumaFrame</class>
    <class kind="class">iv::LumaScroller</class>
    <class kind="class">iv::LumaText</class>
    <class kind="class">iv::Rectangle_LumaButton</class>
    <class kind="class">iv::SimpleSplash</class>
  </compound>
  <compound kind="group">
    <name>Game</name>
    <title>Game</title>
    <filename>group__Game.html</filename>
    <class kind="class">iv::GlfwWindow</class>
    <class kind="class">iv::WindowListener</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Ivorium</title>
    <filename>index</filename>
  </compound>
</tagfile>
